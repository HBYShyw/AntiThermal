package com.android.server.am;

import android.R;
import android.annotation.PermissionMethod;
import android.annotation.PermissionName;
import android.annotation.RequiresPermission;
import android.app.ActivityClient;
import android.app.ActivityManager;
import android.app.ActivityManagerInternal;
import android.app.ActivityTaskManager;
import android.app.ActivityThread;
import android.app.AnrController;
import android.app.AppGlobals;
import android.app.AppOpsManager;
import android.app.AppOpsManagerInternal;
import android.app.ApplicationErrorReport;
import android.app.ApplicationExitInfo;
import android.app.ApplicationStartInfo;
import android.app.BackgroundStartPrivileges;
import android.app.BroadcastOptions;
import android.app.ContentProviderHolder;
import android.app.ContextImpl;
import android.app.ForegroundServiceDelegationOptions;
import android.app.IActivityController;
import android.app.IActivityManager;
import android.app.IApplicationStartInfoCompleteListener;
import android.app.IApplicationThread;
import android.app.IForegroundServiceObserver;
import android.app.IInstrumentationWatcher;
import android.app.INotificationManager;
import android.app.IProcessObserver;
import android.app.IServiceConnection;
import android.app.IStopUserCallback;
import android.app.ITaskStackListener;
import android.app.IUiAutomationConnection;
import android.app.IUidFrozenStateChangedCallback;
import android.app.IUidObserver;
import android.app.IUnsafeIntentStrictModeCallback;
import android.app.IUserSwitchObserver;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.PendingIntentStats;
import android.app.ProcessMemoryState;
import android.app.ProfilerInfo;
import android.app.ServiceStartNotAllowedException;
import android.app.SyncNotedAppOp;
import android.app.WaitResult;
import android.app.assist.ActivityId;
import android.app.backup.IBackupManager;
import android.app.compat.CompatChanges;
import android.app.usage.UsageStatsManagerInternal;
import android.appwidget.AppWidgetManagerInternal;
import android.content.AttributionSource;
import android.content.AutofillOptions;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.ContentCaptureOptions;
import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.Context;
import android.content.IIntentReceiver;
import android.content.IIntentSender;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.LocusId;
import android.content.ServiceConnection;
import android.content.pm.ActivityInfo;
import android.content.pm.ActivityPresentationInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.IPackageDataObserver;
import android.content.pm.IPackageManager;
import android.content.pm.IncrementalStatesInfo;
import android.content.pm.InstrumentationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManagerInternal;
import android.content.pm.ParceledListSlice;
import android.content.pm.ProcessInfo;
import android.content.pm.ProviderInfo;
import android.content.pm.ProviderInfoList;
import android.content.pm.ResolveInfo;
import android.content.pm.SharedLibraryInfo;
import android.content.pm.TestUtilityService;
import android.content.pm.UserInfo;
import android.content.pm.VersionedPackage;
import android.content.res.CompatibilityInfo;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.database.ContentObserver;
import android.graphics.Rect;
import android.hardware.audio.common.V2_0.AudioDevice;
import android.hardware.audio.common.V2_0.AudioFormat;
import android.hardware.display.DisplayManager;
import android.hardware.display.DisplayManagerInternal;
import android.net.INetd;
import android.net.Uri;
import android.net.util.DataStallUtils;
import android.os.AppZygote;
import android.os.BatteryStats;
import android.os.Binder;
import android.os.BinderProxy;
import android.os.Build;
import android.os.Bundle;
import android.os.Debug;
import android.os.DropBoxManager;
import android.os.FactoryTest;
import android.os.FileUtils;
import android.os.Handler;
import android.os.IBinder;
import android.os.ICancellationSignal;
import android.os.IDeviceIdentifiersPolicyService;
import android.os.IPermissionController;
import android.os.IProcessInfoService;
import android.os.IProgressListener;
import android.os.ITheiaManagerExt;
import android.os.InputConstants;
import android.os.Looper;
import android.os.Message;
import android.os.Parcel;
import android.os.ParcelFileDescriptor;
import android.os.PowerExemptionManager;
import android.os.PowerManager;
import android.os.PowerManagerInternal;
import android.os.PowerSaveState;
import android.os.Process;
import android.os.RemoteCallback;
import android.os.RemoteCallbackList;
import android.os.RemoteException;
import android.os.ResultReceiver;
import android.os.ServiceManager;
import android.os.SharedMemory;
import android.os.ShellCallback;
import android.os.StrictMode;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.Trace;
import android.os.TransactionTooLargeException;
import android.os.UserHandle;
import android.os.UserManager;
import android.os.WorkSource;
import android.os.incremental.IIncrementalService;
import android.os.incremental.IncrementalManager;
import android.os.incremental.IncrementalMetrics;
import android.os.storage.StorageManager;
import android.provider.DeviceConfig;
import android.provider.Settings;
import android.sysprop.InitProperties;
import android.text.TextUtils;
import android.util.ArrayMap;
import android.util.ArraySet;
import android.util.EventLog;
import android.util.FeatureFlagUtils;
import android.util.IndentingPrintWriter;
import android.util.IntArray;
import android.util.Log;
import android.util.Pair;
import android.util.PrintWriterPrinter;
import android.util.Slog;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.util.StatsEvent;
import android.util.TimeUtils;
import android.util.proto.ProtoOutputStream;
import android.util.proto.ProtoUtils;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.autofill.AutofillManagerInternal;
import com.android.bluetooth.BluetoothStatsLog;
import com.android.internal.annotations.CompositeRWLock;
import com.android.internal.annotations.GuardedBy;
import com.android.internal.annotations.VisibleForTesting;
import com.android.internal.app.IAppOpsActiveCallback;
import com.android.internal.app.IAppOpsCallback;
import com.android.internal.app.IAppOpsService;
import com.android.internal.app.ProcessMap;
import com.android.internal.app.SystemUserHomeActivity;
import com.android.internal.app.procstats.ProcessState;
import com.android.internal.app.procstats.ProcessStats;
import com.android.internal.content.InstallLocationUtils;
import com.android.internal.notification.SystemNotificationChannels;
import com.android.internal.os.BackgroundThread;
import com.android.internal.os.BinderCallHeavyHitterWatcher;
import com.android.internal.os.BinderInternal;
import com.android.internal.os.BinderTransactionNameResolver;
import com.android.internal.os.ByteTransferPipe;
import com.android.internal.os.IResultReceiver;
import com.android.internal.os.ProcessCpuTracker;
import com.android.internal.os.SomeArgs;
import com.android.internal.os.TimeoutRecord;
import com.android.internal.os.TransferPipe;
import com.android.internal.os.Zygote;
import com.android.internal.policy.AttributeCache;
import com.android.internal.protolog.ProtoLogGroup;
import com.android.internal.protolog.ProtoLogImpl;
import com.android.internal.util.ArrayUtils;
import com.android.internal.util.DumpUtils;
import com.android.internal.util.FastPrintWriter;
import com.android.internal.util.FrameworkStatsLog;
import com.android.internal.util.MemInfoReader;
import com.android.internal.util.Preconditions;
import com.android.internal.util.function.HeptFunction;
import com.android.internal.util.function.HexFunction;
import com.android.internal.util.function.QuadFunction;
import com.android.internal.util.function.QuintFunction;
import com.android.internal.util.function.UndecFunction;
import com.android.server.AlarmManagerInternal;
import com.android.server.BootReceiver;
import com.android.server.DeviceIdleInternal;
import com.android.server.DisplayThread;
import com.android.server.IDeviceIdleControllerExt;
import com.android.server.IntentResolver;
import com.android.server.IoThread;
import com.android.server.LocalManagerRegistry;
import com.android.server.LocalServices;
import com.android.server.LockGuard;
import com.android.server.OplusIoThread;
import com.android.server.PackageWatchdog;
import com.android.server.ServiceThread;
import com.android.server.SystemConfig;
import com.android.server.SystemService;
import com.android.server.SystemServiceManager;
import com.android.server.ThreadPriorityBooster;
import com.android.server.UiThread;
import com.android.server.UserspaceRebootLogger;
import com.android.server.Watchdog;
import com.android.server.am.ActiveServices;
import com.android.server.am.ActivityManagerService;
import com.android.server.am.AppNotRespondingDialog;
import com.android.server.am.ComponentAliasResolver;
import com.android.server.am.DropboxRateLimiter;
import com.android.server.am.IActivityManagerServiceExt;
import com.android.server.am.PendingIntentRecord;
import com.android.server.am.ProcessList;
import com.android.server.appop.AppOpsService;
import com.android.server.backup.BackupManagerConstants;
import com.android.server.compat.PlatformCompat;
import com.android.server.contentcapture.ContentCaptureManagerInternal;
import com.android.server.criticalevents.CriticalEventLog;
import com.android.server.firewall.IntentFirewall;
import com.android.server.graphics.fonts.FontManagerInternal;
import com.android.server.job.JobSchedulerInternal;
import com.android.server.net.NetworkManagementInternal;
import com.android.server.net.NetworkPolicyManagerInternal;
import com.android.server.os.NativeTombstoneManager;
import com.android.server.pm.Computer;
import com.android.server.pm.IPackageManagerServiceUtilsExt;
import com.android.server.pm.Installer;
import com.android.server.pm.UserManagerInternal;
import com.android.server.pm.permission.PermissionManagerServiceInternal;
import com.android.server.pm.pkg.AndroidPackage;
import com.android.server.pm.pkg.parsing.ParsingPackageUtils;
import com.android.server.pm.snapshot.PackageDataSnapshot;
import com.android.server.power.stats.BatteryStatsImpl;
import com.android.server.power.stats.IBatteryStatsImplExt;
import com.android.server.sdksandbox.SdkSandboxManagerLocal;
import com.android.server.uri.GrantUri;
import com.android.server.uri.UriGrantsManagerInternal;
import com.android.server.uri.UriPermissionOwner;
import com.android.server.utils.PriorityDump;
import com.android.server.utils.Slogf;
import com.android.server.utils.TimingsTraceAndSlog;
import com.android.server.vr.VrManagerInternal;
import com.android.server.wm.ActivityMetricsLaunchObserver;
import com.android.server.wm.ActivityServiceConnectionsHolder;
import com.android.server.wm.ActivityTaskManagerDebugConfig;
import com.android.server.wm.ActivityTaskManagerInternal;
import com.android.server.wm.ActivityTaskManagerService;
import com.android.server.wm.ActivityTaskSupervisor;
import com.android.server.wm.ProtoLogCache;
import com.android.server.wm.WindowManagerInternal;
import com.android.server.wm.WindowManagerService;
import com.android.server.wm.WindowProcessController;
import com.oplus.uifirst.IOplusUIFirstManagerExt;
import dalvik.annotation.optimization.NeverCompile;
import dalvik.system.VMRuntime;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import libcore.util.EmptyArray;
import system.ext.loader.core.ExtLoader;

/* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
public class ActivityManagerService extends IActivityManager.Stub implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback, ActivityManagerGlobalLock {
    static final int ABORT_DUMPHEAP_MSG = 51;
    public static final String ACTION_TRIGGER_IDLE = "com.android.server.ACTION_TRIGGER_IDLE";
    static final int ADD_UID_TO_OBSERVER_MSG = 80;
    static final int BINDER_HEAVYHITTER_AUTOSAMPLER_TIMEOUT_MSG = 72;
    private static final long BINDER_HEAVY_HITTER_AUTO_SAMPLER_DURATION_MS = 300000;
    private static final long BINDER_HEAVY_HITTER_AUTO_SAMPLER_THROTTLE_MS = 3600000;
    private static final int BINDER_PROXY_HIGH_WATERMARK = 6000;
    private static final int BINDER_PROXY_LOW_WATERMARK = 5500;
    static final int BROADCAST_BG_TIMEOUT;
    static final int BROADCAST_FG_TIMEOUT;
    static final int BROADCAST_QUEUE_BG = 1;
    static final int BROADCAST_QUEUE_BG_OFFLOAD = 2;
    static final int BROADCAST_QUEUE_FG = 0;
    static final int BROADCAST_QUEUE_FG_OFFLOAD = 3;
    static final int CHECK_EXCESSIVE_POWER_USE_MSG = 27;
    static final int CLEAR_DNS_CACHE_MSG = 28;
    static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG = 57;
    static final int DISPATCH_BINDING_SERVICE_EVENT = 75;
    static final int DISPATCH_OOM_ADJ_OBSERVER_MSG = 70;
    static final int DISPATCH_PROCESSES_CHANGED_UI_MSG = 31;
    static final int DISPATCH_PROCESS_DIED_UI_MSG = 32;
    static final int DISPATCH_SENDING_BROADCAST_EVENT = 74;
    static final int DROPBOX_DEFAULT_MAX_SIZE = 196608;
    static final long[] DUMP_MEM_BUCKETS;
    static final int[] DUMP_MEM_OOM_ADJ;
    static final String[] DUMP_MEM_OOM_COMPACT_LABEL;
    static final String[] DUMP_MEM_OOM_LABEL;
    private static final long DYNAMIC_RECEIVER_EXPLICIT_EXPORT_REQUIRED = 161145287;
    static final String[] EMPTY_STRING_ARRAY;
    private static final boolean ENABLE_PROC_LOCK = true;
    static final String EXTRA_BUGREPORT_NONCE = "android.intent.extra.BUGREPORT_NONCE";
    static final String EXTRA_BUGREPORT_TYPE = "android.intent.extra.BUGREPORT_TYPE";
    static final String EXTRA_DESCRIPTION = "android.intent.extra.DESCRIPTION";
    static final String EXTRA_TITLE = "android.intent.extra.TITLE";
    static final FgsTempAllowListItem FAKE_TEMP_ALLOW_LIST_ITEM;
    static final int FIRST_BROADCAST_QUEUE_MSG = 200;
    static final int GC_BACKGROUND_PROCESSES_MSG = 5;
    static final int HANDLE_TRUST_STORAGE_UPDATE_MSG = 63;
    static final int IDLE_UIDS_MSG = 58;
    public static final long IMPLICIT_INTENTS_ONLY_MATCH_EXPORTED_COMPONENTS = 229362273;
    private static final int INDEX_DALVIK_PSS = 3;
    private static final int INDEX_DALVIK_RSS = 5;
    private static final int INDEX_DALVIK_SWAP_PSS = 4;
    private static final int INDEX_LAST = 15;
    private static final int INDEX_NATIVE_PSS = 0;
    private static final int INDEX_NATIVE_RSS = 2;
    private static final int INDEX_NATIVE_SWAP_PSS = 1;
    private static final int INDEX_OTHER_PSS = 6;
    private static final int INDEX_OTHER_RSS = 8;
    private static final int INDEX_OTHER_SWAP_PSS = 7;
    private static final int INDEX_TOTAL_MEMTRACK_GL = 14;
    private static final int INDEX_TOTAL_MEMTRACK_GRAPHICS = 13;
    private static final int INDEX_TOTAL_NATIVE_PSS = 12;
    private static final int INDEX_TOTAL_PSS = 9;
    private static final int INDEX_TOTAL_RSS = 11;
    private static final int INDEX_TOTAL_SWAP_PSS = 10;
    private static final String INTENT_BUGREPORT_REQUESTED = "com.android.internal.intent.action.BUGREPORT_REQUESTED";
    private static final String INTENT_REMOTE_BUGREPORT_FINISHED = "com.android.internal.intent.action.REMOTE_BUGREPORT_FINISHED";
    static final int KILL_APPLICATION_MSG = 22;
    static final int KILL_APP_ZYGOTE_DELAY_MS = 5000;
    static final int KILL_APP_ZYGOTE_MSG = 71;
    static final int KSM_SHARED = 0;
    static final int KSM_SHARING = 1;
    static final int KSM_UNSHARED = 2;
    static final int KSM_VOLATILE = 3;
    private static boolean LTW_DISABLE = false;
    private static final int MAX_BUGREPORT_DESCRIPTION_SIZE = 150;
    private static final int MAX_BUGREPORT_TITLE_SIZE = 100;
    private static final int MAX_DUP_SUPPRESSED_STACKS = 5000;
    private static final int MAX_RECEIVERS_ALLOWED_PER_APP = 1000;
    static final int MAX_STATE_DATA_SIZE = 128;
    private static final int MEMINFO_COMPACT_VERSION = 1;
    private static final int MINIMUM_MEMORY_GROWTH_THRESHOLD = 10000;
    public static final int MY_PID;
    static final int NOTIFY_CLEARTEXT_NETWORK_MSG = 49;
    static final int PERSISTENT_MASK = 9;
    static final int POST_DUMP_HEAP_NOTIFICATION_MSG = 50;
    static final int PROC_START_TIMEOUT;
    static final int PROC_START_TIMEOUT_MSG = 20;
    static final int PROC_START_TIMEOUT_WITH_WRAPPER = 1200000;
    static final int PUSH_TEMP_ALLOWLIST_UI_MSG = 68;
    static final int REMOVE_UID_FROM_OBSERVER_MSG = 81;
    static final int REPORT_MEM_USAGE_MSG = 33;
    static final int RESERVED_BYTES_PER_LOGCAT_LINE = 100;
    static final int SERVICE_FOREGROUND_CRASH_MSG = 69;
    static final int SERVICE_FOREGROUND_TIMEOUT_ANR_MSG = 67;
    static final int SERVICE_FOREGROUND_TIMEOUT_MSG = 66;
    static final int SERVICE_SHORT_FGS_ANR_TIMEOUT_MSG = 78;
    static final int SERVICE_SHORT_FGS_PROCSTATE_TIMEOUT_MSG = 77;
    static final int SERVICE_SHORT_FGS_TIMEOUT_MSG = 76;
    static final int SERVICE_TIMEOUT_MSG = 12;
    private static final String SHELL_APP_PACKAGE = "com.android.shell";
    static final int SHOW_ANR_FIX_UI_MSG = 202;
    static final int SHOW_ANR_UI_MSG = 201;
    static final int SHOW_ERROR_UI_MSG = 1;
    static final int SHOW_NOT_RESPONDING_UI_MSG = 2;
    static final int SHOW_STRICT_MODE_VIOLATION_UI_MSG = 26;
    static final int SHUTDOWN_UI_AUTOMATION_CONNECTION_MSG = 56;
    public static final int STOCK_PM_FLAGS = 1024;
    private static final String SYSTEM_PROPERTY_DEVICE_PROVISIONED = "persist.sys.device_provisioned";
    static final String SYSTEM_USER_HOME_NEEDED = "ro.system_user_home_needed";
    static final String TAG = "ActivityManager";
    static final String TAG_MU = "ActivityManager_MU";
    static final String TAG_NETWORK = "ActivityManager_Network";
    static final boolean TRACK_PROCSTATS_ASSOCIATIONS = true;
    static final int UPDATE_CACHED_APP_HIGH_WATERMARK = 79;
    static final int UPDATE_HTTP_PROXY_MSG = 29;
    static final int UPDATE_TIME_PREFERENCE_MSG = 41;
    static final int UPDATE_TIME_ZONE = 13;
    static final int WAIT_FOR_CONTENT_PROVIDER_TIMEOUT_MSG = 73;
    static final int WAIT_FOR_DEBUGGER_UI_MSG = 6;
    private static boolean isScreenOn;
    public static boolean mForceStopKill;
    private static IActivityManagerServiceExt.IStaticExt mStaticExt;
    private static IOplusUIFirstManagerExt mUIFirstManagerExt;

    @GuardedBy({"sActiveProcessInfoSelfLocked"})
    static final SparseArray<ProcessInfo> sActiveProcessInfoSelfLocked;
    static final HostingRecord sNullHostingRecord;
    private static ThreadPriorityBooster sProcThreadPriorityBooster;
    private static String sTheRealBuildSerial;
    private static ThreadPriorityBooster sThreadPriorityBooster;

    @GuardedBy({"mActiveCameraUids"})
    final IntArray mActiveCameraUids;

    @CompositeRWLock({"this", "mProcLock"})
    final ArrayList<ActiveInstrumentation> mActiveInstrumentation;
    private final ActivityMetricsLaunchObserver mActivityLaunchObserver;
    public IActivityManagerServiceExt mActivityManagerServiceExt;

    @VisibleForTesting
    public ActivityTaskManagerService mActivityTaskManager;

    @GuardedBy({"this"})
    private ArrayMap<String, PackageAssociationInfo> mAllowedAssociations;

    @GuardedBy({"mAlreadyLoggedViolatedStacks"})
    private final HashSet<Integer> mAlreadyLoggedViolatedStacks;

    @GuardedBy({"this"})
    boolean mAlwaysFinishActivities;
    private ActivityManagerServiceWrapper mAmsWrapper;
    final AnrHelper mAnrHelper;
    ArrayMap<String, IBinder> mAppBindArgs;
    final AppErrors mAppErrors;
    private AppOpsManager mAppOpsManager;
    final AppOpsService mAppOpsService;
    public final AppProfiler mAppProfiler;
    final AppRestrictionController mAppRestrictionController;

    @GuardedBy({"this"})
    final SparseArray<ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>>> mAssociations;

    @VisibleForTesting
    public ActivityTaskManagerInternal mAtmInternal;

    @CompositeRWLock({"this", "mProcLock"})
    private int[] mBackgroundAppIdAllowlist;

    @GuardedBy({"this"})
    private ArraySet<String> mBackgroundLaunchBroadcasts;

    @GuardedBy({"this"})
    final SparseArray<BackupRecord> mBackupTargets;
    public IBatteryStatsImplExt mBatteryStatsImplExt;
    public final BatteryStatsService mBatteryStatsService;
    final CopyOnWriteArrayList<ActivityManagerInternal.BindServiceEventListener> mBindServiceEventListeners;
    private volatile boolean mBinderTransactionTrackingEnabled;

    @GuardedBy({"this"})
    boolean mBootAnimationComplete;
    int mBootPhase;
    volatile boolean mBooted;
    volatile boolean mBooting;
    final CopyOnWriteArrayList<ActivityManagerInternal.BroadcastEventListener> mBroadcastEventListeners;
    final BroadcastQueue[] mBroadcastQueues;

    @GuardedBy({"this"})
    boolean mCallFinishBooting;
    public int mCallingPid;
    private final Map<Integer, Set<Integer>> mCompanionAppUidsMap;

    @GuardedBy({"this"})
    final ComponentAliasResolver mComponentAliasResolver;
    ActivityManagerConstants mConstants;
    volatile ContentCaptureManagerInternal mContentCaptureService;
    final Context mContext;
    CoreSettingsObserver mCoreSettingsObserver;
    final ContentProviderHelper mCpHelper;

    @GuardedBy({"this"})
    BroadcastStats mCurBroadcastStats;

    @GuardedBy({"mOomAdjObserverLock"})
    OomAdjObserver mCurOomAdjObserver;

    @GuardedBy({"mOomAdjObserverLock"})
    int mCurOomAdjUid;
    private final Object mCurResumedAppLock;

    @GuardedBy({"mCurResumedAppLock"})
    private String mCurResumedPackage;

    @GuardedBy({"mCurResumedAppLock"})
    private int mCurResumedUid;

    @GuardedBy({"this"})
    private String mDebugApp;

    @GuardedBy({"this"})
    private boolean mDebugTransient;

    @GuardedBy({"mDeliveryGroupPolicyIgnoredActions"})
    private final ArraySet<String> mDeliveryGroupPolicyIgnoredActions;
    volatile boolean mDeterministicUidIdle;

    @CompositeRWLock({"this", "mProcLock"})
    int[] mDeviceIdleAllowlist;

    @CompositeRWLock({"this", "mProcLock"})
    int[] mDeviceIdleExceptIdleAllowlist;

    @CompositeRWLock({"this", "mProcLock"})
    int[] mDeviceIdleTempAllowlist;
    private volatile int mDeviceOwnerUid;
    private final DropboxRateLimiter mDropboxRateLimiter;
    final boolean mEnableModernQueue;
    final boolean mEnableOffloadQueue;
    final int mFactoryTest;

    @CompositeRWLock({"this", "mProcLock"})
    final FgsTempAllowList<FgsTempAllowListItem> mFgsStartTempAllowList;
    private final FgsTempAllowList<String> mFgsWhileInUseTempAllowList;

    @CompositeRWLock({"this", "mProcLock"})
    private boolean mForceBackgroundCheck;

    @GuardedBy({"this"})
    final ProcessMap<ArrayList<ProcessRecord>> mForegroundPackages;

    @GuardedBy({"this"})
    final ArrayList<ActivityManagerInternal.ForegroundServiceStateListener> mForegroundServiceStateListeners;
    private final GetBackgroundStartPrivilegesFunctor mGetBackgroundStartPrivilegesFunctor;
    final ActivityManagerGlobalLock mGlobalLock;
    final MainHandler mHandler;

    @VisibleForTesting
    public final ServiceThread mHandlerThread;
    final HiddenApiSettings mHiddenApiBlacklist;

    @GuardedBy({"this"})
    final SparseArray<ImportanceToken> mImportantProcesses;
    final Injector mInjector;
    private Installer mInstaller;
    final InstrumentationReporter mInstrumentationReporter;
    public final IntentFirewall mIntentFirewall;

    @VisibleForTesting
    public final ActivityManagerInternal mInternal;
    ArrayMap<String, IBinder> mIsolatedAppBindArgs;

    @GuardedBy({"mProcLock"})
    private long mLastBinderHeavyHitterAutoSamplerStart;

    @GuardedBy({"this"})
    BroadcastStats mLastBroadcastStats;

    @GuardedBy({"mProcLock"})
    long mLastIdleTime;

    @GuardedBy({"mProcLock"})
    long mLastPowerCheckUptime;

    @GuardedBy({"mProcLock"})
    private ParcelFileDescriptor[] mLifeMonitorFds;
    DeviceIdleInternal mLocalDeviceIdleController;
    PowerManagerInternal mLocalPowerManager;

    @GuardedBy({"mMediaProjectionTokenMap"})
    private final SparseArray<ArraySet<IBinder>> mMediaProjectionTokenMap;

    @GuardedBy({"this"})
    String mNativeDebuggingApp;
    private volatile IUidObserver mNetworkPolicyUidObserver;
    volatile boolean mOnBattery;
    final Object mOomAdjObserverLock;
    public OomAdjProfiler mOomAdjProfiler;
    OomAdjuster mOomAdjuster;

    @GuardedBy({"this"})
    private String mOrigDebugApp;

    @GuardedBy({"this"})
    private boolean mOrigWaitForDebugger;
    PackageManagerInternal mPackageManagerInt;
    final PackageWatchdog mPackageWatchdog;

    @VisibleForTesting
    public final PendingIntentController mPendingIntentController;
    private final PendingStartActivityUids mPendingStartActivityUids;

    @CompositeRWLock({"this", "mProcLock"})
    final PendingTempAllowlists mPendingTempAllowlist;
    PermissionManagerServiceInternal mPermissionManagerInt;

    @GuardedBy({"this"})
    final ArrayList<ProcessRecord> mPersistentStartingProcesses;
    final PhantomProcessList mPhantomProcessList;
    final PidMap mPidsSelfLocked;
    private final PlatformCompat mPlatformCompat;
    private final PriorityDump.PriorityDumper mPriorityDumper;
    final ActivityManagerGlobalLock mProcLock;
    final ProcessList.ProcStartHandler mProcStartHandler;
    final ServiceThread mProcStartHandlerThread;
    public final ProcessList mProcessList;
    final ProcessStatsService mProcessStats;

    @GuardedBy({"this"})
    final ArrayList<ProcessRecord> mProcessesOnHold;
    volatile boolean mProcessesReady;
    private ArraySet<Integer> mProfileOwnerUids;
    final IntentResolver<BroadcastFilter, BroadcastFilter> mReceiverResolver;

    @GuardedBy({"this"})
    final HashMap<IBinder, ReceiverList> mRegisteredReceivers;

    @GuardedBy({"this"})
    boolean mSafeMode;
    final ActiveServices mServices;
    private IActivityManagerServiceSocExt mSocExt;

    @GuardedBy({"this"})
    final SparseArray<ArrayMap<String, ArrayList<StickyBroadcast>>> mStickyBroadcasts;

    @GuardedBy({"this"})
    private final SparseArray<IUnsafeIntentStrictModeCallback> mStrictModeCallbacks;

    @GuardedBy({"this"})
    private boolean mSuspendUponWait;
    volatile boolean mSystemReady;
    SystemServiceManager mSystemServiceManager;
    final ActivityThread mSystemThread;
    ActivityTaskSupervisor mTaskSupervisor;
    private TestUtilityService mTestUtilityService;
    private ITheiaManagerExt mTheiaManagerExt;
    TraceErrorLogger mTraceErrorLogger;

    @GuardedBy({"mProcLock"})
    private String mTrackAllocationApp;
    boolean mTrackingAssociations;
    UriGrantsManagerInternal mUgmInternal;
    final Context mUiContext;
    public final Handler mUiHandler;

    @GuardedBy({"mUidFrozenStateChangedCallbackList"})
    private final RemoteCallbackList<IUidFrozenStateChangedCallback> mUidFrozenStateChangedCallbackList;

    @GuardedBy({"mUidNetworkBlockedReasons"})
    private final SparseIntArray mUidNetworkBlockedReasons;
    final UidObserverController mUidObserverController;
    volatile UsageStatsManagerInternal mUsageStatsService;
    final boolean mUseFifoUiScheduling;
    final UserController mUserController;
    private volatile boolean mUserIsMonkey;
    volatile ActivityManagerInternal.VoiceInteractionManagerProvider mVoiceInteractionManagerProvider;

    @GuardedBy({"this"})
    private boolean mWaitForDebugger;
    AtomicInteger mWakefulness;

    @VisibleForTesting
    public WindowManagerService mWindowManager;
    WindowManagerInternal mWmInternal;
    static final String TAG_BACKUP = "ActivityManager" + ActivityManagerDebugConfig.POSTFIX_BACKUP;
    private static final String TAG_BROADCAST = "ActivityManager" + ActivityManagerDebugConfig.POSTFIX_BROADCAST;
    private static final String TAG_CLEANUP = "ActivityManager" + ActivityManagerDebugConfig.POSTFIX_CLEANUP;
    private static final String TAG_CONFIGURATION = "ActivityManager" + ActivityTaskManagerDebugConfig.POSTFIX_CONFIGURATION;
    private static final String TAG_LOCKTASK = "ActivityManager" + ActivityTaskManagerDebugConfig.POSTFIX_LOCKTASK;
    static final String TAG_LRU = "ActivityManager" + ActivityManagerDebugConfig.POSTFIX_LRU;
    static final String TAG_OOM_ADJ = "ActivityManager" + ActivityManagerDebugConfig.POSTFIX_OOM_ADJ;
    private static final String TAG_POWER = "ActivityManager" + ActivityManagerDebugConfig.POSTFIX_POWER;
    static final String TAG_PROCESSES = "ActivityManager" + ActivityManagerDebugConfig.POSTFIX_PROCESSES;
    private static final String TAG_SERVICE = "ActivityManager" + ActivityManagerDebugConfig.POSTFIX_SERVICE;
    private static final String TAG_SWITCH = "ActivityManager" + ActivityTaskManagerDebugConfig.POSTFIX_SWITCH;
    static final String TAG_UID_OBSERVERS = "ActivityManager" + ActivityManagerDebugConfig.POSTFIX_UID_OBSERVERS;

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public interface OomAdjObserver {
        void onOomAdjMessage(String str);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static final class ProcessChangeItem {
        static final int CHANGE_ACTIVITIES = 1;
        static final int CHANGE_FOREGROUND_SERVICES = 2;
        int changes;
        boolean foregroundActivities;
        int foregroundServiceTypes;
        int pid;
        int processState;
        int uid;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static boolean doesReasonCodeAllowSchedulingUserInitiatedJobs(int i) {
        if (i == 50 || i == 51 || i == 53 || i == 60 || i == 62 || i == 67 || i == 57 || i == 58) {
            return true;
        }
        switch (i) {
            case 10:
            case 11:
            case 12:
            case 13:
                return true;
            default:
                return false;
        }
    }

    private boolean isOnFgOffloadQueue(int i) {
        return (i & 2048) != 0;
    }

    void maybeTriggerWatchdog() {
    }

    static {
        int i = Build.HW_TIMEOUT_MULTIPLIER;
        PROC_START_TIMEOUT = i * 10000;
        BROADCAST_FG_TIMEOUT = i * 10000;
        BROADCAST_BG_TIMEOUT = i * DataStallUtils.DEFAULT_DATA_STALL_MIN_EVALUATE_TIME_MS;
        MY_PID = Process.myPid();
        EMPTY_STRING_ARRAY = new String[0];
        mForceStopKill = false;
        isScreenOn = false;
        LTW_DISABLE = SystemProperties.getBoolean("persist.sys.ltw.disable", false);
        sThreadPriorityBooster = new ThreadPriorityBooster(-2, 7);
        sProcThreadPriorityBooster = new ThreadPriorityBooster(-2, 6);
        sActiveProcessInfoSelfLocked = new SparseArray<>();
        FAKE_TEMP_ALLOW_LIST_ITEM = new FgsTempAllowListItem(Long.MAX_VALUE, 300, "", -1);
        sTheRealBuildSerial = "unknown";
        sNullHostingRecord = new HostingRecord("");
        DUMP_MEM_BUCKETS = new long[]{5120, 7168, 10240, 15360, 20480, 30720, 40960, 81920, 122880, 163840, 204800, 256000, 307200, 358400, 409600, 512000, 614400, 819200, 1048576, 2097152, 5242880, 10485760, 20971520};
        DUMP_MEM_OOM_ADJ = new int[]{-1000, ProcessList.SYSTEM_ADJ, ProcessList.PERSISTENT_PROC_ADJ, ProcessList.PERSISTENT_SERVICE_ADJ, 0, 100, 200, 250, ProcessList.PERCEPTIBLE_MEDIUM_APP_ADJ, 300, 400, 500, 600, ProcessList.PREVIOUS_APP_ADJ, ProcessList.SERVICE_B_ADJ, ProcessList.CACHED_APP_MIN_ADJ};
        DUMP_MEM_OOM_LABEL = new String[]{"Native", "System", "Persistent", "Persistent Service", "Foreground", "Visible", "Perceptible", "Perceptible Low", "Perceptible Medium", "Backup", "Heavy Weight", "A Services", "Home", "Previous", "B Services", "Cached"};
        DUMP_MEM_OOM_COMPACT_LABEL = new String[]{"native", "sys", "pers", "persvc", "fore", "vis", "percept", "perceptl", "perceptm", HostingRecord.HOSTING_TYPE_BACKUP, "heavy", "servicea", "home", "prev", "serviceb", "cached"};
        mUIFirstManagerExt = (IOplusUIFirstManagerExt) ExtLoader.type(IOplusUIFirstManagerExt.class).create();
        mStaticExt = (IActivityManagerServiceExt.IStaticExt) ExtLoader.type(IActivityManagerServiceExt.IStaticExt.class).create();
    }

    BroadcastQueue broadcastQueueForIntent(Intent intent) {
        return broadcastQueueForFlags(intent.getFlags(), intent, -1, false);
    }

    BroadcastQueue broadcastQueueForIntent(int i, Intent intent, boolean z) {
        return broadcastQueueForFlags(intent.getFlags(), intent, i, z);
    }

    BroadcastQueue broadcastQueueForFlags(int i) {
        return broadcastQueueForFlags(i, null, -1, false);
    }

    BroadcastQueue broadcastQueueForFlags(int i, Object obj) {
        if (this.mEnableModernQueue) {
            return this.mBroadcastQueues[0];
        }
        if (isOnFgOffloadQueue(i)) {
            if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND) {
                Slog.i(TAG_BROADCAST, "Broadcast intent " + obj + " on foreground offload queue");
            }
            return this.mBroadcastQueues[3];
        }
        if (isOnBgOffloadQueue(i)) {
            if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND) {
                Slog.i(TAG_BROADCAST, "Broadcast intent " + obj + " on background offload queue");
            }
            return this.mBroadcastQueues[2];
        }
        boolean z = (i & AudioFormat.EVRC) != 0;
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND) {
            String str = TAG_BROADCAST;
            StringBuilder sb = new StringBuilder();
            sb.append("Broadcast intent ");
            sb.append(obj);
            sb.append(" on ");
            sb.append(z ? "foreground" : "background");
            sb.append(" queue");
            Slog.i(str, sb.toString());
        }
        if (z) {
            return this.mBroadcastQueues[0];
        }
        return this.mBroadcastQueues[1];
    }

    BroadcastQueue broadcastQueueForFlags(int i, Object obj, int i2, boolean z) {
        BroadcastQueue createOptimizeQueue;
        if (this.mEnableModernQueue) {
            return this.mBroadcastQueues[0];
        }
        if (isOnFgOffloadQueue(i)) {
            if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND) {
                Slog.i(TAG_BROADCAST, "Broadcast intent " + obj + " on foreground offload queue");
            }
            return this.mBroadcastQueues[3];
        }
        if (isOnBgOffloadQueue(i)) {
            if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND) {
                Slog.i(TAG_BROADCAST, "Broadcast intent " + obj + " on background offload queue");
            }
            return this.mBroadcastQueues[2];
        }
        BroadcastQueue queueFromFlag = this.mActivityManagerServiceExt.getQueueFromFlag(i);
        if (queueFromFlag != null) {
            return queueFromFlag;
        }
        if (obj != null && (createOptimizeQueue = this.mActivityManagerServiceExt.createOptimizeQueue((Intent) obj, z, i2)) != null) {
            return createOptimizeQueue;
        }
        boolean z2 = (i & AudioFormat.EVRC) != 0;
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND) {
            String str = TAG_BROADCAST;
            StringBuilder sb = new StringBuilder();
            sb.append("Broadcast intent ");
            sb.append(obj);
            sb.append(" on ");
            sb.append(z2 ? "foreground" : "background");
            sb.append(" queue");
            Slog.i(str, sb.toString());
        }
        if (z2) {
            return this.mBroadcastQueues[0];
        }
        return this.mBroadcastQueues[1];
    }

    public static void boostPriorityForLockedSection() {
        sThreadPriorityBooster.boost();
    }

    public static void resetPriorityAfterLockedSection() {
        sThreadPriorityBooster.reset();
    }

    public static void boostPriorityForProcLockedSection() {
        sProcThreadPriorityBooster.boost();
    }

    public static void resetPriorityAfterProcLockedSection() {
        sProcThreadPriorityBooster.reset();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public final class PackageAssociationInfo {
        private final ArraySet<String> mAllowedPackageAssociations;
        private boolean mIsDebuggable;
        private final String mSourcePackage;

        PackageAssociationInfo(String str, ArraySet<String> arraySet, boolean z) {
            this.mSourcePackage = str;
            this.mAllowedPackageAssociations = arraySet;
            this.mIsDebuggable = z;
        }

        boolean isPackageAssociationAllowed(String str) {
            return this.mIsDebuggable || this.mAllowedPackageAssociations.contains(str);
        }

        boolean isDebuggable() {
            return this.mIsDebuggable;
        }

        void setDebuggable(boolean z) {
            this.mIsDebuggable = z;
        }

        ArraySet<String> getAllowedPackageAssociations() {
            return this.mAllowedPackageAssociations;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static final class PidMap {
        private final SparseArray<ProcessRecord> mPidMap = new SparseArray<>();

        PidMap() {
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public ProcessRecord get(int i) {
            return this.mPidMap.get(i);
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public int size() {
            return this.mPidMap.size();
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public ProcessRecord valueAt(int i) {
            return this.mPidMap.valueAt(i);
        }

        int keyAt(int i) {
            return this.mPidMap.keyAt(i);
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public int indexOfKey(int i) {
            return this.mPidMap.indexOfKey(i);
        }

        void doAddInternal(int i, ProcessRecord processRecord) {
            if (ActivityTaskManagerDebugConfig.DEBUG_AMS) {
                Slog.i("ActivityManager", "mPidMap put " + processRecord);
            }
            this.mPidMap.put(i, processRecord);
        }

        boolean doRemoveInternal(int i, ProcessRecord processRecord) {
            ProcessRecord processRecord2 = this.mPidMap.get(i);
            if (processRecord2 == null || processRecord2.getStartSeq() != processRecord.getStartSeq()) {
                return false;
            }
            if (ActivityTaskManagerDebugConfig.DEBUG_AMS) {
                Slog.i("ActivityManager", "mPidMap remove " + processRecord);
            }
            ActivityManagerService.mUIFirstManagerExt.handleProcessStop(processRecord.info.packageName, processRecord.uid, i);
            ActivityManagerService.mStaticExt.handleProcessStop(processRecord, i);
            this.mPidMap.remove(i);
            return true;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void addPidLocked(ProcessRecord processRecord) {
        int pid = processRecord.getPid();
        synchronized (this.mPidsSelfLocked) {
            this.mPidsSelfLocked.doAddInternal(pid, processRecord);
        }
        SparseArray<ProcessInfo> sparseArray = sActiveProcessInfoSelfLocked;
        synchronized (sparseArray) {
            ProcessInfo processInfo = processRecord.processInfo;
            if (processInfo != null) {
                sparseArray.put(pid, processInfo);
            } else {
                sparseArray.remove(pid);
            }
        }
        this.mSocExt.addPidLocked(processRecord);
        this.mAtmInternal.onProcessMapped(pid, processRecord.getWindowProcessController());
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public boolean removePidLocked(int i, ProcessRecord processRecord) {
        boolean doRemoveInternal;
        synchronized (this.mPidsSelfLocked) {
            doRemoveInternal = this.mPidsSelfLocked.doRemoveInternal(i, processRecord);
        }
        if (doRemoveInternal) {
            SparseArray<ProcessInfo> sparseArray = sActiveProcessInfoSelfLocked;
            synchronized (sparseArray) {
                sparseArray.remove(i);
            }
            this.mSocExt.removePidLocked(processRecord);
            this.mAtmInternal.onProcessUnMapped(i);
        }
        return doRemoveInternal;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public abstract class ImportanceToken implements IBinder.DeathRecipient {
        final int pid;
        final String reason;
        final IBinder token;

        ImportanceToken(int i, IBinder iBinder, String str) {
            this.pid = i;
            this.token = iBinder;
            this.reason = str;
        }

        public String toString() {
            return "ImportanceToken { " + Integer.toHexString(System.identityHashCode(this)) + " " + this.reason + " " + this.pid + " " + this.token + " }";
        }

        void dumpDebug(ProtoOutputStream protoOutputStream, long j) {
            long start = protoOutputStream.start(j);
            protoOutputStream.write(1120986464257L, this.pid);
            IBinder iBinder = this.token;
            if (iBinder != null) {
                protoOutputStream.write(1138166333442L, iBinder.toString());
            }
            protoOutputStream.write(1138166333443L, this.reason);
            protoOutputStream.end(start);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @VisibleForTesting
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static final class StickyBroadcast {
        public boolean deferUntilActive;
        public Intent intent;
        public int originalCallingAppProcessState;
        public int originalCallingUid;

        StickyBroadcast() {
        }

        public static StickyBroadcast create(Intent intent, boolean z, int i, int i2) {
            StickyBroadcast stickyBroadcast = new StickyBroadcast();
            stickyBroadcast.intent = intent;
            stickyBroadcast.deferUntilActive = z;
            stickyBroadcast.originalCallingUid = i;
            stickyBroadcast.originalCallingAppProcessState = i2;
            return stickyBroadcast;
        }

        public String toString() {
            return "{intent=" + this.intent + ", defer=" + this.deferUntilActive + ", originalCallingUid=" + this.originalCallingUid + ", originalCallingAppProcessState=" + this.originalCallingAppProcessState + "}";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static final class Association {
        int mCount;
        long mLastStateUptime;
        int mNesting;
        final String mSourceProcess;
        final int mSourceUid;
        long mStartTime;
        final ComponentName mTargetComponent;
        final String mTargetProcess;
        final int mTargetUid;
        long mTime;
        int mLastState = 21;
        long[] mStateTimes = new long[21];

        Association(int i, String str, int i2, ComponentName componentName, String str2) {
            this.mSourceUid = i;
            this.mSourceProcess = str;
            this.mTargetUid = i2;
            this.mTargetComponent = componentName;
            this.mTargetProcess = str2;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static final class PendingTempAllowlist {
        final int callingUid;
        final long duration;
        final int reasonCode;
        final String tag;
        final int targetUid;
        final int type;

        PendingTempAllowlist(int i, long j, int i2, String str, int i3, int i4) {
            this.targetUid = i;
            this.duration = j;
            this.tag = str;
            this.type = i3;
            this.reasonCode = i2;
            this.callingUid = i4;
        }

        void dumpDebug(ProtoOutputStream protoOutputStream, long j) {
            long start = protoOutputStream.start(j);
            protoOutputStream.write(1120986464257L, this.targetUid);
            protoOutputStream.write(1112396529666L, this.duration);
            protoOutputStream.write(1138166333443L, this.tag);
            protoOutputStream.write(1120986464260L, this.type);
            protoOutputStream.write(1120986464261L, this.reasonCode);
            protoOutputStream.write(1120986464262L, this.callingUid);
            protoOutputStream.end(start);
        }
    }

    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static final class FgsTempAllowListItem {
        final int mCallingUid;
        final long mDuration;
        final String mReason;
        final int mReasonCode;

        FgsTempAllowListItem(long j, int i, String str, int i2) {
            this.mDuration = j;
            this.mReasonCode = i;
            this.mReason = str;
            this.mCallingUid = i2;
        }

        void dump(PrintWriter printWriter) {
            printWriter.print(" duration=" + this.mDuration + " callingUid=" + UserHandle.formatUid(this.mCallingUid) + " reasonCode=" + PowerExemptionManager.reasonCodeToString(this.mReasonCode) + " reason=" + this.mReason);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public final class AppDeathRecipient implements IBinder.DeathRecipient {
        final ProcessRecord mApp;
        final IApplicationThread mAppThread;
        final int mPid;

        AppDeathRecipient(ProcessRecord processRecord, int i, IApplicationThread iApplicationThread) {
            if (ActivityManagerDebugConfig.DEBUG_ALL) {
                Slog.v("ActivityManager", "New death recipient " + this + " for thread " + iApplicationThread.asBinder());
            }
            this.mApp = processRecord;
            this.mPid = i;
            this.mAppThread = iApplicationThread;
        }

        @Override // android.os.IBinder.DeathRecipient
        public void binderDied() {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            activityManagerService.mActivityManagerServiceExt.onDeathRecipient(activityManagerService, this.mApp, this.mPid, this.mAppThread);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public final class UiHandler extends Handler {
        public UiHandler() {
            super(UiThread.get().getLooper(), null, true);
        }

        @Override // android.os.Handler
        public void handleMessage(Message message) {
            int i = message.what;
            if (i == 1) {
                ActivityManagerService.this.mAppErrors.handleShowAppErrorUi(message);
                ActivityManagerService.this.ensureBootCompleted();
                return;
            }
            if (i == 2) {
                ActivityManagerService.this.mAppErrors.handleShowAnrUi(message);
                ActivityManagerService.this.ensureBootCompleted();
                return;
            }
            if (i == 6) {
                ActivityManagerGlobalLock activityManagerGlobalLock = ActivityManagerService.this.mProcLock;
                ActivityManagerService.boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        ProcessRecord processRecord = (ProcessRecord) message.obj;
                        if (message.arg1 != 0) {
                            if (!processRecord.hasWaitedForDebugger()) {
                                processRecord.mErrorState.getDialogController().showDebugWaitingDialogs();
                                processRecord.setWaitedForDebugger(true);
                            }
                        } else {
                            processRecord.mErrorState.getDialogController().clearWaitingDialog();
                        }
                    } finally {
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                    }
                }
                ActivityManagerService.resetPriorityAfterProcLockedSection();
                return;
            }
            if (i == 26) {
                HashMap hashMap = (HashMap) message.obj;
                ActivityManagerGlobalLock activityManagerGlobalLock2 = ActivityManagerService.this.mProcLock;
                ActivityManagerService.boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock2) {
                    try {
                        ProcessRecord processRecord2 = (ProcessRecord) hashMap.get("app");
                        if (processRecord2 == null) {
                            Slog.e("ActivityManager", "App not found when showing strict mode dialog.");
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                            return;
                        }
                        if (processRecord2.mErrorState.getDialogController().hasViolationDialogs()) {
                            Slog.e("ActivityManager", "App already has strict mode dialog: " + processRecord2);
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                            return;
                        }
                        AppErrorResult appErrorResult = (AppErrorResult) hashMap.get("result");
                        if (ActivityManagerService.this.mAtmInternal.showStrictModeViolationDialog()) {
                            processRecord2.mErrorState.getDialogController().showViolationDialogs(appErrorResult);
                        } else {
                            appErrorResult.set(0);
                        }
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                        ActivityManagerService.this.ensureBootCompleted();
                        return;
                    } finally {
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                    }
                }
            }
            if (i == 68) {
                OplusIoThread.getHandler().post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$UiHandler$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ActivityManagerService.UiHandler.this.lambda$handleMessage$0();
                    }
                });
                return;
            }
            if (i == 70) {
                ActivityManagerService.this.dispatchOomAdjObserver((String) message.obj);
                return;
            }
            if (i == 31) {
                ActivityManagerService.this.mProcessList.dispatchProcessesChanged();
                return;
            }
            if (i == 32) {
                ActivityManagerService.this.mProcessList.dispatchProcessDied(message.arg1, message.arg2);
                return;
            }
            if (i == 80) {
                ActivityManagerService.this.mUidObserverController.addUidToObserverImpl((IBinder) message.obj, message.arg1);
                return;
            }
            if (i == 81) {
                ActivityManagerService.this.mUidObserverController.removeUidFromObserverImpl((IBinder) message.obj, message.arg1);
                return;
            }
            if (i == 201) {
                ActivityManagerGlobalLock activityManagerGlobalLock3 = ActivityManagerService.this.mProcLock;
                ActivityManagerService.boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock3) {
                    try {
                        ((ProcessRecord) message.obj).mErrorState.getDialogController().showAnrErrorDialogs(message.arg1);
                    } finally {
                    }
                }
                ActivityManagerService.resetPriorityAfterProcLockedSection();
                return;
            }
            if (i == 202) {
                ActivityManagerGlobalLock activityManagerGlobalLock4 = ActivityManagerService.this.mProcLock;
                ActivityManagerService.boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock4) {
                    try {
                        ((ProcessRecord) message.obj).mErrorState.getDialogController().showAnrProgressDialogs();
                    } finally {
                    }
                }
                ActivityManagerService.resetPriorityAfterProcLockedSection();
                return;
            }
            ActivityManagerService.this.mActivityManagerServiceExt.handleOplusMessage(message, 2);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$handleMessage$0() {
            ActivityManagerService.this.pushTempAllowlist();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public final class MainHandler extends Handler {
        public MainHandler(Looper looper) {
            super(looper, null, true);
        }

        @Override // android.os.Handler
        public void handleMessage(final Message message) {
            int i = message.what;
            if (i == 5) {
                ActivityManagerService activityManagerService = ActivityManagerService.this;
                ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        ActivityManagerService.this.mAppProfiler.performAppGcsIfAppropriateLocked();
                    } finally {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
                return;
            }
            if (i == 20) {
                if (ActivityManagerService.this.mSocExt.delayMessage(ActivityManagerService.this.mHandler, message, 20, ActivityManagerService.PROC_START_TIMEOUT)) {
                    return;
                }
                ProcessRecord processRecord = (ProcessRecord) message.obj;
                ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService2) {
                    try {
                        ActivityManagerService.this.handleProcessStartOrKillTimeoutLocked(processRecord, false);
                    } finally {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
                return;
            }
            if (i == 22) {
                ActivityManagerService activityManagerService3 = ActivityManagerService.this;
                ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService3) {
                    try {
                        int i2 = message.arg1;
                        int i3 = message.arg2;
                        SomeArgs someArgs = (SomeArgs) message.obj;
                        String str = (String) someArgs.arg1;
                        String str2 = (String) someArgs.arg2;
                        int intValue = ((Integer) someArgs.arg3).intValue();
                        someArgs.recycle();
                        ActivityManagerService.this.mActivityManagerServiceExt.removeInstallPackageKillObjByPackage(str);
                        ActivityManagerService.this.forceStopPackageLocked(str, i2, false, false, true, false, false, i3, str2, intValue);
                    } finally {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
                return;
            }
            if (i == 33) {
                final ArrayList arrayList = (ArrayList) message.obj;
                new Thread() { // from class: com.android.server.am.ActivityManagerService.MainHandler.1
                    @Override // java.lang.Thread, java.lang.Runnable
                    public void run() {
                        ActivityManagerService.this.mAppProfiler.reportMemUsage(arrayList);
                    }
                }.start();
                return;
            }
            if (i == 41) {
                ActivityManagerGlobalLock activityManagerGlobalLock = ActivityManagerService.this.mProcLock;
                ActivityManagerService.boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        ActivityManagerService.this.mProcessList.updateAllTimePrefsLOSP(message.arg1);
                    } finally {
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                    }
                }
                ActivityManagerService.resetPriorityAfterProcLockedSection();
                return;
            }
            if (i == 63) {
                ActivityManagerGlobalLock activityManagerGlobalLock2 = ActivityManagerService.this.mProcLock;
                ActivityManagerService.boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock2) {
                    try {
                        ActivityManagerService.this.mProcessList.handleAllTrustStorageUpdateLOSP();
                    } finally {
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                    }
                }
                ActivityManagerService.resetPriorityAfterProcLockedSection();
                return;
            }
            if (i == 69) {
                SomeArgs someArgs2 = (SomeArgs) message.obj;
                ActivityManagerService.this.mServices.serviceForegroundCrash((ProcessRecord) someArgs2.arg1, (String) someArgs2.arg2, (ComponentName) someArgs2.arg3);
                someArgs2.recycle();
                return;
            }
            if (i == 12) {
                IActivityManagerServiceSocExt iActivityManagerServiceSocExt = ActivityManagerService.this.mSocExt;
                ActivityManagerService activityManagerService4 = ActivityManagerService.this;
                if (iActivityManagerServiceSocExt.delayMessage(activityManagerService4.mHandler, message, 12, (int) activityManagerService4.mConstants.SERVICE_TIMEOUT) || ActivityManagerService.this.mActivityManagerServiceExt.handleServiceTimeOut(message)) {
                    return;
                }
                ActivityManagerService.this.mServices.serviceTimeout((ProcessRecord) message.obj);
                return;
            }
            if (i == 13) {
                ActivityManagerGlobalLock activityManagerGlobalLock3 = ActivityManagerService.this.mProcLock;
                ActivityManagerService.boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock3) {
                    try {
                        ActivityManagerService.this.mProcessList.forEachLruProcessesLOSP(false, new Consumer() { // from class: com.android.server.am.ActivityManagerService$MainHandler$$ExternalSyntheticLambda0
                            @Override // java.util.function.Consumer
                            public final void accept(Object obj) {
                                ActivityManagerService.MainHandler.lambda$handleMessage$0((ProcessRecord) obj);
                            }
                        });
                    } finally {
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                    }
                }
                ActivityManagerService.resetPriorityAfterProcLockedSection();
                return;
            }
            if (i == 66) {
                ActivityManagerService.this.mServices.serviceForegroundTimeout((ServiceRecord) message.obj);
                return;
            }
            if (i == 67) {
                SomeArgs someArgs3 = (SomeArgs) message.obj;
                ActivityManagerService.this.mServices.serviceForegroundTimeoutANR((ProcessRecord) someArgs3.arg1, (TimeoutRecord) someArgs3.arg2);
                someArgs3.recycle();
                return;
            }
            switch (i) {
                case 27:
                    ActivityManagerService.this.checkExcessivePowerUsage();
                    removeMessages(27);
                    sendMessageDelayed(obtainMessage(27), ActivityManagerService.this.mConstants.POWER_CHECK_INTERVAL);
                    return;
                case 28:
                    ActivityManagerGlobalLock activityManagerGlobalLock4 = ActivityManagerService.this.mProcLock;
                    ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock4) {
                        try {
                            ActivityManagerService.this.mProcessList.clearAllDnsCacheLOSP();
                        } finally {
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return;
                case 29:
                    ActivityManagerService.this.mProcessList.setAllHttpProxy();
                    return;
                default:
                    switch (i) {
                        case 49:
                            int i4 = message.arg1;
                            byte[] bArr = (byte[]) message.obj;
                            ActivityManagerGlobalLock activityManagerGlobalLock5 = ActivityManagerService.this.mProcLock;
                            ActivityManagerService.boostPriorityForProcLockedSection();
                            synchronized (activityManagerGlobalLock5) {
                                try {
                                    synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                                        for (int i5 = 0; i5 < ActivityManagerService.this.mPidsSelfLocked.size(); i5++) {
                                            ProcessRecord valueAt = ActivityManagerService.this.mPidsSelfLocked.valueAt(i5);
                                            IApplicationThread thread = valueAt.getThread();
                                            if (valueAt.uid == i4 && thread != null) {
                                                try {
                                                    thread.notifyCleartextNetwork(bArr);
                                                } catch (RemoteException unused) {
                                                }
                                            }
                                        }
                                    }
                                } finally {
                                }
                            }
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                            return;
                        case 50:
                            ActivityManagerService.this.mAppProfiler.handlePostDumpHeapNotification();
                            return;
                        case 51:
                            ActivityManagerService.this.mAppProfiler.handleAbortDumpHeap((String) message.obj);
                            return;
                        default:
                            switch (i) {
                                case 56:
                                    try {
                                        ((IUiAutomationConnection) message.obj).shutdown();
                                    } catch (RemoteException unused2) {
                                        Slog.w("ActivityManager", "Error shutting down UiAutomationConnection");
                                    }
                                    ActivityManagerService.this.mUserIsMonkey = false;
                                    return;
                                case 57:
                                    ProcessRecord processRecord2 = (ProcessRecord) message.obj;
                                    ActivityManagerService activityManagerService5 = ActivityManagerService.this;
                                    ActivityManagerService.boostPriorityForLockedSection();
                                    synchronized (activityManagerService5) {
                                        try {
                                            ActivityManagerService.this.mCpHelper.processContentProviderPublishTimedOutLocked(processRecord2);
                                        } finally {
                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                        }
                                    }
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    return;
                                case 58:
                                    ActivityManagerService.this.idleUids();
                                    return;
                                default:
                                    switch (i) {
                                        case 71:
                                            ActivityManagerService activityManagerService6 = ActivityManagerService.this;
                                            ActivityManagerService.boostPriorityForLockedSection();
                                            synchronized (activityManagerService6) {
                                                try {
                                                    ActivityManagerService.this.mProcessList.killAppZygoteIfNeededLocked((AppZygote) message.obj, false);
                                                } finally {
                                                }
                                            }
                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                            return;
                                        case 72:
                                            ActivityManagerService.this.handleBinderHeavyHitterAutoSamplerTimeOut();
                                            return;
                                        case 73:
                                            ActivityManagerService activityManagerService7 = ActivityManagerService.this;
                                            ActivityManagerService.boostPriorityForLockedSection();
                                            synchronized (activityManagerService7) {
                                                try {
                                                    ((ContentProviderRecord) message.obj).onProviderPublishStatusLocked(false);
                                                } finally {
                                                }
                                            }
                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                            return;
                                        case 74:
                                            ActivityManagerService.this.mBroadcastEventListeners.forEach(new Consumer() { // from class: com.android.server.am.ActivityManagerService$MainHandler$$ExternalSyntheticLambda1
                                                @Override // java.util.function.Consumer
                                                public final void accept(Object obj) {
                                                    ActivityManagerService.MainHandler.lambda$handleMessage$1(message, (ActivityManagerInternal.BroadcastEventListener) obj);
                                                }
                                            });
                                            return;
                                        case 75:
                                            ActivityManagerService.this.mBindServiceEventListeners.forEach(new Consumer() { // from class: com.android.server.am.ActivityManagerService$MainHandler$$ExternalSyntheticLambda2
                                                @Override // java.util.function.Consumer
                                                public final void accept(Object obj) {
                                                    ActivityManagerService.MainHandler.lambda$handleMessage$2(message, (ActivityManagerInternal.BindServiceEventListener) obj);
                                                }
                                            });
                                            return;
                                        case 76:
                                            ActivityManagerService.this.mServices.onShortFgsTimeout((ServiceRecord) message.obj);
                                            return;
                                        case 77:
                                            ActivityManagerService.this.mServices.onShortFgsProcstateTimeout((ServiceRecord) message.obj);
                                            return;
                                        case 78:
                                            ActivityManagerService.this.mServices.onShortFgsAnrTimeout((ServiceRecord) message.obj);
                                            return;
                                        case 79:
                                            ActivityManagerService.this.mAppProfiler.mCachedAppsWatermarkData.updateCachedAppsSnapshot(((Long) message.obj).longValue());
                                            return;
                                        default:
                                            ActivityManagerService.this.mActivityManagerServiceExt.handleOplusMessage(message, 1);
                                            return;
                                    }
                            }
                    }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$handleMessage$0(ProcessRecord processRecord) {
            IApplicationThread thread = processRecord.getThread();
            if (thread != null) {
                try {
                    thread.updateTimeZone();
                } catch (RemoteException unused) {
                    Slog.w("ActivityManager", "Failed to update time zone for: " + processRecord.info.processName);
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$handleMessage$1(Message message, ActivityManagerInternal.BroadcastEventListener broadcastEventListener) {
            broadcastEventListener.onSendingBroadcast((String) message.obj, message.arg1);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$handleMessage$2(Message message, ActivityManagerInternal.BindServiceEventListener bindServiceEventListener) {
            bindServiceEventListener.onBindingService((String) message.obj, message.arg1);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void setSystemProcess() {
        try {
            ServiceManager.addService(HostingRecord.HOSTING_TYPE_ACTIVITY, this, true, 21);
            ServiceManager.addService("procstats", this.mProcessStats);
            ServiceManager.addService("meminfo", new MemBinder(this), false, 2);
            ServiceManager.addService("gfxinfo", new GraphicsBinder(this));
            ServiceManager.addService("dbinfo", new DbBinder(this));
            this.mAppProfiler.setCpuInfoService();
            ServiceManager.addService("permission", new PermissionController(this));
            ServiceManager.addService("processinfo", new ProcessInfoService(this));
            ServiceManager.addService("cacheinfo", new CacheBinder(this));
            this.mSocExt.addAnrManagerService();
            ApplicationInfo applicationInfo = this.mContext.getPackageManager().getApplicationInfo("android", 1049600);
            this.mSystemThread.installSystemApplicationInfo(applicationInfo, getClass().getClassLoader());
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ProcessRecord newProcessRecordLocked = this.mProcessList.newProcessRecordLocked(applicationInfo, applicationInfo.processName, false, 0, false, 0, null, new HostingRecord("system"));
                    newProcessRecordLocked.setPersistent(true);
                    newProcessRecordLocked.setPid(MY_PID);
                    newProcessRecordLocked.mState.setMaxAdj(ProcessList.SYSTEM_ADJ);
                    newProcessRecordLocked.makeActive(this.mSystemThread.getApplicationThread(), this.mProcessStats);
                    newProcessRecordLocked.mProfile.addHostingComponentType(1);
                    addPidLocked(newProcessRecordLocked);
                    updateLruProcessLocked(newProcessRecordLocked, false, null);
                    updateOomAdjLocked(14);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            this.mAppOpsService.startWatchingMode(63, null, new IAppOpsCallback.Stub() { // from class: com.android.server.am.ActivityManagerService.4
                public void opChanged(int i, int i2, String str) {
                    if (i != 63 || str == null || ActivityManagerService.this.getAppOpsManager().checkOpNoThrow(i, i2, str) == 0) {
                        return;
                    }
                    ActivityManagerService.this.runInBackgroundDisabled(i2);
                }
            });
            this.mAppOpsService.startWatchingActive(new int[]{26}, new IAppOpsActiveCallback.Stub() { // from class: com.android.server.am.ActivityManagerService.5
                public void opActiveChanged(int i, int i2, String str, String str2, boolean z, int i3, int i4) {
                    ActivityManagerService.this.cameraActiveChanged(i2, z);
                    if (z) {
                        ActivityManagerService.this.mActivityManagerServiceExt.cameraActiveChanged(i2);
                    }
                }
            });
        } catch (PackageManager.NameNotFoundException e) {
            throw new RuntimeException("Unable to find android system package", e);
        }
    }

    public void setWindowManager(WindowManagerService windowManagerService) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mWindowManager = windowManagerService;
                this.mWmInternal = (WindowManagerInternal) LocalServices.getService(WindowManagerInternal.class);
                this.mActivityTaskManager.setWindowManager(windowManagerService);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManagerInternal) {
        this.mUsageStatsService = usageStatsManagerInternal;
        this.mActivityTaskManager.setUsageStatsManager(usageStatsManagerInternal);
    }

    public void setContentCaptureManager(ContentCaptureManagerInternal contentCaptureManagerInternal) {
        this.mContentCaptureService = contentCaptureManagerInternal;
    }

    public void startObservingNativeCrashes() {
        new NativeCrashListener(this).start();
    }

    public void setAppOpsPolicy(AppOpsManagerInternal.CheckOpsDelegate checkOpsDelegate) {
        this.mAppOpsService.setAppOpsPolicy(checkOpsDelegate);
    }

    public IAppOpsService getAppOpsService() {
        return this.mAppOpsService;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setVoiceInteractionManagerProvider(ActivityManagerInternal.VoiceInteractionManagerProvider voiceInteractionManagerProvider) {
        this.mVoiceInteractionManagerProvider = voiceInteractionManagerProvider;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static class MemBinder extends Binder {
        ActivityManagerService mActivityManagerService;
        private final PriorityDump.PriorityDumper mPriorityDumper = new PriorityDump.PriorityDumper() { // from class: com.android.server.am.ActivityManagerService.MemBinder.1
            public void dumpHigh(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, boolean z) {
                dump(fileDescriptor, printWriter, new String[]{"-a"}, z);
            }

            public void dump(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, boolean z) {
                MemBinder.this.mActivityManagerService.dumpApplicationMemoryUsage(fileDescriptor, printWriter, "  ", strArr, false, null, z);
            }
        };

        MemBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        @Override // android.os.Binder
        protected void dump(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr) {
            try {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "meminfo", printWriter)) {
                    PriorityDump.dump(this.mPriorityDumper, fileDescriptor, printWriter, strArr);
                }
            } finally {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
            }
        }
    }

    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    static class GraphicsBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        GraphicsBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        @Override // android.os.Binder
        protected void dump(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr) {
            try {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "gfxinfo", printWriter)) {
                    this.mActivityManagerService.dumpGraphicsHardwareUsage(fileDescriptor, printWriter, strArr);
                }
            } finally {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
            }
        }
    }

    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    static class DbBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        DbBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        @Override // android.os.Binder
        protected void dump(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr) {
            try {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "dbinfo", printWriter)) {
                    this.mActivityManagerService.dumpDbInfo(fileDescriptor, printWriter, strArr);
                }
            } finally {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
            }
        }
    }

    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    static class CacheBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        CacheBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        @Override // android.os.Binder
        protected void dump(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr) {
            try {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "cacheinfo", printWriter)) {
                    this.mActivityManagerService.dumpBinderCacheContents(fileDescriptor, printWriter, strArr);
                }
            } finally {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
            }
        }
    }

    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static final class Lifecycle extends SystemService {
        private static ActivityTaskManagerService sAtm;
        private final ActivityManagerService mService;

        public Lifecycle(Context context) {
            super(context);
            this.mService = new ActivityManagerService(context, sAtm);
        }

        public static ActivityManagerService startService(SystemServiceManager systemServiceManager, ActivityTaskManagerService activityTaskManagerService) {
            sAtm = activityTaskManagerService;
            return ((Lifecycle) systemServiceManager.startService(Lifecycle.class)).getService();
        }

        @Override // com.android.server.SystemService
        public void onStart() {
            this.mService.start();
        }

        @Override // com.android.server.SystemService
        public void onBootPhase(int i) {
            ActivityManagerService activityManagerService = this.mService;
            activityManagerService.mBootPhase = i;
            if (i == 500) {
                activityManagerService.mBatteryStatsService.systemServicesReady();
                this.mService.mServices.systemServicesReady();
            } else if (i == 550) {
                activityManagerService.startBroadcastObservers();
            } else if (i == 600) {
                activityManagerService.mPackageWatchdog.onPackagesReady();
            }
        }

        @Override // com.android.server.SystemService
        public void onUserStopped(SystemService.TargetUser targetUser) {
            this.mService.mBatteryStatsService.onCleanupUser(targetUser.getUserIdentifier());
        }

        public ActivityManagerService getService() {
            return this.mService;
        }
    }

    private void maybeLogUserspaceRebootEvent() {
        int currentUserId;
        if (UserspaceRebootLogger.shouldLogUserspaceRebootEvent() && (currentUserId = this.mUserController.getCurrentUserId()) == 0) {
            UserspaceRebootLogger.logEventAsync(StorageManager.isUserKeyUnlocked(currentUserId), BackgroundThread.getExecutor());
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static class HiddenApiSettings extends ContentObserver implements DeviceConfig.OnPropertiesChangedListener {
        public static final String HIDDEN_API_ACCESS_LOG_SAMPLING_RATE = "hidden_api_access_log_sampling_rate";
        public static final String HIDDEN_API_ACCESS_STATSLOG_SAMPLING_RATE = "hidden_api_access_statslog_sampling_rate";
        private boolean mBlacklistDisabled;
        private final Context mContext;
        private List<String> mExemptions;
        private String mExemptionsStr;
        private int mLogSampleRate;
        private int mPolicy;
        private int mStatslogSampleRate;

        public void onPropertiesChanged(DeviceConfig.Properties properties) {
            int i = properties.getInt(HIDDEN_API_ACCESS_LOG_SAMPLING_RATE, 0);
            if (i < 0 || i > 65536) {
                i = -1;
            }
            if (i != -1 && i != this.mLogSampleRate) {
                this.mLogSampleRate = i;
                Process.ZYGOTE_PROCESS.setHiddenApiAccessLogSampleRate(i);
            }
            int i2 = properties.getInt(HIDDEN_API_ACCESS_STATSLOG_SAMPLING_RATE, 0);
            if (i2 < 0 || i2 > 65536) {
                i2 = -1;
            }
            if (i2 == -1 || i2 == this.mStatslogSampleRate) {
                return;
            }
            this.mStatslogSampleRate = i2;
            Process.ZYGOTE_PROCESS.setHiddenApiAccessStatslogSampleRate(i2);
        }

        public HiddenApiSettings(Handler handler, Context context) {
            super(handler);
            this.mExemptions = Collections.emptyList();
            this.mLogSampleRate = -1;
            this.mStatslogSampleRate = -1;
            this.mPolicy = -1;
            this.mContext = context;
        }

        public void registerObserver() {
            this.mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor("hidden_api_blacklist_exemptions"), false, this);
            this.mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor("hidden_api_policy"), false, this);
            DeviceConfig.addOnPropertiesChangedListener("app_compat", this.mContext.getMainExecutor(), this);
            update();
        }

        private void update() {
            List<String> asList;
            String string = Settings.Global.getString(this.mContext.getContentResolver(), "hidden_api_blacklist_exemptions");
            if (!TextUtils.equals(string, this.mExemptionsStr)) {
                this.mExemptionsStr = string;
                if ("*".equals(string)) {
                    this.mBlacklistDisabled = true;
                    this.mExemptions = Collections.emptyList();
                } else {
                    this.mBlacklistDisabled = false;
                    if (TextUtils.isEmpty(string)) {
                        asList = Collections.emptyList();
                    } else {
                        asList = Arrays.asList(string.split(","));
                    }
                    this.mExemptions = asList;
                }
                if (!Process.ZYGOTE_PROCESS.setApiDenylistExemptions(this.mExemptions)) {
                    Slog.e("ActivityManager", "Failed to set API blacklist exemptions!");
                    this.mExemptions = Collections.emptyList();
                }
            }
            this.mPolicy = getValidEnforcementPolicy("hidden_api_policy");
        }

        private int getValidEnforcementPolicy(String str) {
            int i = Settings.Global.getInt(this.mContext.getContentResolver(), str, -1);
            if (ApplicationInfo.isValidHiddenApiEnforcementPolicy(i)) {
                return i;
            }
            return -1;
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public boolean isDisabled() {
            return this.mBlacklistDisabled;
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public int getPolicy() {
            return this.mPolicy;
        }

        @Override // android.database.ContentObserver
        public void onChange(boolean z) {
            update();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public AppOpsManager getAppOpsManager() {
        if (this.mAppOpsManager == null) {
            this.mAppOpsManager = (AppOpsManager) this.mContext.getSystemService(AppOpsManager.class);
        }
        return this.mAppOpsManager;
    }

    @VisibleForTesting
    ActivityManagerService(Injector injector, ServiceThread serviceThread) {
        this(injector, serviceThread, null);
    }

    @VisibleForTesting
    ActivityManagerService(Injector injector, ServiceThread serviceThread, UserController userController) {
        this.mInstrumentationReporter = new InstrumentationReporter();
        this.mActiveInstrumentation = new ArrayList<>();
        this.mOomAdjProfiler = new OomAdjProfiler();
        this.mGlobalLock = this;
        this.mProcLock = new ActivityManagerProcLock();
        this.mStrictModeCallbacks = new SparseArray<>();
        this.mDeviceOwnerUid = -1;
        this.mCompanionAppUidsMap = new ArrayMap();
        this.mProfileOwnerUids = null;
        this.mDeliveryGroupPolicyIgnoredActions = new ArraySet<>();
        this.mActiveCameraUids = new IntArray(4);
        this.mPriorityDumper = new PriorityDump.PriorityDumper() { // from class: com.android.server.am.ActivityManagerService.1
            public void dumpCritical(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, boolean z) {
                if (z) {
                    return;
                }
                ActivityManagerService.this.doDump(fileDescriptor, printWriter, new String[]{"activities"}, z);
                ActivityManagerService.this.doDump(fileDescriptor, printWriter, new String[]{HostingRecord.HOSTING_TYPE_SERVICE, "all-platform-critical"}, z);
            }

            public void dumpNormal(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, boolean z) {
                ActivityManagerService.this.doDump(fileDescriptor, printWriter, new String[]{"-a", "--normal-priority"}, z);
            }

            public void dump(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, boolean z) {
                ActivityManagerService.this.doDump(fileDescriptor, printWriter, strArr, z);
            }
        };
        this.mBackgroundAppIdAllowlist = new int[]{1002};
        this.mPidsSelfLocked = new PidMap();
        this.mImportantProcesses = new SparseArray<>();
        this.mProcessesOnHold = new ArrayList<>();
        this.mPersistentStartingProcesses = new ArrayList<>();
        this.mActivityLaunchObserver = new ActivityMetricsLaunchObserver() { // from class: com.android.server.am.ActivityManagerService.2
            public void onActivityLaunched(long j, ComponentName componentName, int i) {
                ActivityManagerService.this.mAppProfiler.onActivityLaunched();
            }
        };
        this.mBinderTransactionTrackingEnabled = false;
        this.mAlreadyLoggedViolatedStacks = new HashSet<>();
        this.mRegisteredReceivers = new HashMap<>();
        this.mReceiverResolver = new IntentResolver<BroadcastFilter, BroadcastFilter>() { // from class: com.android.server.am.ActivityManagerService.3
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public IntentFilter getIntentFilter(BroadcastFilter broadcastFilter) {
                return broadcastFilter;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public boolean allowFilterResult(BroadcastFilter broadcastFilter, List<BroadcastFilter> list) {
                IBinder asBinder = broadcastFilter.receiverList.receiver.asBinder();
                for (int size = list.size() - 1; size >= 0; size--) {
                    if (list.get(size).receiverList.receiver.asBinder() == asBinder) {
                        return false;
                    }
                }
                return true;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public BroadcastFilter newResult(Computer computer, BroadcastFilter broadcastFilter, int i, int i2, long j) {
                int i3;
                if (i2 == -1 || (i3 = broadcastFilter.owningUserId) == -1 || i2 == i3) {
                    return (BroadcastFilter) super.newResult(computer, (Computer) broadcastFilter, i, i2, j);
                }
                return null;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            /* JADX WARN: Can't rename method to resolve collision */
            @Override // com.android.server.IntentResolver
            public BroadcastFilter[] newArray(int i) {
                return new BroadcastFilter[i];
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public boolean isPackageForFilter(String str, BroadcastFilter broadcastFilter) {
                return str.equals(broadcastFilter.packageName);
            }
        };
        this.mStickyBroadcasts = new SparseArray<>();
        this.mAssociations = new SparseArray<>();
        this.mBackupTargets = new SparseArray<>();
        this.mDeviceIdleAllowlist = new int[0];
        this.mDeviceIdleExceptIdleAllowlist = new int[0];
        this.mDeviceIdleTempAllowlist = new int[0];
        this.mPendingTempAllowlist = new PendingTempAllowlists(this);
        this.mFgsStartTempAllowList = new FgsTempAllowList<>();
        this.mFgsWhileInUseTempAllowList = new FgsTempAllowList<>();
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mWakefulness = new AtomicInteger(1);
        this.mLastIdleTime = SystemClock.uptimeMillis();
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mCurResumedAppLock = new Object();
        this.mForegroundPackages = new ProcessMap<>();
        this.mForegroundServiceStateListeners = new ArrayList<>();
        this.mBroadcastEventListeners = new CopyOnWriteArrayList<>();
        this.mBindServiceEventListeners = new CopyOnWriteArrayList<>();
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mSuspendUponWait = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mOomAdjObserverLock = new Object();
        this.mAnrHelper = new AnrHelper(this);
        this.mBooted = false;
        this.mDeterministicUidIdle = false;
        this.mUidNetworkBlockedReasons = new SparseIntArray();
        this.mMediaProjectionTokenMap = new SparseArray<>();
        this.mLastBinderHeavyHitterAutoSamplerStart = 0L;
        this.mGetBackgroundStartPrivilegesFunctor = new GetBackgroundStartPrivilegesFunctor();
        this.mUidFrozenStateChangedCallbackList = new RemoteCallbackList<>();
        this.mDropboxRateLimiter = new DropboxRateLimiter();
        this.mCallingPid = 0;
        this.mAmsWrapper = new ActivityManagerServiceWrapper();
        this.mActivityManagerServiceExt = (IActivityManagerServiceExt) ExtLoader.type(IActivityManagerServiceExt.class).create();
        this.mSocExt = (IActivityManagerServiceSocExt) ExtLoader.type(IActivityManagerServiceSocExt.class).base(this).create();
        this.mTheiaManagerExt = (ITheiaManagerExt) ExtLoader.type(ITheiaManagerExt.class).create();
        this.mInjector = injector;
        Context context = injector.getContext();
        this.mContext = context;
        this.mUiContext = null;
        this.mAppErrors = null;
        this.mPackageWatchdog = null;
        this.mAppOpsService = injector.getAppOpsService(null, null, null);
        this.mBatteryStatsService = injector.getBatteryStatsService();
        MainHandler mainHandler = new MainHandler(serviceThread.getLooper());
        this.mHandler = mainHandler;
        this.mHandlerThread = serviceThread;
        this.mConstants = new ActivityManagerConstants(context, this, mainHandler);
        ActiveUids activeUids = new ActiveUids(this, false);
        this.mPlatformCompat = null;
        ProcessList processList = injector.getProcessList(this);
        this.mProcessList = processList;
        processList.init(this, activeUids, null);
        this.mAppProfiler = new AppProfiler(this, BackgroundThread.getHandler().getLooper(), null);
        this.mPhantomProcessList = new PhantomProcessList(this);
        this.mOomAdjuster = new OomAdjuster(this, processList, activeUids, serviceThread);
        this.mIntentFirewall = null;
        this.mProcessStats = new ProcessStatsService(this, context.getCacheDir());
        this.mCpHelper = new ContentProviderHelper(this, false);
        this.mServices = injector.getActiveServices(this);
        this.mSystemThread = null;
        Handler uiHandler = injector.getUiHandler(null);
        this.mUiHandler = uiHandler;
        this.mUidObserverController = new UidObserverController(uiHandler);
        userController = userController == null ? new UserController(this) : userController;
        this.mUserController = userController;
        injector.mUserController = userController;
        this.mPendingIntentController = new PendingIntentController(serviceThread.getLooper(), userController, this.mConstants);
        this.mAppRestrictionController = new AppRestrictionController(context, this);
        this.mProcStartHandlerThread = null;
        this.mProcStartHandler = null;
        this.mHiddenApiBlacklist = null;
        this.mFactoryTest = 0;
        this.mUgmInternal = (UriGrantsManagerInternal) LocalServices.getService(UriGrantsManagerInternal.class);
        this.mInternal = new LocalService();
        this.mPendingStartActivityUids = new PendingStartActivityUids();
        this.mUseFifoUiScheduling = false;
        this.mEnableOffloadQueue = false;
        this.mEnableModernQueue = false;
        this.mBroadcastQueues = new BroadcastQueue[0];
        this.mComponentAliasResolver = new ComponentAliasResolver(this);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public ActivityManagerService(Context context, ActivityTaskManagerService activityTaskManagerService) {
        Handler handler;
        MainHandler mainHandler;
        this.mInstrumentationReporter = new InstrumentationReporter();
        this.mActiveInstrumentation = new ArrayList<>();
        this.mOomAdjProfiler = new OomAdjProfiler();
        this.mGlobalLock = this;
        this.mProcLock = new ActivityManagerProcLock();
        this.mStrictModeCallbacks = new SparseArray<>();
        this.mDeviceOwnerUid = -1;
        this.mCompanionAppUidsMap = new ArrayMap();
        this.mProfileOwnerUids = null;
        this.mDeliveryGroupPolicyIgnoredActions = new ArraySet<>();
        this.mActiveCameraUids = new IntArray(4);
        this.mPriorityDumper = new PriorityDump.PriorityDumper() { // from class: com.android.server.am.ActivityManagerService.1
            public void dumpCritical(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, boolean z) {
                if (z) {
                    return;
                }
                ActivityManagerService.this.doDump(fileDescriptor, printWriter, new String[]{"activities"}, z);
                ActivityManagerService.this.doDump(fileDescriptor, printWriter, new String[]{HostingRecord.HOSTING_TYPE_SERVICE, "all-platform-critical"}, z);
            }

            public void dumpNormal(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, boolean z) {
                ActivityManagerService.this.doDump(fileDescriptor, printWriter, new String[]{"-a", "--normal-priority"}, z);
            }

            public void dump(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, boolean z) {
                ActivityManagerService.this.doDump(fileDescriptor, printWriter, strArr, z);
            }
        };
        this.mBackgroundAppIdAllowlist = new int[]{1002};
        this.mPidsSelfLocked = new PidMap();
        this.mImportantProcesses = new SparseArray<>();
        this.mProcessesOnHold = new ArrayList<>();
        this.mPersistentStartingProcesses = new ArrayList<>();
        this.mActivityLaunchObserver = new ActivityMetricsLaunchObserver() { // from class: com.android.server.am.ActivityManagerService.2
            public void onActivityLaunched(long j, ComponentName componentName, int i) {
                ActivityManagerService.this.mAppProfiler.onActivityLaunched();
            }
        };
        this.mBinderTransactionTrackingEnabled = false;
        this.mAlreadyLoggedViolatedStacks = new HashSet<>();
        this.mRegisteredReceivers = new HashMap<>();
        this.mReceiverResolver = new IntentResolver<BroadcastFilter, BroadcastFilter>() { // from class: com.android.server.am.ActivityManagerService.3
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public IntentFilter getIntentFilter(BroadcastFilter broadcastFilter) {
                return broadcastFilter;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public boolean allowFilterResult(BroadcastFilter broadcastFilter, List<BroadcastFilter> list) {
                IBinder asBinder = broadcastFilter.receiverList.receiver.asBinder();
                for (int size = list.size() - 1; size >= 0; size--) {
                    if (list.get(size).receiverList.receiver.asBinder() == asBinder) {
                        return false;
                    }
                }
                return true;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public BroadcastFilter newResult(Computer computer, BroadcastFilter broadcastFilter, int i, int i2, long j) {
                int i3;
                if (i2 == -1 || (i3 = broadcastFilter.owningUserId) == -1 || i2 == i3) {
                    return (BroadcastFilter) super.newResult(computer, (Computer) broadcastFilter, i, i2, j);
                }
                return null;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            /* JADX WARN: Can't rename method to resolve collision */
            @Override // com.android.server.IntentResolver
            public BroadcastFilter[] newArray(int i) {
                return new BroadcastFilter[i];
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public boolean isPackageForFilter(String str, BroadcastFilter broadcastFilter) {
                return str.equals(broadcastFilter.packageName);
            }
        };
        this.mStickyBroadcasts = new SparseArray<>();
        this.mAssociations = new SparseArray<>();
        this.mBackupTargets = new SparseArray<>();
        this.mDeviceIdleAllowlist = new int[0];
        this.mDeviceIdleExceptIdleAllowlist = new int[0];
        this.mDeviceIdleTempAllowlist = new int[0];
        this.mPendingTempAllowlist = new PendingTempAllowlists(this);
        this.mFgsStartTempAllowList = new FgsTempAllowList<>();
        this.mFgsWhileInUseTempAllowList = new FgsTempAllowList<>();
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mWakefulness = new AtomicInteger(1);
        this.mLastIdleTime = SystemClock.uptimeMillis();
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mCurResumedAppLock = new Object();
        this.mForegroundPackages = new ProcessMap<>();
        this.mForegroundServiceStateListeners = new ArrayList<>();
        this.mBroadcastEventListeners = new CopyOnWriteArrayList<>();
        this.mBindServiceEventListeners = new CopyOnWriteArrayList<>();
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mSuspendUponWait = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mOomAdjObserverLock = new Object();
        this.mAnrHelper = new AnrHelper(this);
        this.mBooted = false;
        this.mDeterministicUidIdle = false;
        this.mUidNetworkBlockedReasons = new SparseIntArray();
        this.mMediaProjectionTokenMap = new SparseArray<>();
        this.mLastBinderHeavyHitterAutoSamplerStart = 0L;
        this.mGetBackgroundStartPrivilegesFunctor = new GetBackgroundStartPrivilegesFunctor();
        this.mUidFrozenStateChangedCallbackList = new RemoteCallbackList<>();
        this.mDropboxRateLimiter = new DropboxRateLimiter();
        this.mCallingPid = 0;
        this.mAmsWrapper = new ActivityManagerServiceWrapper();
        this.mActivityManagerServiceExt = (IActivityManagerServiceExt) ExtLoader.type(IActivityManagerServiceExt.class).create();
        this.mSocExt = (IActivityManagerServiceSocExt) ExtLoader.type(IActivityManagerServiceSocExt.class).base(this).create();
        this.mTheiaManagerExt = (ITheiaManagerExt) ExtLoader.type(ITheiaManagerExt.class).create();
        this.mActivityManagerServiceExt.initAmsExAndInner(context, this, activityTaskManagerService);
        LockGuard.installLock(this, 7);
        Injector injector = new Injector(context);
        this.mInjector = injector;
        this.mContext = context;
        this.mFactoryTest = FactoryTest.getMode();
        ActivityThread currentActivityThread = ActivityThread.currentActivityThread();
        this.mSystemThread = currentActivityThread;
        ContextImpl systemUiContext = currentActivityThread.getSystemUiContext();
        this.mUiContext = systemUiContext;
        Slog.i("ActivityManager", "Memory class: " + ActivityManager.staticGetMemoryClass());
        ServiceThread serviceThread = new ServiceThread("ActivityManager", -2, false);
        this.mHandlerThread = serviceThread;
        serviceThread.start();
        MainHandler mainHandler2 = new MainHandler(serviceThread.getLooper());
        this.mHandler = mainHandler2;
        Handler uiHandler = injector.getUiHandler(this);
        this.mUiHandler = uiHandler;
        ServiceThread serviceThread2 = new ServiceThread("ActivityManager:procStart", -2, false);
        this.mProcStartHandlerThread = serviceThread2;
        serviceThread2.start();
        this.mProcStartHandler = new ProcessList.ProcStartHandler(this, serviceThread2.getLooper());
        this.mConstants = new ActivityManagerConstants(context, this, mainHandler2);
        ActiveUids activeUids = new ActiveUids(this, true);
        PlatformCompat platformCompat = (PlatformCompat) ServiceManager.getService("platform_compat");
        this.mPlatformCompat = platformCompat;
        ProcessList processList = injector.getProcessList(this);
        this.mProcessList = processList;
        processList.init(this, activeUids, platformCompat);
        this.mAppProfiler = new AppProfiler(this, BackgroundThread.getHandler().getLooper(), new LowMemDetector(this));
        this.mPhantomProcessList = new PhantomProcessList(this);
        this.mOomAdjuster = new OomAdjuster(this, processList, activeUids);
        BroadcastConstants broadcastConstants = new BroadcastConstants("bcast_fg_constants");
        broadcastConstants.TIMEOUT = BROADCAST_FG_TIMEOUT;
        BroadcastConstants broadcastConstants2 = new BroadcastConstants("bcast_bg_constants");
        int i = BROADCAST_BG_TIMEOUT;
        broadcastConstants2.TIMEOUT = i;
        BroadcastConstants broadcastConstants3 = new BroadcastConstants("bcast_offload_constants");
        broadcastConstants3.TIMEOUT = i;
        broadcastConstants3.SLOW_TIME = 2147483647L;
        this.mEnableOffloadQueue = SystemProperties.getBoolean("persist.device_config.activity_manager_native_boot.offload_queue_enabled", true);
        boolean z = broadcastConstants.MODERN_QUEUE_ENABLED;
        this.mEnableModernQueue = z;
        this.mActivityManagerServiceExt.initBroadcastAndBootPressure(this);
        Handler broadcastHandler = this.mActivityManagerServiceExt.getBroadcastHandler(mainHandler2);
        if (z) {
            this.mBroadcastQueues = r0;
            BroadcastQueue[] broadcastQueueArr = {new BroadcastQueueModernImpl(this, broadcastHandler, broadcastConstants, broadcastConstants2)};
            handler = uiHandler;
            mainHandler = mainHandler2;
        } else {
            BroadcastQueue[] broadcastQueueArr2 = new BroadcastQueue[6];
            this.mBroadcastQueues = broadcastQueueArr2;
            handler = uiHandler;
            mainHandler = mainHandler2;
            broadcastQueueArr2[0] = new BroadcastQueueImpl(this, broadcastHandler, "foreground", broadcastConstants, false, 2);
            broadcastQueueArr2[1] = new BroadcastQueueImpl(this, broadcastHandler, "background", broadcastConstants2, true, 0);
            broadcastQueueArr2[2] = new BroadcastQueueImpl(this, broadcastHandler, "offload_bg", broadcastConstants3, true, 0);
            broadcastQueueArr2[3] = new BroadcastQueueImpl(this, broadcastHandler, "offload_fg", broadcastConstants, true, 0);
            this.mActivityManagerServiceExt.instanceBroadcast(broadcastConstants, broadcastConstants2);
        }
        this.mServices = new ActiveServices(this);
        this.mCpHelper = new ContentProviderHelper(this, true);
        PackageWatchdog packageWatchdog = PackageWatchdog.getInstance(systemUiContext);
        this.mPackageWatchdog = packageWatchdog;
        this.mAppErrors = new AppErrors(systemUiContext, this, packageWatchdog);
        this.mUidObserverController = new UidObserverController(handler);
        File ensureSystemDir = SystemServiceManager.ensureSystemDir();
        BatteryStatsService create = BatteryStatsService.create(context, ensureSystemDir, BackgroundThread.getHandler(), this);
        this.mBatteryStatsService = create;
        this.mOnBattery = ActivityManagerDebugConfig.DEBUG_POWER ? true : create.getActiveStatistics().getIsOnBattery();
        this.mOomAdjProfiler.batteryPowerChanged(this.mOnBattery);
        this.mProcessStats = new ProcessStatsService(this, new File(ensureSystemDir, "procstats"));
        File file = new File(ensureSystemDir, "appops_accesses.xml");
        File file2 = new File(ensureSystemDir, "appops.xml");
        MainHandler mainHandler3 = mainHandler;
        this.mAppOpsService = injector.getAppOpsService(file, file2, mainHandler3);
        this.mUgmInternal = (UriGrantsManagerInternal) LocalServices.getService(UriGrantsManagerInternal.class);
        UserController userController = new UserController(this);
        this.mUserController = userController;
        injector.mUserController = userController;
        PendingIntentController pendingIntentController = new PendingIntentController(serviceThread.getLooper(), userController, this.mConstants);
        this.mPendingIntentController = pendingIntentController;
        this.mAppRestrictionController = new AppRestrictionController(context, this);
        this.mUseFifoUiScheduling = SystemProperties.getInt("sys.use_fifo_ui", 0) != 0;
        this.mTrackingAssociations = "1".equals(SystemProperties.get("debug.track-associations"));
        IntentFirewall intentFirewall = new IntentFirewall(new IntentFirewallInterface(), mainHandler3);
        this.mIntentFirewall = intentFirewall;
        this.mActivityTaskManager = activityTaskManagerService;
        activityTaskManagerService.initialize(intentFirewall, pendingIntentController, DisplayThread.get().getLooper());
        this.mAtmInternal = (ActivityTaskManagerInternal) LocalServices.getService(ActivityTaskManagerInternal.class);
        this.mTaskSupervisor = this.mActivityTaskManager.mTaskSupervisor;
        this.mHiddenApiBlacklist = new HiddenApiSettings(mainHandler3, context);
        Watchdog.getInstance().addMonitor(this);
        Watchdog.getInstance().addThread(mainHandler3);
        this.mActivityManagerServiceExt.addMonitor(this);
        updateOomAdjLocked(14);
        try {
            Process.setThreadGroupAndCpuset(BackgroundThread.get().getThreadId(), 2);
            Process.setThreadGroupAndCpuset(this.mOomAdjuster.mCachedAppOptimizer.mCachedAppOptimizerThread.getThreadId(), 2);
        } catch (Exception unused) {
            Slog.w("ActivityManager", "Setting background thread cpuset failed");
        }
        this.mInternal = new LocalService();
        this.mActivityManagerServiceExt.hookAMSConstructEnd();
        this.mPendingStartActivityUids = new PendingStartActivityUids();
        this.mTraceErrorLogger = new TraceErrorLogger();
        this.mComponentAliasResolver = new ComponentAliasResolver(this);
    }

    public void setSystemServiceManager(SystemServiceManager systemServiceManager) {
        this.mSystemServiceManager = systemServiceManager;
    }

    public void setInstaller(Installer installer) {
        this.mInstaller = installer;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void start() {
        this.mBatteryStatsService.publish();
        this.mAppOpsService.publish();
        this.mProcessStats.publish();
        Slog.d("AppOps", "AppOpsService published");
        LocalServices.addService(ActivityManagerInternal.class, this.mInternal);
        LocalManagerRegistry.addManager(ActivityManagerLocal.class, this.mInternal);
        this.mActivityTaskManager.onActivityManagerInternalAdded();
        this.mPendingIntentController.onActivityManagerInternalAdded();
        this.mAppProfiler.onActivityManagerInternalAdded();
        CriticalEventLog.init();
        this.mActivityManagerServiceExt.onOplusStart();
        this.mSocExt.startAnrManagerService(MY_PID);
    }

    public void initPowerManagement() {
        this.mActivityTaskManager.onInitPowerManagement();
        this.mBatteryStatsService.initPowerManagement();
        this.mLocalPowerManager = (PowerManagerInternal) LocalServices.getService(PowerManagerInternal.class);
    }

    private ArraySet<String> getBackgroundLaunchBroadcasts() {
        if (this.mBackgroundLaunchBroadcasts == null) {
            this.mBackgroundLaunchBroadcasts = SystemConfig.getInstance().getAllowImplicitBroadcasts();
        }
        return this.mBackgroundLaunchBroadcasts;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void requireAllowedAssociationsLocked(String str) {
        ensureAllowedAssociations();
        if (this.mAllowedAssociations.get(str) == null) {
            this.mAllowedAssociations.put(str, new PackageAssociationInfo(str, new ArraySet(), false));
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean validateAssociationAllowedLocked(String str, int i, String str2, int i2) {
        ensureAllowedAssociations();
        if (i != i2 && UserHandle.getAppId(i) != 1000 && UserHandle.getAppId(i2) != 1000) {
            PackageAssociationInfo packageAssociationInfo = this.mAllowedAssociations.get(str);
            if (packageAssociationInfo != null && !packageAssociationInfo.isPackageAssociationAllowed(str2)) {
                return false;
            }
            PackageAssociationInfo packageAssociationInfo2 = this.mAllowedAssociations.get(str2);
            if (packageAssociationInfo2 != null && !packageAssociationInfo2.isPackageAssociationAllowed(str)) {
                return false;
            }
        }
        return true;
    }

    private void ensureAllowedAssociations() {
        boolean z;
        ApplicationInfo applicationInfo;
        if (this.mAllowedAssociations == null) {
            ArrayMap<String, ArraySet<String>> allowedAssociations = SystemConfig.getInstance().getAllowedAssociations();
            this.mAllowedAssociations = new ArrayMap<>(allowedAssociations.size());
            getPackageManagerInternal();
            for (int i = 0; i < allowedAssociations.size(); i++) {
                String keyAt = allowedAssociations.keyAt(i);
                ArraySet<String> valueAt = allowedAssociations.valueAt(i);
                try {
                    applicationInfo = AppGlobals.getPackageManager().getApplicationInfo(keyAt, 131072L, 0);
                } catch (RemoteException unused) {
                }
                if (applicationInfo != null && (applicationInfo.flags & 2) != 0) {
                    z = true;
                    this.mAllowedAssociations.put(keyAt, new PackageAssociationInfo(keyAt, valueAt, z));
                }
                z = false;
                this.mAllowedAssociations.put(keyAt, new PackageAssociationInfo(keyAt, valueAt, z));
            }
        }
    }

    private void updateAssociationForApp(ApplicationInfo applicationInfo) {
        ensureAllowedAssociations();
        PackageAssociationInfo packageAssociationInfo = this.mAllowedAssociations.get(applicationInfo.packageName);
        if (packageAssociationInfo != null) {
            packageAssociationInfo.setDebuggable((applicationInfo.flags & 2) != 0);
        }
    }

    public boolean onTransact(int i, Parcel parcel, Parcel parcel2, int i2) throws RemoteException {
        if (i == 1599295570) {
            ArrayList arrayList = new ArrayList();
            ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    ArrayMap map = this.mProcessList.getProcessNamesLOSP().getMap();
                    int size = map.size();
                    for (int i3 = 0; i3 < size; i3++) {
                        SparseArray sparseArray = (SparseArray) map.valueAt(i3);
                        int size2 = sparseArray.size();
                        for (int i4 = 0; i4 < size2; i4++) {
                            IApplicationThread thread = ((ProcessRecord) sparseArray.valueAt(i4)).getThread();
                            if (thread != null) {
                                arrayList.add(thread.asBinder());
                            }
                        }
                    }
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            int size3 = arrayList.size();
            for (int i5 = 0; i5 < size3; i5++) {
                Parcel obtain = Parcel.obtain();
                try {
                    ((IBinder) arrayList.get(i5)).transact(1599295570, obtain, null, 1);
                } catch (RemoteException unused) {
                }
                obtain.recycle();
            }
        }
        try {
            if (super.onTransact(i, parcel, parcel2, i2)) {
                return true;
            }
            return this.mActivityManagerServiceExt.hookOnTransact(i, parcel, parcel2, i2);
        } catch (RuntimeException e) {
            if (!(e instanceof SecurityException) && !(e instanceof IllegalArgumentException) && !(e instanceof IllegalStateException)) {
                Slog.wtf("ActivityManager", "Activity Manager Crash. UID:" + Binder.getCallingUid() + " PID:" + Binder.getCallingPid() + " TRANS:" + i, e);
            }
            throw e;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void updateCpuStats() {
        this.mAppProfiler.updateCpuStats();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void updateCpuStatsNow() {
        this.mAppProfiler.updateCpuStatsNow();
    }

    public void batteryNeedsCpuUpdate() {
        updateCpuStatsNow();
    }

    public void batteryPowerChanged(boolean z) {
        updateCpuStatsNow();
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mOnBattery = ActivityManagerDebugConfig.DEBUG_POWER ? true : z;
                this.mOomAdjProfiler.batteryPowerChanged(z);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public void batteryStatsReset() {
        this.mOomAdjProfiler.reset();
    }

    public void batterySendBroadcast(Intent intent) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                broadcastIntentLocked(null, null, null, intent, null, null, 0, null, null, null, null, null, -1, null, false, false, -1, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    private ArrayMap<String, IBinder> getCommonServicesLocked(boolean z) {
        if (z) {
            if (this.mIsolatedAppBindArgs == null) {
                ArrayMap<String, IBinder> arrayMap = new ArrayMap<>(1);
                this.mIsolatedAppBindArgs = arrayMap;
                addServiceToMap(arrayMap, "package");
                addServiceToMap(this.mIsolatedAppBindArgs, "permissionmgr");
            }
            return this.mIsolatedAppBindArgs;
        }
        if (this.mAppBindArgs == null) {
            ArrayMap<String, IBinder> arrayMap2 = new ArrayMap<>();
            this.mAppBindArgs = arrayMap2;
            addServiceToMap(arrayMap2, "package");
            addServiceToMap(this.mAppBindArgs, "permissionmgr");
            addServiceToMap(this.mAppBindArgs, "window");
            addServiceToMap(this.mAppBindArgs, HostingRecord.TRIGGER_TYPE_ALARM);
            addServiceToMap(this.mAppBindArgs, "display");
            addServiceToMap(this.mAppBindArgs, "network_management");
            addServiceToMap(this.mAppBindArgs, "connectivity");
            addServiceToMap(this.mAppBindArgs, "accessibility");
            addServiceToMap(this.mAppBindArgs, "input_method");
            addServiceToMap(this.mAppBindArgs, IOplusSceneManager.APP_SCENE_DEFAULT_INPUT);
            addServiceToMap(this.mAppBindArgs, "graphicsstats");
            addServiceToMap(this.mAppBindArgs, "appops");
            addServiceToMap(this.mAppBindArgs, "content");
            addServiceToMap(this.mAppBindArgs, "jobscheduler");
            addServiceToMap(this.mAppBindArgs, "notification");
            addServiceToMap(this.mAppBindArgs, "vibrator");
            addServiceToMap(this.mAppBindArgs, "account");
            addServiceToMap(this.mAppBindArgs, "power");
            addServiceToMap(this.mAppBindArgs, "user");
            addServiceToMap(this.mAppBindArgs, "mount");
            addServiceToMap(this.mAppBindArgs, "platform_compat");
            this.mActivityManagerServiceExt.addCustomServiceToMap();
        }
        return this.mAppBindArgs;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static void addServiceToMap(ArrayMap<String, IBinder> arrayMap, String str) {
        IBinder service = ServiceManager.getService(str);
        if (service != null) {
            arrayMap.put(str, service);
        }
    }

    public void setFocusedRootTask(int i) {
        this.mActivityTaskManager.setFocusedRootTask(i);
    }

    public void registerTaskStackListener(ITaskStackListener iTaskStackListener) {
        this.mActivityTaskManager.registerTaskStackListener(iTaskStackListener);
    }

    public void unregisterTaskStackListener(ITaskStackListener iTaskStackListener) {
        this.mActivityTaskManager.unregisterTaskStackListener(iTaskStackListener);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void updateLruProcessLocked(ProcessRecord processRecord, boolean z, ProcessRecord processRecord2) {
        this.mProcessList.updateLruProcessLocked(processRecord, z, processRecord2);
    }

    @GuardedBy({"this"})
    final void removeLruProcessLocked(ProcessRecord processRecord) {
        this.mProcessList.removeLruProcessLocked(processRecord);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final ProcessRecord getProcessRecordLocked(String str, int i) {
        return this.mProcessList.getProcessRecordLocked(str, i);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy(anyOf = {"this", "mProcLock"})
    public final ProcessMap<ProcessRecord> getProcessNamesLOSP() {
        return this.mProcessList.getProcessNamesLOSP();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void notifyPackageUse(String str, int i) {
        getPackageManagerInternal().notifyPackageUse(str, i);
    }

    boolean startIsolatedProcess(String str, String[] strArr, String str2, String str3, int i, Runnable runnable) {
        boolean z;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ApplicationInfo applicationInfo = new ApplicationInfo();
                applicationInfo.uid = 1000;
                applicationInfo.processName = str2;
                applicationInfo.className = str;
                applicationInfo.packageName = "android";
                applicationInfo.seInfoUser = ":complete";
                applicationInfo.targetSdkVersion = Build.VERSION.SDK_INT;
                z = this.mProcessList.startProcessLocked(str2, applicationInfo, false, 0, sNullHostingRecord, 0, true, true, i, false, 0, null, str3, str, strArr, runnable) != null;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final ProcessRecord startSdkSandboxProcessLocked(String str, ApplicationInfo applicationInfo, boolean z, int i, HostingRecord hostingRecord, int i2, int i3, String str2) {
        return this.mProcessList.startProcessLocked(str, applicationInfo, z, i, hostingRecord, i2, false, false, 0, true, i3, str2, null, null, null, null);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final ProcessRecord startProcessLocked(String str, ApplicationInfo applicationInfo, boolean z, int i, HostingRecord hostingRecord, int i2, boolean z2, boolean z3) {
        return this.mProcessList.startProcessLocked(str, applicationInfo, z, i, hostingRecord, i2, z2, z3, 0, false, 0, null, null, null, null, null);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean isAllowedWhileBooting(ApplicationInfo applicationInfo) {
        return (applicationInfo.flags & 8) != 0;
    }

    void updateBatteryStats(ComponentName componentName, int i, int i2, boolean z) {
        if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH) {
            Slog.d(TAG_SWITCH, "updateBatteryStats: comp=" + componentName + "res=" + z);
        }
        this.mBatteryStatsService.updateBatteryStatsOnActivityUsage(componentName.getPackageName(), componentName.getShortClassName(), i, i2, z);
        IBatteryStatsImplExt iBatteryStatsImplExt = this.mBatteryStatsService.getActiveStatistics().mBatteryStatsImplExt;
        this.mBatteryStatsImplExt = iBatteryStatsImplExt;
        synchronized (iBatteryStatsImplExt) {
            this.mBatteryStatsImplExt.noteActivityLocked(i, componentName, this.mOnBattery, (BatteryStats.HistoryItem) null, SystemClock.elapsedRealtime(), new Handler(), componentName.getPackageName(), z, this.mContext);
        }
    }

    public void updateActivityUsageStats(ComponentName componentName, int i, int i2, IBinder iBinder, ComponentName componentName2, ActivityId activityId) {
        if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH || ActivityTaskManagerDebugConfig.DEBUG_AMS) {
            Slog.d(TAG_SWITCH, "updateActivityUsageStats: comp=" + componentName + " hash=" + iBinder.hashCode() + " event=" + i2);
        }
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.reportEvent(componentName, i, i2, iBinder.hashCode(), componentName2);
            if (i2 == 1) {
                this.mUsageStatsService.reportEvent(componentName.getPackageName(), i, 31);
            }
        }
        ContentCaptureManagerInternal contentCaptureManagerInternal = this.mContentCaptureService;
        if (contentCaptureManagerInternal != null && (i2 == 2 || i2 == 1 || i2 == 23 || i2 == 24)) {
            contentCaptureManagerInternal.notifyActivityEvent(i, componentName, i2, activityId);
        }
        if (this.mVoiceInteractionManagerProvider == null || i2 != 24) {
            return;
        }
        this.mVoiceInteractionManagerProvider.notifyActivityDestroyed(iBinder);
    }

    public void updateActivityUsageStats(String str, int i, int i2) {
        if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH || ActivityTaskManagerDebugConfig.DEBUG_AMS) {
            Slog.d(TAG_SWITCH, "updateActivityUsageStats: package=" + str + " event=" + i2);
        }
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.reportEvent(str, i, i2);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void updateForegroundServiceUsageStats(ComponentName componentName, int i, boolean z) {
        if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH || ActivityTaskManagerDebugConfig.DEBUG_AMS) {
            Slog.d(TAG_SWITCH, "updateForegroundServiceUsageStats: comp=" + componentName + " started=" + z);
        }
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.reportEvent(componentName, i, z ? 19 : 20, 0, null);
        }
    }

    CompatibilityInfo compatibilityInfoForPackage(ApplicationInfo applicationInfo) {
        return this.mAtmInternal.compatibilityInfoForPackage(applicationInfo);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void enforceNotIsolatedCaller(String str) {
        if (UserHandle.isIsolated(Binder.getCallingUid())) {
            throw new SecurityException("Isolated process not allowed to call " + str);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void enforceNotIsolatedOrSdkSandboxCaller(String str) {
        enforceNotIsolatedCaller(str);
        if (Process.isSdkSandboxUid(Binder.getCallingUid())) {
            throw new SecurityException("SDK sandbox process not allowed to call " + str);
        }
    }

    private void enforceAllowedToStartOrBindServiceIfSdkSandbox(Intent intent) {
        if (Process.isSdkSandboxUid(Binder.getCallingUid())) {
            SdkSandboxManagerLocal sdkSandboxManagerLocal = (SdkSandboxManagerLocal) LocalManagerRegistry.getManager(SdkSandboxManagerLocal.class);
            if (sdkSandboxManagerLocal != null) {
                sdkSandboxManagerLocal.enforceAllowedToStartOrBindService(intent);
                return;
            }
            throw new IllegalStateException("SdkSandboxManagerLocal not found when checking whether SDK sandbox uid may start or bind to a service.");
        }
    }

    private void enforceCallingPackage(String str, int i) {
        if (getPackageManagerInternal().getPackageUid(str, 0L, UserHandle.getUserId(i)) == i) {
            return;
        }
        throw new SecurityException(str + " does not belong to uid " + i);
    }

    public void setPackageScreenCompatMode(String str, int i) {
        this.mActivityTaskManager.setPackageScreenCompatMode(str, i);
    }

    private boolean hasUsageStatsPermission(String str, int i, int i2) {
        int opMode = this.mAppOpsService.noteOperation(43, i, str, null, false, "", false).getOpMode();
        return opMode == 3 ? checkPermission("android.permission.PACKAGE_USAGE_STATS", i2, i) == 0 : opMode == 0;
    }

    private boolean hasUsageStatsPermission(String str) {
        return hasUsageStatsPermission(str, Binder.getCallingUid(), Binder.getCallingPid());
    }

    private void enforceUsageStatsPermission(String str, int i, int i2, String str2) {
        if (hasUsageStatsPermission(str, i, i2)) {
            return;
        }
        throw new SecurityException("Permission denial for <" + str2 + "> from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " which requires PACKAGE_USAGE_STATS permission");
    }

    public int getPackageProcessState(final String str, String str2) {
        if (!hasUsageStatsPermission(str2)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getPackageProcessState");
        }
        final int[] iArr = {20};
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mProcessList.forEachLruProcessesLOSP(false, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda14
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.lambda$getPackageProcessState$0(iArr, str, (ProcessRecord) obj);
                    }
                });
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return iArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getPackageProcessState$0(int[] iArr, String str, ProcessRecord processRecord) {
        if (iArr[0] > processRecord.mState.getSetProcState()) {
            if (processRecord.getPkgList().containsKey(str) || (processRecord.getPkgDeps() != null && processRecord.getPkgDeps().contains(str))) {
                iArr[0] = processRecord.mState.getSetProcState();
            }
        }
    }

    public boolean setProcessMemoryTrimLevel(String str, int i, int i2) throws RemoteException {
        if (!isCallerShell()) {
            throw new SecurityException("Only shell can call it");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord findProcessLOSP = findProcessLOSP(str, i, "setProcessMemoryTrimLevel");
                if (findProcessLOSP == null) {
                    throw new IllegalArgumentException("Unknown process: " + str);
                }
                IApplicationThread thread = findProcessLOSP.getThread();
                if (thread == null) {
                    throw new IllegalArgumentException("Process has no app thread");
                }
                if (findProcessLOSP.mProfile.getTrimMemoryLevel() >= i2) {
                    throw new IllegalArgumentException("Unable to set a higher trim level than current level");
                }
                if (i2 >= 20 && findProcessLOSP.mState.getCurProcState() <= 6) {
                    throw new IllegalArgumentException("Unable to set a background trim level on a foreground process");
                }
                thread.scheduleTrimMemory(i2);
                ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        findProcessLOSP.mProfile.setTrimMemoryLevel(i2);
                    } catch (Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        return true;
    }

    void dispatchOomAdjObserver(String str) {
        OomAdjObserver oomAdjObserver;
        synchronized (this.mOomAdjObserverLock) {
            oomAdjObserver = this.mCurOomAdjObserver;
        }
        if (oomAdjObserver != null) {
            oomAdjObserver.onOomAdjMessage(str);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void setOomAdjObserver(int i, OomAdjObserver oomAdjObserver) {
        synchronized (this.mOomAdjObserverLock) {
            this.mCurOomAdjUid = i;
            this.mCurOomAdjObserver = oomAdjObserver;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void clearOomAdjObserver() {
        synchronized (this.mOomAdjObserverLock) {
            this.mCurOomAdjUid = -1;
            this.mCurOomAdjObserver = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void reportUidInfoMessageLocked(String str, String str2, int i) {
        Slog.i("ActivityManager", str2);
        synchronized (this.mOomAdjObserverLock) {
            if (this.mCurOomAdjObserver != null && i == this.mCurOomAdjUid) {
                this.mUiHandler.obtainMessage(70, str2).sendToTarget();
            }
        }
    }

    @Deprecated
    public int startActivity(IApplicationThread iApplicationThread, String str, Intent intent, String str2, IBinder iBinder, String str3, int i, int i2, ProfilerInfo profilerInfo, Bundle bundle) {
        return this.mActivityTaskManager.startActivity(iApplicationThread, str, (String) null, intent, str2, iBinder, str3, i, i2, profilerInfo, bundle);
    }

    public int startActivityWithFeature(IApplicationThread iApplicationThread, String str, String str2, Intent intent, String str3, IBinder iBinder, String str4, int i, int i2, ProfilerInfo profilerInfo, Bundle bundle) {
        return this.mActivityTaskManager.startActivity(iApplicationThread, str, str2, intent, str3, iBinder, str4, i, i2, profilerInfo, bundle);
    }

    @Deprecated
    public final int startActivityAsUser(IApplicationThread iApplicationThread, String str, Intent intent, String str2, IBinder iBinder, String str3, int i, int i2, ProfilerInfo profilerInfo, Bundle bundle, int i3) {
        return startActivityAsUserWithFeature(iApplicationThread, str, null, intent, str2, iBinder, str3, i, i2, profilerInfo, bundle, i3);
    }

    public final int startActivityAsUserWithFeature(IApplicationThread iApplicationThread, String str, String str2, Intent intent, String str3, IBinder iBinder, String str4, int i, int i2, ProfilerInfo profilerInfo, Bundle bundle, int i3) {
        return this.mActivityTaskManager.startActivityAsUser(iApplicationThread, str, str2, intent, str3, iBinder, str4, i, i2, profilerInfo, bundle, i3);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public WaitResult startActivityAndWait(IApplicationThread iApplicationThread, String str, String str2, Intent intent, String str3, IBinder iBinder, String str4, int i, int i2, ProfilerInfo profilerInfo, Bundle bundle, int i3) {
        return this.mActivityTaskManager.startActivityAndWait(iApplicationThread, str, str2, intent, str3, iBinder, str4, i, i2, profilerInfo, bundle, i3);
    }

    public final int startActivityFromRecents(int i, Bundle bundle) {
        return this.mActivityTaskManager.startActivityFromRecents(i, bundle);
    }

    public int startActivityAsUserEmpty(Bundle bundle) {
        Intent launchIntentForPackage;
        ArrayList<String> stringArrayList = bundle.getStringArrayList("start_empty_apps");
        if (stringArrayList == null || stringArrayList.size() <= 0) {
            return 1;
        }
        Iterator<String> it = stringArrayList.iterator();
        while (it.hasNext()) {
            String next = it.next();
            if (next != null) {
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        try {
                            launchIntentForPackage = this.mContext.getPackageManager().getLaunchIntentForPackage(next);
                        } catch (Exception e) {
                            if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
                                Slog.w("ActivityManager", "Exception raised trying to start app as empty " + e);
                            }
                        }
                        if (launchIntentForPackage == null) {
                            resetPriorityAfterLockedSection();
                        } else {
                            ActivityInfo resolveActivity = this.mTaskSupervisor.resolveActivity(launchIntentForPackage, (String) null, 0, (ProfilerInfo) null, 0, 0, Binder.getCallingPid());
                            if (resolveActivity == null) {
                                resetPriorityAfterLockedSection();
                            } else {
                                ProcessRecord startProcessLocked = startProcessLocked(next, resolveActivity.applicationInfo, false, 0, sNullHostingRecord, 0, false, false);
                                if (startProcessLocked != null) {
                                    updateOomAdjLocked(startProcessLocked, 0);
                                }
                                resetPriorityAfterLockedSection();
                            }
                        }
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        }
        return 1;
    }

    public final boolean finishActivity(IBinder iBinder, int i, Intent intent, int i2) {
        return ActivityClient.getInstance().finishActivity(iBinder, i, intent, i2);
    }

    public void setRequestedOrientation(IBinder iBinder, int i) {
        ActivityClient.getInstance().setRequestedOrientation(iBinder, i);
    }

    public final void finishHeavyWeightApp() {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            String str = "Permission Denial: finishHeavyWeightApp() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
            Slog.w("ActivityManager", str);
            throw new SecurityException(str);
        }
        this.mAtmInternal.finishHeavyWeightApp();
    }

    public void crashApplicationWithType(int i, int i2, String str, int i3, String str2, boolean z, int i4) {
        crashApplicationWithTypeWithExtras(i, i2, str, i3, str2, z, i4, null);
    }

    public void crashApplicationWithTypeWithExtras(int i, int i2, String str, int i3, String str2, boolean z, int i4, Bundle bundle) {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            String str3 = "Permission Denial: crashApplication() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
            Slog.w("ActivityManager", str3);
            throw new SecurityException(str3);
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mAppErrors.scheduleAppCrashLocked(i, i2, str, i3, str2, z, i4, bundle);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void handleAppDiedLocked(final ProcessRecord processRecord, int i, boolean z, boolean z2, boolean z3) {
        boolean cleanUpApplicationRecordLocked = cleanUpApplicationRecordLocked(processRecord, i, z, z2, -1, false, z3);
        this.mSocExt.onNotifyAppCrash(i, processRecord.uid, processRecord.info.packageName);
        if (!cleanUpApplicationRecordLocked && !z) {
            removeLruProcessLocked(processRecord);
            if (i > 0) {
                ProcessList.remove(i);
            }
        }
        this.mAppProfiler.onAppDiedLocked(processRecord);
        if (processRecord.info != null) {
            this.mActivityManagerServiceExt.activityPreloadHandleAppDied(processRecord.info.packageName, processRecord.info.uid, i);
        }
        this.mAtmInternal.handleAppDied(processRecord.getWindowProcessController(), z, new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda6
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.lambda$handleAppDiedLocked$1(processRecord);
            }
        });
        if (processRecord.info != null) {
            this.mActivityManagerServiceExt.handleAppDiedLocked(processRecord.info.packageName, i);
        }
        processRecord.getWrapper().getExtImpl().setExplicitDisableRestart(false);
        if (LTW_DISABLE) {
            return;
        }
        this.mActivityTaskManager.getWrapper().getExtImpl().getRemoteTaskManager().handleProcessDied(processRecord.getWindowProcessController());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$handleAppDiedLocked$1(ProcessRecord processRecord) {
        Slog.w("ActivityManager", "Crash of app " + processRecord.processName + " running instrumentation " + processRecord.getActiveInstrumentation().mClass);
        Bundle bundle = new Bundle();
        bundle.putString("shortMsg", "Process crashed.");
        finishInstrumentationLocked(processRecord, 0, bundle);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy(anyOf = {"this", "mProcLock"})
    public ProcessRecord getRecordForAppLOSP(IApplicationThread iApplicationThread) {
        if (iApplicationThread == null) {
            return null;
        }
        return getRecordForAppLOSP(iApplicationThread.asBinder());
    }

    @GuardedBy(anyOf = {"this", "mProcLock"})
    ProcessRecord getRecordForAppLOSP(IBinder iBinder) {
        if (iBinder == null) {
            return null;
        }
        ProcessRecord lRURecordForAppLOSP = this.mProcessList.getLRURecordForAppLOSP(iBinder);
        if (lRURecordForAppLOSP != null) {
            return lRURecordForAppLOSP;
        }
        ArrayMap map = this.mProcessList.getProcessNamesLOSP().getMap();
        for (int size = map.size() - 1; size >= 0; size--) {
            SparseArray sparseArray = (SparseArray) map.valueAt(size);
            for (int size2 = sparseArray.size() - 1; size2 >= 0; size2--) {
                ProcessRecord processRecord = (ProcessRecord) sparseArray.valueAt(size2);
                IApplicationThread thread = processRecord.getThread();
                if (thread != null && thread.asBinder() == iBinder) {
                    if (!processRecord.isPendingFinishAttach()) {
                        Slog.wtf("ActivityManager", "getRecordForApp: exists in name list but not in LRU list: " + processRecord);
                    }
                    return processRecord;
                }
            }
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void appDiedLocked(ProcessRecord processRecord, String str) {
        appDiedLocked(processRecord, processRecord.getPid(), processRecord.getThread(), false, str);
    }

    /* JADX WARN: Removed duplicated region for block: B:62:0x0257  */
    /* JADX WARN: Removed duplicated region for block: B:64:? A[RETURN, SYNTHETIC] */
    @GuardedBy({"this"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    final void appDiedLocked(ProcessRecord processRecord, int i, IApplicationThread iApplicationThread, boolean z, String str) {
        ProcessRecord processRecord2;
        boolean z2;
        IApplicationThread thread;
        synchronized (this.mPidsSelfLocked) {
            processRecord2 = this.mPidsSelfLocked.get(i);
        }
        if (processRecord2 != processRecord) {
            if (!z || processRecord2 == null || processRecord.processName.equals(processRecord2.processName)) {
                if (z && this.mProcessList.handleDyingAppDeathLocked(processRecord, i)) {
                    return;
                }
                Slog.w("ActivityManager", "Spurious death for " + processRecord + ", curProc for " + i + ": " + processRecord2);
                return;
            }
            Slog.w("ActivityManager", "Maybe pid is reused, dying proc : " + processRecord + ", curProc : " + processRecord2);
        }
        this.mActivityManagerServiceExt.handleProcessDied(processRecord);
        this.mBatteryStatsService.noteProcessDied(processRecord.info.uid, i);
        boolean z3 = false;
        if (!processRecord.isKilled()) {
            if (!z) {
                if (Process.getThreadGroupLeader(i) != i) {
                    Slog.w("ActivityManager", i + " is reused by others, skip kill [" + i + "]");
                } else {
                    Process.killProcessQuiet(i);
                    this.mProcessList.noteAppKill(processRecord, 13, 0, str);
                }
            }
            processRecord.killProcessGroupIfNecessaryLocked(true);
            ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    processRecord.setKilled(true);
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
        }
        int setAdj = processRecord.mState.getSetAdj();
        int setProcState = processRecord.mState.getSetProcState();
        if (processRecord.getPid() == i && (thread = processRecord.getThread()) != null && thread.asBinder() == iApplicationThread.asBinder()) {
            z2 = false;
        } else {
            z2 = z && processRecord.getPid() == 0 && processRecord.getDyingPid() > 0;
            if (!z2) {
                if (processRecord.getPid() != i) {
                    reportUidInfoMessageLocked("ActivityManager", "Process " + processRecord.processName + " (pid " + i + ") has died and restarted (pid " + processRecord.getPid() + ").", processRecord.info.uid);
                    EventLogTags.writeAmProcDied(processRecord.userId, processRecord.getPid(), processRecord.processName, setAdj, setProcState);
                } else if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
                    Slog.d(TAG_PROCESSES, "Received spurious death notification for thread " + iApplicationThread.asBinder());
                }
                if (MemoryStatUtil.hasMemcg()) {
                    FrameworkStatsLog.write(65, SystemClock.elapsedRealtime());
                    return;
                }
                return;
            }
        }
        if (z2) {
            Slog.w("ActivityManager", "Maybe pid is reused, set pid to 0, clean old process = " + processRecord + ", DeathRecipient =" + processRecord.getDeathRecipient() + ", DyingPid = " + processRecord.getDyingPid());
            i = processRecord.getPid();
        }
        int i2 = i;
        boolean z4 = processRecord.getActiveInstrumentation() == null;
        if (!processRecord.isKilledByAm()) {
            reportUidInfoMessageLocked("ActivityManager", "Process " + processRecord.processName + " (pid " + i2 + ") has died: " + ProcessList.makeOomAdjString(setAdj, true) + " " + ProcessList.makeProcStateString(setProcState), processRecord.info.uid);
            this.mAppProfiler.setAllowLowerMemLevelLocked(true);
            z3 = z4;
        } else {
            this.mAppProfiler.setAllowLowerMemLevelLocked(false);
        }
        this.mSocExt.appDiedLocked(processRecord, i2);
        EventLogTags.writeAmProcDied(processRecord.userId, i2, processRecord.processName, setAdj, setProcState);
        if (ActivityTaskManagerDebugConfig.DEBUG_CLEANUP) {
            Slog.v(TAG_CLEANUP, "Dying app: " + processRecord + ", pid: " + i2 + ", thread: " + iApplicationThread.asBinder());
        }
        handleAppDiedLocked(processRecord, i2, false, true, z);
        if (z4) {
            this.mOomAdjuster.getWrapper().setFullOomAdjUpdateInfo(processRecord.uid, processRecord.processName, null);
            updateOomAdjLocked(12);
        }
        if (z3) {
            this.mAppProfiler.doLowMemReportIfNeededLocked(processRecord);
        }
        if (MemoryStatUtil.hasMemcg()) {
        }
    }

    public boolean clearApplicationUserData(String str, boolean z, final IPackageDataObserver iPackageDataObserver, int i) {
        long j;
        IPackageManager packageManager;
        boolean z2;
        final ApplicationInfo applicationInfo;
        enforceNotIsolatedCaller("clearApplicationUserData");
        final int callingUid = Binder.getCallingUid();
        final int callingPid = Binder.getCallingPid();
        this.mActivityManagerServiceExt.hookInterceptClearUserDataIfNeeded(str);
        final int handleIncomingUser = this.mUserController.handleIncomingUser(callingPid, callingUid, i, false, 2, "clearApplicationUserData", null);
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            packageManager = AppGlobals.getPackageManager();
            if (!getPackageManagerInternal().isPackageDataProtected(handleIncomingUser, str)) {
                z2 = true;
            } else {
                if (ActivityManager.checkUidPermission("android.permission.MANAGE_USERS", callingUid) == 0) {
                    throw new SecurityException("Cannot clear data for a protected package: " + str);
                }
                z2 = false;
            }
            ApplicationInfo applicationInfo2 = null;
            if (z2) {
                try {
                    applicationInfo2 = packageManager.getApplicationInfo(str, 8192L, handleIncomingUser);
                } catch (RemoteException unused) {
                }
                z2 = (applicationInfo2 != null && applicationInfo2.uid == callingUid) || checkComponentPermission("android.permission.CLEAR_APP_USER_DATA", callingPid, callingUid, -1, true) == 0;
            }
            applicationInfo = applicationInfo2;
        } catch (Throwable th) {
            th = th;
            j = clearCallingIdentity;
        }
        try {
            if (!z2) {
                throw new SecurityException("PID " + callingPid + " does not have permission android.permission.CLEAR_APP_USER_DATA to clear data of package " + str);
            }
            boolean hasInstantApplicationMetadata = getPackageManagerInternal().hasInstantApplicationMetadata(str, handleIncomingUser);
            boolean z3 = applicationInfo == null && !hasInstantApplicationMetadata;
            boolean z4 = (applicationInfo != null && applicationInfo.isInstantApp()) || hasInstantApplicationMetadata;
            boolean z5 = checkComponentPermission("android.permission.ACCESS_INSTANT_APPS", callingPid, callingUid, -1, true) == 0;
            if (!z3 && (!z4 || z5)) {
                if (this.mActivityManagerServiceExt.forbidClearAppUserData(str, iPackageDataObserver, i)) {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                    return false;
                }
                boostPriorityForLockedSection();
                synchronized (this) {
                    if (applicationInfo != null) {
                        try {
                            forceStopPackageLocked(str, applicationInfo.uid, "clear data");
                            this.mAtmInternal.removeRecentTasksByPackageName(str, handleIncomingUser);
                        } catch (Throwable th2) {
                            th = th2;
                            while (true) {
                                try {
                                    break;
                                } catch (Throwable th3) {
                                    th = th3;
                                }
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
                resetPriorityAfterLockedSection();
                final boolean z6 = z4;
                try {
                    packageManager.clearApplicationUserData(str, new IPackageDataObserver.Stub() { // from class: com.android.server.am.ActivityManagerService.6
                        public void onRemoveCompleted(String str2, boolean z7) throws RemoteException {
                            if (applicationInfo != null) {
                                ActivityManagerService activityManagerService = ActivityManagerService.this;
                                ActivityManagerService.boostPriorityForLockedSection();
                                synchronized (activityManagerService) {
                                    try {
                                        ActivityManagerService.this.finishForceStopPackageLocked(str2, applicationInfo.uid);
                                    } catch (Throwable th4) {
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                        throw th4;
                                    }
                                }
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                            if (z7) {
                                Intent intent = new Intent("android.intent.action.PACKAGE_DATA_CLEARED", Uri.fromParts("package", str2, null));
                                intent.addFlags(16777216);
                                ApplicationInfo applicationInfo3 = applicationInfo;
                                intent.putExtra("android.intent.extra.UID", applicationInfo3 != null ? applicationInfo3.uid : -1);
                                intent.putExtra("android.intent.extra.user_handle", handleIncomingUser);
                                if (z6) {
                                    intent.putExtra("android.intent.extra.PACKAGE_NAME", str2);
                                }
                                ActivityManagerService.this.broadcastIntentInPackage("android", null, 1000, callingUid, callingPid, intent, null, null, null, 0, null, null, z6 ? "android.permission.ACCESS_INSTANT_APPS" : null, null, false, false, handleIncomingUser, BackgroundStartPrivileges.NONE, ActivityManagerService.this.mPackageManagerInt.getVisibilityAllowList(str2, handleIncomingUser));
                            }
                            IPackageDataObserver iPackageDataObserver2 = iPackageDataObserver;
                            if (iPackageDataObserver2 != null) {
                                iPackageDataObserver2.onRemoveCompleted(str2, z7);
                            }
                        }
                    }, handleIncomingUser);
                    if (applicationInfo != null) {
                        if (!z) {
                            this.mUgmInternal.removeUriPermissionsForPackage(str, handleIncomingUser, true, false);
                            INotificationManager service = NotificationManager.getService();
                            int i2 = applicationInfo.uid;
                            service.clearData(str, i2, callingUid == i2);
                        }
                        ((JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class)).cancelJobsForUid(applicationInfo.uid, true, 13, 8, "clear data");
                        ((AlarmManagerInternal) LocalServices.getService(AlarmManagerInternal.class)).removeAlarmsForUid(applicationInfo.uid);
                    }
                } catch (RemoteException unused2) {
                }
                Binder.restoreCallingIdentity(clearCallingIdentity);
                return true;
            }
            j = clearCallingIdentity;
            Slog.w("ActivityManager", "Invalid packageName: " + str);
            if (iPackageDataObserver != null) {
                try {
                    iPackageDataObserver.onRemoveCompleted(str, false);
                } catch (RemoteException unused3) {
                    Slog.i("ActivityManager", "Observer no longer exists.");
                }
            }
            Binder.restoreCallingIdentity(j);
            return false;
        } catch (Throwable th4) {
            th = th4;
            Binder.restoreCallingIdentity(j);
            throw th;
        }
    }

    /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:47:? -> B:41:0x00e9). Please report as a decompilation issue!!! */
    public void killBackgroundProcesses(String str, int i) {
        int i2;
        ActivityManagerGlobalLock activityManagerGlobalLock;
        int i3;
        int i4;
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") != 0 && checkCallingPermission("android.permission.RESTART_PACKAGES") != 0) {
            String str2 = "Permission Denial: killBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.KILL_BACKGROUND_PROCESSES";
            Slog.w("ActivityManager", str2);
            throw new SecurityException(str2);
        }
        boolean z = checkCallingPermission("android.permission.KILL_ALL_BACKGROUND_PROCESSES") == 0;
        int callingUid = Binder.getCallingUid();
        int appId = UserHandle.getAppId(callingUid);
        if (this.mActivityManagerServiceExt.killBackgroundProcessFilter(str, Binder.getCallingUid())) {
            return;
        }
        int[] expandUserId = this.mUserController.expandUserId(this.mUserController.handleIncomingUser(Binder.getCallingPid(), callingUid, i, true, 2, "killBackgroundProcesses", null));
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            IPackageManager packageManager = AppGlobals.getPackageManager();
            int length = expandUserId.length;
            int i5 = 0;
            while (i5 < length) {
                int i6 = expandUserId[i5];
                try {
                    i2 = UserHandle.getAppId(packageManager.getPackageUid(str, 268435456L, i6));
                } catch (RemoteException unused) {
                    i2 = -1;
                }
                if (i2 == -1 || (!z && i2 != appId)) {
                    Slog.w("ActivityManager", "Invalid packageName: " + str);
                    return;
                }
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
                        boostPriorityForProcLockedSection();
                        synchronized (activityManagerGlobalLock2) {
                            try {
                                activityManagerGlobalLock = activityManagerGlobalLock2;
                                i3 = i5;
                                i4 = appId;
                                try {
                                    this.mProcessList.killPackageProcessesLSP(str, i2, i6, 500, 10, 24, "kill background");
                                    resetPriorityAfterProcLockedSection();
                                } catch (Throwable th) {
                                    th = th;
                                    resetPriorityAfterProcLockedSection();
                                    throw th;
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                activityManagerGlobalLock = activityManagerGlobalLock2;
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                    } catch (Throwable th3) {
                        resetPriorityAfterLockedSection();
                        throw th3;
                    }
                }
                resetPriorityAfterLockedSection();
                i5 = i3 + 1;
                appId = i4;
            }
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void killAllBackgroundProcesses() {
        if (checkCallingPermission("android.permission.KILL_ALL_BACKGROUND_PROCESSES") != 0) {
            String str = "Permission Denial: killAllBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.KILL_ALL_BACKGROUND_PROCESSES";
            Slog.w("ActivityManager", str);
            throw new SecurityException(str);
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    this.mAppProfiler.setAllowLowerMemLevelLocked(true);
                    ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            this.mProcessList.killPackageProcessesLSP(null, -1, -1, ProcessList.CACHED_APP_MIN_ADJ, 10, 24, "kill all background");
                        } catch (Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                    this.mAppProfiler.doLowMemReportIfNeededLocked(null);
                } catch (Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    void killAllBackgroundProcessesExcept(int i, int i2) {
        if (checkCallingPermission("android.permission.KILL_ALL_BACKGROUND_PROCESSES") != 0) {
            String str = "Permission Denial: killAllBackgroundProcessesExcept() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.KILL_ALL_BACKGROUND_PROCESSES";
            Slog.w("ActivityManager", str);
            throw new SecurityException(str);
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            this.mProcessList.killAllBackgroundProcessesExceptLSP(i, i2);
                        } catch (Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                } catch (Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void stopAppForUser(String str, int i) {
        if (checkCallingPermission("android.permission.MANAGE_ACTIVITY_TASKS") != 0) {
            String str2 = "Permission Denial: stopAppForUser() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.MANAGE_ACTIVITY_TASKS";
            Slog.w("ActivityManager", str2);
            throw new SecurityException(str2);
        }
        int handleIncomingUser = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), i, true, 2, "stopAppForUser", null);
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            stopAppForUserInternal(str, handleIncomingUser);
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public boolean registerForegroundServiceObserver(IForegroundServiceObserver iForegroundServiceObserver) {
        boolean registerForegroundServiceObserverLocked;
        int callingUid = Binder.getCallingUid();
        int checkCallingPermission = checkCallingPermission("android.permission.MANAGE_ACTIVITY_TASKS");
        int checkCallingPermission2 = checkCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL");
        if (checkCallingPermission != 0 || checkCallingPermission2 != 0) {
            String str = "Permission Denial: registerForegroundServiceObserver() from pid=" + Binder.getCallingPid() + ", uid=" + callingUid + " requires android.permission.MANAGE_ACTIVITY_TASKS and android.permission.INTERACT_ACROSS_USERS_FULL";
            Slog.w("ActivityManager", str);
            throw new SecurityException(str);
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                registerForegroundServiceObserverLocked = this.mServices.registerForegroundServiceObserverLocked(callingUid, iForegroundServiceObserver);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return registerForegroundServiceObserverLocked;
    }

    public void forceStopPackage(String str, int i) {
        forceStopPackage(str, i, 0);
    }

    public void forceStopPackageEvenWhenStopping(String str, int i) {
        forceStopPackage(str, i, 1);
    }

    private void forceStopPackage(String str, int i, int i2) {
        int i3;
        int i4;
        IPackageManager iPackageManager;
        int i5;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            String str2 = "Permission Denial: forceStopPackage() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
            Slog.w("ActivityManager", str2);
            throw new SecurityException(str2);
        }
        int callingPid = Binder.getCallingPid();
        if (ActivityTaskManagerDebugConfig.DEBUG_AMS) {
            Slog.i("ActivityManager", "forceStopPackage callingPid " + callingPid + " " + Debug.getCallers(4));
        }
        int handleIncomingUser = this.mUserController.handleIncomingUser(callingPid, Binder.getCallingUid(), i, true, 2, "forceStopPackage", null);
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            IPackageManager packageManager = AppGlobals.getPackageManager();
            boostPriorityForLockedSection();
            synchronized (this) {
                int i6 = -1;
                try {
                    int[] users = handleIncomingUser == -1 ? this.mUserController.getUsers() : new int[]{handleIncomingUser};
                    int length = users.length;
                    int i7 = 0;
                    while (i7 < length) {
                        int i8 = users[i7];
                        if (getPackageManagerInternal().isPackageStateProtected(str, i8)) {
                            Slog.w("ActivityManager", "Ignoring request to force stop protected package " + str + " u" + i8);
                            resetPriorityAfterLockedSection();
                            return;
                        }
                        try {
                            i3 = packageManager.getPackageUid(str, 268435456L, i8);
                        } catch (RemoteException unused) {
                            i3 = i6;
                        }
                        if (i3 == i6) {
                            Slog.w("ActivityManager", "Invalid packageName: " + str);
                        } else {
                            try {
                                packageManager.setPackageStoppedState(str, true, i8);
                            } catch (RemoteException unused2) {
                            } catch (IllegalArgumentException e) {
                                Slog.w("ActivityManager", "Failed trying to unstop package " + str + ": " + e);
                            }
                            if (this.mUserController.isUserRunning(i8, i2)) {
                                forceStopPackageLocked(str, i3, "from pid " + callingPid);
                                finishForceStopPackageLocked(str, i3);
                                i4 = i7;
                                iPackageManager = packageManager;
                                i5 = callingPid;
                                this.mActivityManagerServiceExt.sendApplicationStopByForceStop(this.mHandler, callingPid, this.mContext, str, this.mPidsSelfLocked);
                                this.mActivityManagerServiceExt.sendForcestopInfoToPreload(str, i5, handleIncomingUser);
                                i7 = i4 + 1;
                                callingPid = i5;
                                packageManager = iPackageManager;
                                i6 = -1;
                            }
                        }
                        i4 = i7;
                        iPackageManager = packageManager;
                        i5 = callingPid;
                        i7 = i4 + 1;
                        callingPid = i5;
                        packageManager = iPackageManager;
                        i6 = -1;
                    }
                    resetPriorityAfterLockedSection();
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void addPackageDependency(String str) {
        ProcessRecord processRecord;
        if (Binder.getCallingPid() == Process.myPid()) {
            return;
        }
        int callingUid = Binder.getCallingUid();
        if (getPackageManagerInternal().filterAppAccess(str, callingUid, UserHandle.getUserId(callingUid))) {
            Slog.w("ActivityManager", "Failed trying to add dependency on non-existing package: " + str);
            return;
        }
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        if (processRecord != null) {
            ArraySet<String> pkgDeps = processRecord.getPkgDeps();
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        if (pkgDeps == null) {
                            try {
                                pkgDeps = new ArraySet<>(1);
                                processRecord.setPkgDeps(pkgDeps);
                            } catch (Throwable th) {
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                        pkgDeps.add(str);
                    }
                    resetPriorityAfterProcLockedSection();
                } catch (Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    public void killApplication(String str, int i, int i2, String str2, int i3) {
        if (str == null) {
            return;
        }
        if (i < 0) {
            Slog.w("ActivityManager", "Invalid appid specified for pkg : " + str);
            return;
        }
        int callingUid = Binder.getCallingUid();
        if (UserHandle.getAppId(callingUid) == 1000) {
            Message obtainMessage = this.mHandler.obtainMessage(22);
            obtainMessage.arg1 = i;
            obtainMessage.arg2 = i2;
            SomeArgs obtain = SomeArgs.obtain();
            obtain.arg1 = str;
            obtain.arg2 = str2;
            obtain.arg3 = Integer.valueOf(i3);
            obtainMessage.obj = obtain;
            this.mActivityManagerServiceExt.storeKillProcessObjForInstallPackageLI(obtain);
            if ("vold reset".equals(str2)) {
                this.mHandler.sendMessageAtFrontOfQueue(obtainMessage);
                return;
            } else {
                this.mHandler.sendMessage(obtainMessage);
                return;
            }
        }
        throw new SecurityException(callingUid + " cannot kill pkg: " + str);
    }

    public void closeSystemDialogs(String str) {
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slog.d("ActivityManager", "Process " + callingPid + " uid " + callingUid + " call closeSystemDialogs.");
        }
        Trace.traceBegin(64L, "closeSystemDialogs pid " + callingPid + " uid " + callingUid);
        this.mAtmInternal.closeSystemDialogs(str);
        Trace.traceEnd(64L);
    }

    /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:82:? -> B:79:0x013d). Please report as a decompilation issue!!! */
    public Debug.MemoryInfo[] getProcessMemoryInfo(int[] iArr) {
        boolean z;
        final ProcessRecord processRecord;
        ProcessProfileRecord processProfileRecord;
        int i;
        Object obj;
        long j;
        boolean z2;
        ActiveInstrumentation activeInstrumentation;
        int i2;
        ActivityManagerService activityManagerService = this;
        int[] iArr2 = iArr;
        activityManagerService.enforceNotIsolatedCaller("getProcessMemoryInfo");
        long uptimeMillis = SystemClock.uptimeMillis() - activityManagerService.mConstants.MEMORY_INFO_THROTTLE_TIME;
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        int userId = UserHandle.getUserId(callingUid);
        boolean z3 = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean isGetTasksAllowed = activityManagerService.mAtmInternal.isGetTasksAllowed("getProcessMemoryInfo", callingPid, callingUid);
        ActivityManagerGlobalLock activityManagerGlobalLock = activityManagerService.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                synchronized (activityManagerService.mPidsSelfLocked) {
                    ProcessRecord processRecord2 = activityManagerService.mPidsSelfLocked.get(callingPid);
                    z = (processRecord2 == null || (activeInstrumentation = processRecord2.getActiveInstrumentation()) == null || ((i2 = activeInstrumentation.mSourceUid) != 2000 && i2 != 0)) ? false : true;
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        Debug.MemoryInfo[] memoryInfoArr = new Debug.MemoryInfo[iArr2.length];
        int length = iArr2.length - 1;
        while (length >= 0) {
            final Debug.MemoryInfo memoryInfo = new Debug.MemoryInfo();
            memoryInfoArr[length] = memoryInfo;
            synchronized (activityManagerService.mAppProfiler.mProfilerLock) {
                synchronized (activityManagerService.mPidsSelfLocked) {
                    processRecord = activityManagerService.mPidsSelfLocked.get(iArr2[length]);
                    if (processRecord != null) {
                        ProcessProfileRecord processProfileRecord2 = processRecord.mProfile;
                        processProfileRecord = processProfileRecord2;
                        i = processProfileRecord2.getSetAdj();
                    } else {
                        processProfileRecord = null;
                        i = 0;
                    }
                }
            }
            int i3 = processRecord != null ? processRecord.uid : -1;
            int userId2 = processRecord != null ? UserHandle.getUserId(i3) : -1;
            if (callingUid == i3 || (isGetTasksAllowed && (z3 || userId2 == userId))) {
                if (processRecord != null) {
                    synchronized (activityManagerService.mAppProfiler.mProfilerLock) {
                        if (processProfileRecord.getLastMemInfoTime() >= uptimeMillis && processProfileRecord.getLastMemInfo() != null && !z) {
                            memoryInfo.set(processProfileRecord.getLastMemInfo());
                        }
                    }
                }
                long currentThreadTimeMillis = SystemClock.currentThreadTimeMillis();
                Debug.MemoryInfo memoryInfo2 = new Debug.MemoryInfo();
                Debug.getMemoryInfo(iArr2[length], memoryInfo2);
                final long currentThreadTimeMillis2 = SystemClock.currentThreadTimeMillis() - currentThreadTimeMillis;
                memoryInfo.set(memoryInfo2);
                if (processRecord != null) {
                    Object obj2 = activityManagerService.mAppProfiler.mProfilerLock;
                    synchronized (obj2) {
                        final ProcessProfileRecord processProfileRecord3 = processProfileRecord;
                        try {
                            processProfileRecord3.setLastMemInfo(memoryInfo2);
                            j = uptimeMillis;
                            processProfileRecord3.setLastMemInfoTime(SystemClock.uptimeMillis());
                            if (processProfileRecord3.getThread() == null || processProfileRecord3.getSetAdj() != i) {
                                z2 = z;
                                obj = obj2;
                            } else {
                                z2 = z;
                                processProfileRecord3.addPss(memoryInfo.getTotalPss(), memoryInfo.getTotalUss(), memoryInfo.getTotalRss(), false, 4, currentThreadTimeMillis2);
                                obj = obj2;
                                try {
                                    processRecord.getPkgList().forEachPackageProcessStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda0
                                        @Override // java.util.function.Consumer
                                        public final void accept(Object obj3) {
                                            ActivityManagerService.lambda$getProcessMemoryInfo$2(ProcessRecord.this, memoryInfo, currentThreadTimeMillis2, processProfileRecord3, (ProcessStats.ProcessStateHolder) obj3);
                                        }
                                    });
                                } catch (Throwable th2) {
                                    th = th2;
                                    throw th;
                                }
                            }
                            length--;
                            activityManagerService = this;
                            iArr2 = iArr;
                            uptimeMillis = j;
                            z = z2;
                        } catch (Throwable th3) {
                            th = th3;
                            obj = obj2;
                            throw th;
                        }
                    }
                }
            }
            j = uptimeMillis;
            z2 = z;
            length--;
            activityManagerService = this;
            iArr2 = iArr;
            uptimeMillis = j;
            z = z2;
        }
        return memoryInfoArr;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getProcessMemoryInfo$2(ProcessRecord processRecord, Debug.MemoryInfo memoryInfo, long j, ProcessProfileRecord processProfileRecord, ProcessStats.ProcessStateHolder processStateHolder) {
        ProcessState processState = processStateHolder.state;
        FrameworkStatsLog.write(18, processRecord.info.uid, processState != null ? processState.getName() : processRecord.processName, processState != null ? processState.getPackage() : processRecord.info.packageName, memoryInfo.getTotalPss(), memoryInfo.getTotalUss(), memoryInfo.getTotalRss(), 4, j, processStateHolder.appVersion, processProfileRecord.getCurrentHostingComponentTypes(), processProfileRecord.getHistoricalHostingComponentTypes());
    }

    public long[] getProcessPss(int[] iArr) {
        final ProcessRecord processRecord;
        int setAdj;
        enforceNotIsolatedCaller("getProcessPss");
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        int userId = UserHandle.getUserId(callingUid);
        int i = 0;
        boolean z = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean isGetTasksAllowed = this.mAtmInternal.isGetTasksAllowed("getProcessPss", callingPid, callingUid);
        long[] jArr = new long[iArr.length];
        int length = iArr.length - 1;
        while (length >= 0) {
            ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    synchronized (this.mPidsSelfLocked) {
                        processRecord = this.mPidsSelfLocked.get(iArr[length]);
                        setAdj = processRecord != null ? processRecord.mState.getSetAdj() : i;
                    }
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            if (isGetTasksAllowed && (z || UserHandle.getUserId(processRecord.uid) == userId)) {
                final long[] jArr2 = new long[3];
                long currentThreadTimeMillis = SystemClock.currentThreadTimeMillis();
                final long pss = Debug.getPss(iArr[length], jArr2, null);
                jArr[length] = pss;
                final long currentThreadTimeMillis2 = SystemClock.currentThreadTimeMillis() - currentThreadTimeMillis;
                if (processRecord != null) {
                    final ProcessProfileRecord processProfileRecord = processRecord.mProfile;
                    synchronized (this.mAppProfiler.mProfilerLock) {
                        if (processProfileRecord.getThread() != null && processProfileRecord.getSetAdj() == setAdj) {
                            processProfileRecord.addPss(pss, jArr2[i], jArr2[2], false, 3, currentThreadTimeMillis2);
                            processRecord.getPkgList().forEachPackageProcessStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda37
                                @Override // java.util.function.Consumer
                                public final void accept(Object obj) {
                                    ActivityManagerService.lambda$getProcessPss$3(ProcessRecord.this, pss, jArr2, currentThreadTimeMillis2, processProfileRecord, (ProcessStats.ProcessStateHolder) obj);
                                }
                            });
                        }
                    }
                } else {
                    continue;
                }
            }
            length--;
            i = 0;
        }
        return jArr;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getProcessPss$3(ProcessRecord processRecord, long j, long[] jArr, long j2, ProcessProfileRecord processProfileRecord, ProcessStats.ProcessStateHolder processStateHolder) {
        FrameworkStatsLog.write(18, processRecord.info.uid, processStateHolder.state.getName(), processStateHolder.state.getPackage(), j, jArr[0], jArr[2], 3, j2, processStateHolder.appVersion, processProfileRecord.getCurrentHostingComponentTypes(), processProfileRecord.getHistoricalHostingComponentTypes());
    }

    public void killApplicationProcess(String str, int i) {
        IApplicationThread thread;
        if (str == null) {
            return;
        }
        int callingUid = Binder.getCallingUid();
        if (callingUid == 1000 || this.mActivityManagerServiceExt.isAllowedCallerKillProcess(callingUid)) {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ProcessRecord processRecordLocked = getProcessRecordLocked(str, i);
                    if (processRecordLocked != null && (thread = processRecordLocked.getThread()) != null) {
                        try {
                            thread.scheduleSuicide();
                        } catch (RemoteException unused) {
                        }
                    } else {
                        Slog.w("ActivityManager", "Process/uid not found attempting kill of " + str + " / " + i);
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new SecurityException(callingUid + " cannot kill app process: " + str);
    }

    @GuardedBy({"this"})
    private void forceStopPackageLocked(String str, int i, String str2) {
        forceStopPackageLocked(str, UserHandle.getAppId(i), false, false, true, false, false, UserHandle.getUserId(i), str2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    @GuardedBy({"this"})
    public void finishForceStopPackageLocked(String str, int i) {
        Intent intent = new Intent("android.intent.action.PACKAGE_RESTARTED", Uri.fromParts("package", str, null));
        if (!this.mProcessesReady) {
            intent.addFlags(1342177280);
        }
        int userId = UserHandle.getUserId(i);
        int[] visibilityAllowList = getPackageManagerInternal().getVisibilityAllowList(str, userId);
        intent.putExtra("android.intent.extra.UID", i);
        intent.putExtra("android.intent.extra.user_handle", userId);
        broadcastIntentLocked(null, null, null, intent, null, null, null, 0, null, null, null, null, null, -1, null, false, false, MY_PID, 1000, Binder.getCallingUid(), Binder.getCallingPid(), userId, BackgroundStartPrivileges.NONE, visibilityAllowList, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void cleanupDisabledPackageComponentsLocked(String str, int i, String[] strArr) {
        ArraySet arraySet;
        IPackageManager packageManager = AppGlobals.getPackageManager();
        if (strArr == null) {
            return;
        }
        int length = strArr.length - 1;
        boolean z = false;
        ArraySet arraySet2 = null;
        while (true) {
            if (length < 0) {
                arraySet = arraySet2;
                break;
            }
            String str2 = strArr[length];
            if (str2.equals(str)) {
                try {
                    int applicationEnabledSetting = packageManager.getApplicationEnabledSetting(str, i != -1 ? i : 0);
                    z = (applicationEnabledSetting == 1 || applicationEnabledSetting == 0) ? false : true;
                    if (z) {
                        arraySet = null;
                        break;
                    }
                } catch (Exception unused) {
                    return;
                }
            } else {
                try {
                    int componentEnabledSetting = packageManager.getComponentEnabledSetting(new ComponentName(str, str2), i != -1 ? i : 0);
                    if (componentEnabledSetting != 1 && componentEnabledSetting != 0) {
                        if (arraySet2 == null) {
                            arraySet2 = new ArraySet(strArr.length);
                        }
                        arraySet2.add(str2);
                    }
                } catch (Exception unused2) {
                    return;
                }
            }
            length--;
        }
        if (z || arraySet != null) {
            this.mActivityManagerServiceExt.handlePackageDisabled(str, i, z);
            this.mAtmInternal.cleanupDisabledPackageComponents(str, arraySet, i, this.mBooted);
            ArraySet arraySet3 = arraySet;
            this.mServices.bringDownDisabledPackageServicesLocked(str, arraySet3, i, false, false, true);
            ArrayList<ContentProviderRecord> arrayList = new ArrayList<>();
            this.mCpHelper.getProviderMap().collectPackageProvidersLocked(str, (Set<String>) arraySet3, true, false, i, arrayList);
            for (int size = arrayList.size() - 1; size >= 0; size--) {
                this.mCpHelper.removeDyingProviderLocked(null, arrayList.get(size), true);
            }
            for (int length2 = this.mBroadcastQueues.length - 1; length2 >= 0; length2--) {
                this.mBroadcastQueues[length2].cleanupDisabledPackageReceiversLocked(str, arraySet, i);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final boolean clearBroadcastQueueForUserLocked(int i) {
        boolean z = false;
        for (int length = this.mBroadcastQueues.length - 1; length >= 0; length--) {
            z |= this.mBroadcastQueues[length].cleanupDisabledPackageReceiversLocked(null, null, i);
        }
        return z;
    }

    @GuardedBy({"this"})
    final void forceStopAppZygoteLocked(String str, int i, int i2) {
        if (str == null) {
            return;
        }
        if (i < 0) {
            i = UserHandle.getAppId(getPackageManagerInternal().getPackageUid(str, 272629760L, 0));
        }
        this.mProcessList.killAppZygotesLocked(str, i, i2, true);
    }

    void stopAppForUserInternal(String str, int i) {
        int packageUid = getPackageManagerInternal().getPackageUid(str, 272629760L, i);
        if (packageUid < 0) {
            Slog.w("ActivityManager", "Asked to stop " + str + "/u" + i + " but does not exist in that user");
            return;
        }
        if (getPackageManagerInternal().isPackageStateProtected(str, i)) {
            Slog.w("ActivityManager", "Asked to stop " + str + "/u" + i + " but it is protected");
            return;
        }
        Slog.i("ActivityManager", "Stopping app for user: " + str + "/" + i);
        this.mSocExt.updateForceStopKillFlag();
        int appId = UserHandle.getAppId(packageUid);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                try {
                    synchronized (activityManagerGlobalLock) {
                        try {
                            this.mAtmInternal.onForceStopPackage(str, true, false, i);
                            this.mProcessList.killPackageProcessesLSP(str, appId, i, -10000, true, false, true, false, true, false, 10, 23, "fully stop " + str + "/" + i + " by user request");
                            resetPriorityAfterProcLockedSection();
                            this.mServices.bringDownDisabledPackageServicesLocked(str, null, i, false, true, true);
                            if (this.mBooted) {
                                this.mAtmInternal.resumeTopActivities(true);
                            }
                        } catch (Throwable th) {
                            th = th;
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                } catch (Throwable th2) {
                    th = th2;
                }
            } catch (Throwable th3) {
                resetPriorityAfterLockedSection();
                throw th3;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final boolean forceStopPackageLocked(String str, int i, boolean z, boolean z2, boolean z3, boolean z4, boolean z5, int i2, String str2) {
        return forceStopPackageLocked(str, i, z, z2, z3, z4, z5, i2, str2, str == null ? 11 : 10);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r8v2 */
    /* JADX WARN: Type inference failed for: r8v3, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r8v4 */
    @GuardedBy({"this"})
    final boolean forceStopPackageLocked(String str, int i, boolean z, boolean z2, boolean z3, boolean z4, boolean z5, int i2, String str2, int i3) {
        StringBuilder sb;
        ?? r8;
        String str3;
        int i4;
        AttributeCache instance;
        if (i2 == -1 && str == null) {
            Slog.w("ActivityManager", "Can't force stop all processes of all users, that is insane!");
        }
        int appId = (i >= 0 || str == null) ? i : UserHandle.getAppId(getPackageManagerInternal().getPackageUid(str, 272629760L, 0));
        String updateStopReasonIfNeeded = this.mActivityManagerServiceExt.updateStopReasonIfNeeded(str2);
        if (z3) {
            if (str != null) {
                Slog.i("ActivityManager", "Force stopping " + str + " appid=" + appId + " user=" + i2 + ": " + updateStopReasonIfNeeded);
            } else {
                Slog.i("ActivityManager", "Force stopping u" + i2 + ": " + updateStopReasonIfNeeded);
            }
            this.mAppErrors.resetProcessCrashTime(str == null, appId, i2);
        }
        this.mSocExt.updateForceStopKillFlag();
        this.mActivityManagerServiceExt.handleForceStopPackage(str, i2);
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                try {
                    boolean onForceStopPackage = this.mAtmInternal.onForceStopPackage(str, z3, z4, i2);
                    int i5 = i3 == 10 ? 21 : 0;
                    ProcessList processList = this.mProcessList;
                    StringBuilder sb2 = new StringBuilder();
                    if (str == null) {
                        sb = new StringBuilder();
                        sb.append("stop user ");
                        sb.append(i2);
                    } else {
                        sb = new StringBuilder();
                        sb.append("stop ");
                        sb.append(str);
                    }
                    sb2.append(sb.toString());
                    sb2.append(" due to ");
                    sb2.append(updateStopReasonIfNeeded);
                    int i6 = appId;
                    boolean killPackageProcessesLSP = onForceStopPackage | processList.killPackageProcessesLSP(str, appId, i2, -10000, z, false, z3, z4, true, z5, i3, i5, sb2.toString());
                    resetPriorityAfterProcLockedSection();
                    if (!this.mServices.bringDownDisabledPackageServicesLocked(str, null, i2, z4, true, z3)) {
                        r8 = 1;
                        str3 = str;
                    } else {
                        if (!z3) {
                            return true;
                        }
                        r8 = 1;
                        str3 = str;
                        killPackageProcessesLSP = true;
                    }
                    if (str3 == null) {
                        i4 = i2;
                        this.mStickyBroadcasts.remove(i4);
                    } else {
                        i4 = i2;
                    }
                    ArrayList<ContentProviderRecord> arrayList = new ArrayList<>();
                    if (this.mCpHelper.getProviderMap().collectPackageProvidersLocked(str, (Set<String>) null, z3, z4, i2, arrayList)) {
                        if (!z3) {
                            return r8;
                        }
                        killPackageProcessesLSP = r8;
                    }
                    for (int size = arrayList.size() - r8; size >= 0; size--) {
                        this.mCpHelper.removeDyingProviderLocked(null, arrayList.get(size), r8);
                    }
                    this.mUgmInternal.removeUriPermissionsForPackage(str3, i4, false, false);
                    if (z3) {
                        for (int length = this.mBroadcastQueues.length - r8; length >= 0; length--) {
                            killPackageProcessesLSP |= this.mBroadcastQueues[length].cleanupDisabledPackageReceiversLocked(str3, null, i4);
                        }
                    }
                    if (str3 == null || z5) {
                        killPackageProcessesLSP |= this.mPendingIntentController.removePendingIntentsForPackage(str3, i4, i6, z3);
                    }
                    if (z3) {
                        if (z2 && str3 != null && (instance = AttributeCache.instance()) != null) {
                            instance.removePackage(str3);
                        }
                        if (this.mBooted) {
                            this.mAtmInternal.resumeTopActivities((boolean) r8);
                        }
                    }
                    return killPackageProcessesLSP;
                } catch (Throwable th) {
                    th = th;
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void handleProcessStartOrKillTimeoutLocked(ProcessRecord processRecord, boolean z) {
        int pid = processRecord.getPid();
        if (z || removePidLocked(pid, processRecord)) {
            if (z) {
                ProcessRecord processRecord2 = processRecord.mSuccessor;
                if (processRecord2 == null) {
                    return;
                }
                Slog.wtf("ActivityManager", processRecord.toString() + " " + processRecord.getDyingPid() + " refused to die while trying to launch " + processRecord2 + ", cancelling the process start");
                processRecord.mSuccessorStartRunnable = null;
                processRecord.mSuccessor = null;
                processRecord2.mPredecessor = null;
                processRecord = processRecord2;
            } else {
                String str = "Process " + processRecord + " failed to attach";
                Slog.w("ActivityManager", str);
                EventLogTags.writeAmProcessStartTimeout(processRecord.userId, pid, processRecord.uid, processRecord.processName);
                if (processRecord.getActiveInstrumentation() != null) {
                    Bundle bundle = new Bundle();
                    bundle.putString("shortMsg", "failed to attach");
                    bundle.putString("longMsg", str);
                    finishInstrumentationLocked(processRecord, 0, bundle);
                }
            }
            ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    this.mProcessList.removeProcessNameLocked(processRecord.processName, processRecord.uid);
                    this.mAtmInternal.clearHeavyWeightProcessIfEquals(processRecord.getWindowProcessController());
                    this.mCpHelper.cleanupAppInLaunchingProvidersLocked(processRecord, true);
                    this.mServices.processStartTimedOutLocked(processRecord);
                    for (BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
                        broadcastQueue.onApplicationTimeoutLocked(processRecord);
                    }
                    if (!z) {
                        this.mBatteryStatsService.noteProcessFinish(processRecord.processName, processRecord.info.uid);
                        processRecord.killLocked("start timeout", 7, true);
                        removeLruProcessLocked(processRecord);
                        processRecord.makeInactive(this.mProcessStats);
                    }
                    if (processRecord.isolated) {
                        this.mBatteryStatsService.removeIsolatedUid(processRecord.uid, processRecord.info.uid);
                        this.mProcessList.mAppExitInfoTracker.mIsolatedUidRecords.removeIsolatedUid(processRecord.uid, processRecord.info.uid);
                        getPackageManagerInternal().removeIsolatedUid(processRecord.uid);
                        this.mActivityManagerServiceExt.removeIsolatedUid(processRecord.uid, processRecord.info.uid, processRecord.info.packageName);
                    }
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            BackupRecord backupRecord = this.mBackupTargets.get(processRecord.userId);
            if (z || backupRecord == null || backupRecord.app.getPid() != pid) {
                return;
            }
            Slog.w("ActivityManager", "Unattached app died before backup, skipping");
            final int i = processRecord.userId;
            final String str2 = processRecord.info.packageName;
            this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.7
                @Override // java.lang.Runnable
                public void run() {
                    try {
                        IBackupManager.Stub.asInterface(ServiceManager.getService(HostingRecord.HOSTING_TYPE_BACKUP)).agentDisconnectedForUser(i, str2);
                    } catch (RemoteException unused) {
                    }
                }
            });
            return;
        }
        Slog.w("ActivityManager", "Spurious process start timeout - pid not known for " + processRecord);
    }

    /* JADX WARN: Removed duplicated region for block: B:137:0x0374 A[Catch: Exception -> 0x0527, TryCatch #10 {Exception -> 0x0527, blocks: (B:210:0x0328, B:212:0x0332, B:130:0x0345, B:132:0x0351, B:134:0x035b, B:135:0x036a, B:137:0x0374, B:138:0x037d, B:140:0x03ad, B:141:0x03b2, B:143:0x03bc, B:145:0x0494, B:146:0x0497, B:147:0x04a1, B:151:0x04af, B:152:0x04c4, B:156:0x04d0, B:158:0x04d9, B:160:0x04e1, B:161:0x04f7, B:193:0x03d1, B:198:0x0401, B:200:0x0438, B:205:0x046a), top: B:209:0x0328 }] */
    /* JADX WARN: Removed duplicated region for block: B:140:0x03ad A[Catch: Exception -> 0x0527, TryCatch #10 {Exception -> 0x0527, blocks: (B:210:0x0328, B:212:0x0332, B:130:0x0345, B:132:0x0351, B:134:0x035b, B:135:0x036a, B:137:0x0374, B:138:0x037d, B:140:0x03ad, B:141:0x03b2, B:143:0x03bc, B:145:0x0494, B:146:0x0497, B:147:0x04a1, B:151:0x04af, B:152:0x04c4, B:156:0x04d0, B:158:0x04d9, B:160:0x04e1, B:161:0x04f7, B:193:0x03d1, B:198:0x0401, B:200:0x0438, B:205:0x046a), top: B:209:0x0328 }] */
    /* JADX WARN: Removed duplicated region for block: B:143:0x03bc A[Catch: Exception -> 0x0527, TryCatch #10 {Exception -> 0x0527, blocks: (B:210:0x0328, B:212:0x0332, B:130:0x0345, B:132:0x0351, B:134:0x035b, B:135:0x036a, B:137:0x0374, B:138:0x037d, B:140:0x03ad, B:141:0x03b2, B:143:0x03bc, B:145:0x0494, B:146:0x0497, B:147:0x04a1, B:151:0x04af, B:152:0x04c4, B:156:0x04d0, B:158:0x04d9, B:160:0x04e1, B:161:0x04f7, B:193:0x03d1, B:198:0x0401, B:200:0x0438, B:205:0x046a), top: B:209:0x0328 }] */
    /* JADX WARN: Removed duplicated region for block: B:145:0x0494 A[Catch: Exception -> 0x0527, TryCatch #10 {Exception -> 0x0527, blocks: (B:210:0x0328, B:212:0x0332, B:130:0x0345, B:132:0x0351, B:134:0x035b, B:135:0x036a, B:137:0x0374, B:138:0x037d, B:140:0x03ad, B:141:0x03b2, B:143:0x03bc, B:145:0x0494, B:146:0x0497, B:147:0x04a1, B:151:0x04af, B:152:0x04c4, B:156:0x04d0, B:158:0x04d9, B:160:0x04e1, B:161:0x04f7, B:193:0x03d1, B:198:0x0401, B:200:0x0438, B:205:0x046a), top: B:209:0x0328 }] */
    /* JADX WARN: Removed duplicated region for block: B:148:0x04a2 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:192:0x03cf  */
    /* JADX WARN: Removed duplicated region for block: B:207:0x037b  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x00f5  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x012d  */
    @GuardedBy({"this"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void attachApplicationLocked(IApplicationThread iApplicationThread, int i, int i2, long j) {
        long j2;
        int i3;
        ProcessRecord processRecord;
        int i4;
        boolean z;
        AutofillOptions autofillOptions;
        PlatformCompat platformCompat;
        int i5;
        long j3;
        boolean z2;
        long j4;
        boolean z3;
        ActivityManagerGlobalLock activityManagerGlobalLock;
        ContentCaptureManagerInternal contentCaptureManagerInternal;
        int i6;
        boolean z4;
        int i7;
        ProcessRecord processRecord2;
        ProcessRecord processRecord3;
        long uptimeMillis = SystemClock.uptimeMillis();
        int i8 = MY_PID;
        if (i == i8 || i < 0) {
            j2 = uptimeMillis;
            i3 = i8;
        } else {
            synchronized (this.mPidsSelfLocked) {
                processRecord3 = this.mPidsSelfLocked.get(i);
            }
            if (processRecord3 != null && (processRecord3.getStartUid() != i2 || processRecord3.getStartSeq() != j)) {
                ProcessRecord processRecord4 = this.mProcessList.mPendingStarts.get(j);
                String str = "attachApplicationLocked process:" + (processRecord4 != null ? processRecord4.processName : null) + " startSeq:" + j + " pid:" + i + " belongs to another existing app:" + processRecord3.processName + " startSeq:" + processRecord3.getStartSeq();
                Slog.wtf("ActivityManager", str);
                EventLog.writeEvent(1397638484, "131105245", Integer.valueOf(processRecord3.getStartUid()), str);
                j2 = uptimeMillis;
                i3 = i8;
                cleanUpApplicationRecordLocked(processRecord3, i, false, false, -1, true, false);
                removePidLocked(i, processRecord3);
            } else {
                j2 = uptimeMillis;
                i3 = i8;
                processRecord = processRecord3;
                if (processRecord == null && j > 0 && (processRecord2 = this.mProcessList.mPendingStarts.get(j)) != null && processRecord2.getStartUid() == i2 && processRecord2.getStartSeq() == j && this.mProcessList.handleProcessStartedLocked(processRecord2, i, processRecord2.isUsingWrapper(), j, true)) {
                    processRecord = processRecord2;
                }
                if (processRecord != null) {
                    Slog.w("ActivityManager", "No pending application record for pid " + i + " (IApplicationThread " + iApplicationThread + "); dropping process");
                    EventLogTags.writeAmDropProcess(i);
                    if (i > 0 && i != i3 && Process.getThreadGroupLeader(i) == i) {
                        Process.killProcessQuiet(i);
                        return;
                    } else {
                        try {
                            iApplicationThread.scheduleExit();
                            return;
                        } catch (Exception unused) {
                            return;
                        }
                    }
                }
                if (processRecord.getThread() != null) {
                    handleAppDiedLocked(processRecord, i, true, true, false);
                }
                if (ActivityManagerDebugConfig.DEBUG_ALL) {
                    Slog.v("ActivityManager", "Binding process pid " + i + " to record " + processRecord);
                }
                String str2 = processRecord.processName;
                try {
                    AppDeathRecipient appDeathRecipient = new AppDeathRecipient(processRecord, i, iApplicationThread);
                    iApplicationThread.asBinder().linkToDeath(appDeathRecipient, 0);
                    processRecord.setDeathRecipient(appDeathRecipient);
                    this.mActivityManagerServiceExt.addProxyBinder(iApplicationThread.asBinder(), i2, i);
                    EventLogTags.writeAmProcBound(processRecord.userId, i, processRecord.processName);
                    this.mSocExt.perfHint(processRecord, i);
                    ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock2) {
                        try {
                            processRecord.mState.setCurAdj(-10000);
                            processRecord.mState.setSetAdj(-10000);
                            processRecord.mState.setVerifiedAdj(-10000);
                            this.mOomAdjuster.setAttachingSchedGroupLSP(processRecord);
                            processRecord.mState.setForcingToImportant(null);
                            clearProcessForegroundLocked(processRecord);
                            processRecord.mState.setHasShownUi(false);
                            processRecord.mState.setCached(false);
                            processRecord.setDebugging(false);
                            processRecord.setKilledByAm(false);
                            processRecord.setKilled(false);
                            processRecord.setUnlocked(StorageManager.isUserKeyUnlocked(processRecord.userId));
                        } finally {
                            resetPriorityAfterProcLockedSection();
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                    boolean z5 = this.mProcessesReady || isAllowedWhileBooting(processRecord.info);
                    List<ProviderInfo> generateApplicationProvidersLocked = z5 ? this.mCpHelper.generateApplicationProvidersLocked(processRecord) : null;
                    if (generateApplicationProvidersLocked != null && this.mCpHelper.checkAppInLaunchingProvidersLocked(processRecord)) {
                        Message obtainMessage = this.mHandler.obtainMessage(57);
                        obtainMessage.obj = processRecord;
                        this.mHandler.sendMessageDelayed(obtainMessage, ContentResolver.CONTENT_PROVIDER_PUBLISH_TIMEOUT_MILLIS);
                    }
                    long j5 = j2;
                    checkTime(j5, "attachApplicationLocked: before bindApplication");
                    if (!z5) {
                        Slog.i("ActivityManager", "Launching preboot mode app: " + processRecord);
                    }
                    if (ActivityManagerDebugConfig.DEBUG_ALL) {
                        Slog.v("ActivityManager", "New app record " + processRecord + " thread=" + iApplicationThread.asBinder() + " pid=" + i);
                    }
                    BackupRecord backupRecord = this.mBackupTargets.get(processRecord.userId);
                    try {
                        String str3 = this.mDebugApp;
                        if (str3 == null || !str3.equals(str2)) {
                            i4 = 0;
                        } else {
                            if (this.mWaitForDebugger) {
                                i7 = this.mSuspendUponWait ? 3 : 2;
                                z4 = true;
                            } else {
                                z4 = true;
                                i7 = 1;
                            }
                            processRecord.setDebugging(z4);
                            if (this.mDebugTransient) {
                                this.mDebugApp = this.mOrigDebugApp;
                                this.mWaitForDebugger = this.mOrigWaitForDebugger;
                            }
                            i4 = i7;
                        }
                        ActivityManagerGlobalLock activityManagerGlobalLock3 = this.mProcLock;
                        boostPriorityForProcLockedSection();
                        synchronized (activityManagerGlobalLock3) {
                            try {
                                try {
                                    String str4 = this.mTrackAllocationApp;
                                    if (str4 == null || !str4.equals(str2)) {
                                        z = false;
                                    } else {
                                        this.mTrackAllocationApp = null;
                                        z = true;
                                    }
                                } catch (Throwable th) {
                                    th = th;
                                    while (true) {
                                        try {
                                            break;
                                        } catch (Throwable th2) {
                                            th = th2;
                                        }
                                    }
                                    resetPriorityAfterProcLockedSection();
                                    throw th;
                                }
                            } catch (Exception e) {
                                e = e;
                            }
                        }
                        resetPriorityAfterProcLockedSection();
                        boolean z6 = backupRecord != null && backupRecord.appInfo.packageName.equals(str2) && backupRecord.appInfo.uid >= 10000 && ((i6 = backupRecord.backupMode) == 3 || i6 == 1);
                        ActiveInstrumentation activeInstrumentation = processRecord.getActiveInstrumentation();
                        if (activeInstrumentation != null) {
                            notifyPackageUse(activeInstrumentation.mClass.getPackageName(), 7);
                        }
                        if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled) {
                            ProtoLogImpl.v(ProtoLogGroup.WM_DEBUG_CONFIGURATION, -593535526, 0, (String) null, new Object[]{String.valueOf(str2), String.valueOf(processRecord.getWindowProcessController().getConfiguration())});
                        }
                        ApplicationInfo applicationInfo = activeInstrumentation != null ? activeInstrumentation.mTargetInfo : processRecord.info;
                        processRecord.setCompat(compatibilityInfoForPackage(applicationInfo));
                        ProfilerInfo profilerInfo = this.mAppProfiler.setupProfilerInfoLocked(iApplicationThread, processRecord, activeInstrumentation);
                        String str5 = (applicationInfo.isInstantApp() || applicationInfo.targetSdkVersion >= 28) ? "unknown" : sTheRealBuildSerial;
                        if (UserHandle.getAppId(processRecord.info.uid) >= 10000) {
                            try {
                                AutofillManagerInternal autofillManagerInternal = (AutofillManagerInternal) LocalServices.getService(AutofillManagerInternal.class);
                                if (autofillManagerInternal != null) {
                                    autofillOptions = autofillManagerInternal.getAutofillOptions(processRecord.info.packageName, processRecord.info.longVersionCode, processRecord.userId);
                                    ContentCaptureOptions optionsForPackage = (UserHandle.getAppId(processRecord.info.uid) >= 10000 || (contentCaptureManagerInternal = (ContentCaptureManagerInternal) LocalServices.getService(ContentCaptureManagerInternal.class)) == null) ? null : contentCaptureManagerInternal.getOptionsForPackage(processRecord.userId, processRecord.info.packageName);
                                    FontManagerInternal fontManagerInternal = (FontManagerInternal) LocalServices.getService(FontManagerInternal.class);
                                    SharedMemory serializedSystemFontMap = fontManagerInternal == null ? fontManagerInternal.getSerializedSystemFontMap() : null;
                                    checkTime(j5, "attachApplicationLocked: immediately before bindApplication");
                                    long uptimeMillis2 = SystemClock.uptimeMillis();
                                    Configuration configuration = new Configuration();
                                    Bundle coreSettingsLocked = this.mCoreSettingsObserver.getCoreSettingsLocked();
                                    this.mAtmInternal.preBindApplication(processRecord.getWindowProcessController(), configuration, coreSettingsLocked);
                                    this.mActivityManagerServiceExt.preBindApplicationInfo(processRecord.getWindowProcessController(), applicationInfo);
                                    ActiveInstrumentation activeInstrumentation2 = processRecord.getActiveInstrumentation();
                                    platformCompat = this.mPlatformCompat;
                                    if (platformCompat != null) {
                                        platformCompat.resetReporting(processRecord.info);
                                    }
                                    ProviderInfoList fromList = ProviderInfoList.fromList(generateApplicationProvidersLocked);
                                    if (processRecord.getIsolatedEntryPoint() == null) {
                                        iApplicationThread.runIsolatedEntryPoint(processRecord.getIsolatedEntryPoint(), processRecord.getIsolatedEntryPointArgs());
                                        i5 = i2;
                                        j3 = uptimeMillis2;
                                        j4 = j5;
                                    } else if (activeInstrumentation2 != null) {
                                        Configuration configuration2 = new Configuration(processRecord.getWindowProcessController().getConfiguration());
                                        this.mActivityManagerServiceExt.setConfiguration(configuration2, configuration);
                                        String str6 = processRecord.sdkSandboxClientAppVolumeUuid;
                                        String str7 = processRecord.sdkSandboxClientAppPackage;
                                        ComponentName componentName = activeInstrumentation2.mClass;
                                        Bundle bundle = activeInstrumentation2.mArguments;
                                        IInstrumentationWatcher iInstrumentationWatcher = activeInstrumentation2.mWatcher;
                                        IUiAutomationConnection iUiAutomationConnection = activeInstrumentation2.mUiAutomationConnection;
                                        boolean z7 = this.mBinderTransactionTrackingEnabled;
                                        if (!z6 && z5) {
                                            z3 = false;
                                            j4 = j5;
                                            j3 = uptimeMillis2;
                                            iApplicationThread.bindApplication(str2, applicationInfo, str6, str7, fromList, componentName, profilerInfo, bundle, iInstrumentationWatcher, iUiAutomationConnection, i4, z7, z, z3, processRecord.isPersistent(), configuration2, processRecord.getCompat(), getCommonServicesLocked(processRecord.isolated), coreSettingsLocked, str5, autofillOptions, optionsForPackage, processRecord.getDisabledCompatChanges(), serializedSystemFontMap, processRecord.getStartElapsedTime(), processRecord.getStartUptime());
                                            i5 = i2;
                                        }
                                        z3 = true;
                                        j4 = j5;
                                        j3 = uptimeMillis2;
                                        iApplicationThread.bindApplication(str2, applicationInfo, str6, str7, fromList, componentName, profilerInfo, bundle, iInstrumentationWatcher, iUiAutomationConnection, i4, z7, z, z3, processRecord.isPersistent(), configuration2, processRecord.getCompat(), getCommonServicesLocked(processRecord.isolated), coreSettingsLocked, str5, autofillOptions, optionsForPackage, processRecord.getDisabledCompatChanges(), serializedSystemFontMap, processRecord.getStartElapsedTime(), processRecord.getStartUptime());
                                        i5 = i2;
                                    } else {
                                        i5 = i2;
                                        j3 = uptimeMillis2;
                                        Configuration configuration3 = new Configuration(processRecord.getWindowProcessController().getConfiguration());
                                        this.mActivityManagerServiceExt.setConfiguration(configuration3, configuration);
                                        String str8 = processRecord.sdkSandboxClientAppVolumeUuid;
                                        String str9 = processRecord.sdkSandboxClientAppPackage;
                                        boolean z8 = this.mBinderTransactionTrackingEnabled;
                                        if (!z6 && z5) {
                                            z2 = false;
                                            j4 = j5;
                                            iApplicationThread.bindApplication(str2, applicationInfo, str8, str9, fromList, (ComponentName) null, profilerInfo, (Bundle) null, (IInstrumentationWatcher) null, (IUiAutomationConnection) null, i4, z8, z, z2, processRecord.isPersistent(), configuration3, processRecord.getCompat(), getCommonServicesLocked(processRecord.isolated), coreSettingsLocked, str5, autofillOptions, optionsForPackage, processRecord.getDisabledCompatChanges(), serializedSystemFontMap, processRecord.getStartElapsedTime(), processRecord.getStartUptime());
                                        }
                                        z2 = true;
                                        j4 = j5;
                                        iApplicationThread.bindApplication(str2, applicationInfo, str8, str9, fromList, (ComponentName) null, profilerInfo, (Bundle) null, (IInstrumentationWatcher) null, (IUiAutomationConnection) null, i4, z8, z, z2, processRecord.isPersistent(), configuration3, processRecord.getCompat(), getCommonServicesLocked(processRecord.isolated), coreSettingsLocked, str5, autofillOptions, optionsForPackage, processRecord.getDisabledCompatChanges(), serializedSystemFontMap, processRecord.getStartElapsedTime(), processRecord.getStartUptime());
                                    }
                                    if (profilerInfo != null) {
                                        profilerInfo.closeFd();
                                    }
                                    processRecord.setBindApplicationTime(j3);
                                    activityManagerGlobalLock = this.mProcLock;
                                    boostPriorityForProcLockedSection();
                                    synchronized (activityManagerGlobalLock) {
                                        try {
                                            processRecord.makeActive(iApplicationThread, this.mProcessStats);
                                            checkTime(j4, "attachApplicationLocked: immediately after bindApplication");
                                        } catch (Throwable th3) {
                                            th = th3;
                                            while (true) {
                                                try {
                                                    break;
                                                } catch (Throwable th4) {
                                                    th = th4;
                                                }
                                            }
                                            throw th;
                                        }
                                    }
                                    resetPriorityAfterProcLockedSection();
                                    updateLruProcessLocked(processRecord, false, null);
                                    checkTime(j4, "attachApplicationLocked: after updateLruProcessLocked");
                                    long uptimeMillis3 = SystemClock.uptimeMillis();
                                    synchronized (this.mAppProfiler.mProfilerLock) {
                                        try {
                                            processRecord.mProfile.setLastRequestedGc(uptimeMillis3);
                                            processRecord.mProfile.setLastLowMemory(uptimeMillis3);
                                        } catch (Throwable th5) {
                                            th = th5;
                                            while (true) {
                                                try {
                                                    break;
                                                } catch (Throwable th6) {
                                                    th = th6;
                                                }
                                            }
                                            throw th;
                                        }
                                    }
                                    this.mPersistentStartingProcesses.remove(processRecord);
                                    if (ActivityManagerDebugConfig.DEBUG_PROCESSES && this.mProcessesOnHold.contains(processRecord)) {
                                        Slog.v(TAG_PROCESSES, "Attach application locked removing on hold: " + processRecord);
                                    }
                                    this.mProcessesOnHold.remove(processRecord);
                                    if (!this.mConstants.mEnableWaitForFinishAttachApplication) {
                                        finishAttachApplicationInner(j, i5, i);
                                    } else {
                                        processRecord.setPendingFinishAttach(true);
                                    }
                                    this.mActivityManagerServiceExt.hookAttachApplicationLocked(processRecord);
                                    return;
                                }
                            } catch (Exception e2) {
                                e = e2;
                                Slog.wtf("ActivityManager", "Exception thrown during bind of " + processRecord, e);
                                processRecord.resetPackageList(this.mProcessStats);
                                processRecord.unlinkDeathRecipient();
                                processRecord.killLocked("error during bind", 7, true);
                                handleAppDiedLocked(processRecord, i, false, true, false);
                                return;
                            }
                        }
                        autofillOptions = null;
                        if (UserHandle.getAppId(processRecord.info.uid) >= 10000) {
                        }
                        FontManagerInternal fontManagerInternal2 = (FontManagerInternal) LocalServices.getService(FontManagerInternal.class);
                        if (fontManagerInternal2 == null) {
                        }
                        checkTime(j5, "attachApplicationLocked: immediately before bindApplication");
                        long uptimeMillis22 = SystemClock.uptimeMillis();
                        Configuration configuration4 = new Configuration();
                        Bundle coreSettingsLocked2 = this.mCoreSettingsObserver.getCoreSettingsLocked();
                        this.mAtmInternal.preBindApplication(processRecord.getWindowProcessController(), configuration4, coreSettingsLocked2);
                        this.mActivityManagerServiceExt.preBindApplicationInfo(processRecord.getWindowProcessController(), applicationInfo);
                        ActiveInstrumentation activeInstrumentation22 = processRecord.getActiveInstrumentation();
                        platformCompat = this.mPlatformCompat;
                        if (platformCompat != null) {
                        }
                        ProviderInfoList fromList2 = ProviderInfoList.fromList(generateApplicationProvidersLocked);
                        if (processRecord.getIsolatedEntryPoint() == null) {
                        }
                        if (profilerInfo != null) {
                        }
                        processRecord.setBindApplicationTime(j3);
                        activityManagerGlobalLock = this.mProcLock;
                        boostPriorityForProcLockedSection();
                        synchronized (activityManagerGlobalLock) {
                        }
                    } catch (Exception e3) {
                        e = e3;
                    }
                } catch (RemoteException unused2) {
                    processRecord.resetPackageList(this.mProcessStats);
                    this.mProcessList.startProcessLocked(processRecord, new HostingRecord(HostingRecord.HOSTING_TYPE_LINK_FAIL, str2), 0);
                    return;
                }
            }
        }
        processRecord = null;
        if (processRecord == null) {
            processRecord = processRecord2;
        }
        if (processRecord != null) {
        }
    }

    public final void attachApplication(IApplicationThread iApplicationThread, long j) {
        if (iApplicationThread == null) {
            throw new SecurityException("Invalid application interface");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                int callingPid = Binder.getCallingPid();
                int callingUid = Binder.getCallingUid();
                long clearCallingIdentity = Binder.clearCallingIdentity();
                attachApplicationLocked(iApplicationThread, callingPid, callingUid, j);
                Binder.restoreCallingIdentity(clearCallingIdentity);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX WARN: Removed duplicated region for block: B:24:0x006f  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00dd A[Catch: all -> 0x019c, TryCatch #5 {all -> 0x019c, blocks: (B:16:0x0031, B:18:0x0038, B:22:0x0044, B:70:0x0048, B:64:0x0073, B:55:0x009a, B:57:0x009f, B:59:0x00a9, B:27:0x00c7, B:30:0x00d5, B:32:0x00d9, B:34:0x00dd, B:35:0x00f3, B:37:0x00fb, B:40:0x010c, B:42:0x0125, B:43:0x0136, B:49:0x013f, B:50:0x0147, B:51:0x0197, B:62:0x00b0, B:67:0x0081, B:74:0x0056), top: B:15:0x0031, inners: #0, #2, #3, #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:42:0x0125 A[Catch: all -> 0x019c, TryCatch #5 {all -> 0x019c, blocks: (B:16:0x0031, B:18:0x0038, B:22:0x0044, B:70:0x0048, B:64:0x0073, B:55:0x009a, B:57:0x009f, B:59:0x00a9, B:27:0x00c7, B:30:0x00d5, B:32:0x00d9, B:34:0x00dd, B:35:0x00f3, B:37:0x00fb, B:40:0x010c, B:42:0x0125, B:43:0x0136, B:49:0x013f, B:50:0x0147, B:51:0x0197, B:62:0x00b0, B:67:0x0081, B:74:0x0056), top: B:15:0x0031, inners: #0, #2, #3, #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:47:0x013b  */
    /* JADX WARN: Removed duplicated region for block: B:54:0x009a A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0073 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:69:0x0048 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void finishAttachApplicationInner(long j, int i, int i2) {
        ProcessRecord processRecord;
        boolean z;
        boolean z2;
        boolean z3;
        BackupRecord backupRecord;
        long uptimeMillis = SystemClock.uptimeMillis();
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(i2);
        }
        if (processRecord != null && processRecord.getStartUid() == i && processRecord.getStartSeq() == j) {
            this.mHandler.removeMessages(20, processRecord);
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    processRecord.setPendingFinishAttach(false);
                    if (!this.mProcessesReady && !isAllowedWhileBooting(processRecord.info)) {
                        z = false;
                        String str = processRecord.processName;
                        if (z) {
                            z3 = false;
                            z2 = false;
                        } else {
                            try {
                                z2 = this.mAtmInternal.attachApplication(processRecord.getWindowProcessController());
                                z3 = false;
                            } catch (Exception e) {
                                Slog.wtf("ActivityManager", "Exception thrown launching activities in " + processRecord, e);
                                z2 = false;
                                z3 = true;
                            }
                        }
                        if (!z3) {
                            try {
                                z2 |= this.mServices.attachApplicationLocked(processRecord, str);
                                checkTime(uptimeMillis, "finishAttachApplicationInner: after mServices.attachApplicationLocked");
                            } catch (Exception e2) {
                                Slog.wtf("ActivityManager", "Exception thrown starting services in " + processRecord, e2);
                                z3 = true;
                            }
                        }
                        if (!z3) {
                            try {
                                for (BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
                                    z2 |= broadcastQueue.onApplicationAttachedLocked(processRecord);
                                }
                                checkTime(uptimeMillis, "finishAttachApplicationInner: after dispatching broadcasts");
                            } catch (BroadcastDeliveryFailedException e3) {
                                Slog.wtf("ActivityManager", "Exception thrown dispatching broadcasts in " + processRecord, e3);
                                z3 = true;
                            }
                        }
                        backupRecord = this.mBackupTargets.get(processRecord.userId);
                        if (!z3 && backupRecord != null && backupRecord.app == processRecord) {
                            if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                                Slog.v(TAG_BACKUP, "New app is backup target, launching agent for " + processRecord);
                            }
                            notifyPackageUse(backupRecord.appInfo.packageName, 5);
                            try {
                                processRecord.getThread().scheduleCreateBackupAgent(backupRecord.appInfo, backupRecord.backupMode, backupRecord.userId, backupRecord.backupDestination);
                            } catch (Exception e4) {
                                Slog.wtf("ActivityManager", "Exception thrown creating backup agent in " + processRecord, e4);
                                z3 = true;
                            }
                        }
                        if (!z3) {
                            processRecord.killLocked("error during init", 7, true);
                            handleAppDiedLocked(processRecord, i2, false, true, false);
                            return;
                        }
                        if (!z2) {
                            updateOomAdjLocked(processRecord, 11);
                            checkTime(uptimeMillis, "finishAttachApplicationInner: after updateOomAdjLocked");
                        }
                        HostingRecord hostingRecord = processRecord.getHostingRecord();
                        FrameworkStatsLog.write(169, processRecord.info.uid, i2, processRecord.info.packageName, 3, processRecord.getStartElapsedTime(), (int) (processRecord.getBindApplicationTime() - processRecord.getStartUptime()), (int) (SystemClock.uptimeMillis() - processRecord.getStartUptime()), hostingRecord.getType(), hostingRecord.getName(), getShortAction(hostingRecord.getAction()), HostingRecord.getHostingTypeIdStatsd(hostingRecord.getType()), HostingRecord.getTriggerTypeForStatsd(hostingRecord.getTriggerType()));
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    z = true;
                    String str2 = processRecord.processName;
                    if (z) {
                    }
                    if (!z3) {
                    }
                    if (!z3) {
                    }
                    backupRecord = this.mBackupTargets.get(processRecord.userId);
                    if (!z3) {
                        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                        }
                        notifyPackageUse(backupRecord.appInfo.packageName, 5);
                        processRecord.getThread().scheduleCreateBackupAgent(backupRecord.appInfo, backupRecord.backupMode, backupRecord.userId, backupRecord.backupDestination);
                    }
                    if (!z3) {
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
        } else {
            Slog.wtf("ActivityManager", "Mismatched or missing ProcessRecord: " + processRecord + ". Pid: " + i2 + ". Uid: " + i);
            Process.killProcess(i2);
            Process.killProcessGroup(i, i2);
            this.mProcessList.noteAppKill(i2, i, 7, 0, "wrong startSeq");
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    processRecord.killLocked("unexpected process record", 13, true);
                } finally {
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    public final void finishAttachApplication(long j) {
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        if (!this.mConstants.mEnableWaitForFinishAttachApplication) {
            Slog.i("ActivityManager", "Flag disabled. Ignoring finishAttachApplication from uid: " + callingUid + ". pid: " + callingPid);
            return;
        }
        if (callingPid == MY_PID && callingUid == 1000) {
            return;
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            finishAttachApplicationInner(j, callingUid, callingPid);
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static String getShortAction(String str) {
        int lastIndexOf;
        return (str == null || (lastIndexOf = str.lastIndexOf(46)) == -1 || lastIndexOf == str.length() + (-1)) ? str : str.substring(lastIndexOf + 1);
    }

    void checkTime(long j, String str) {
        long uptimeMillis = SystemClock.uptimeMillis() - j;
        if (uptimeMillis > 50) {
            Slog.w("ActivityManager", "Slow operation: " + uptimeMillis + "ms so far, now at " + str);
        }
    }

    public void showBootMessage(CharSequence charSequence, boolean z) {
        if (Binder.getCallingUid() != Process.myUid()) {
            throw new SecurityException();
        }
        this.mWindowManager.showBootMessage(charSequence, z);
    }

    final void finishBooting() {
        TimingsTraceAndSlog timingsTraceAndSlog = new TimingsTraceAndSlog("ActivityManagerTiming", 64L);
        timingsTraceAndSlog.traceBegin("FinishBooting");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!this.mBootAnimationComplete) {
                    this.mCallFinishBooting = true;
                    return;
                }
                this.mCallFinishBooting = false;
                resetPriorityAfterLockedSection();
                Process.ZYGOTE_PROCESS.bootCompleted();
                VMRuntime.bootCompleted();
                IntentFilter intentFilter = new IntentFilter();
                intentFilter.addAction("android.intent.action.QUERY_PACKAGE_RESTART");
                intentFilter.addDataScheme("package");
                this.mContext.registerReceiver(new BroadcastReceiver() { // from class: com.android.server.am.ActivityManagerService.8
                    @Override // android.content.BroadcastReceiver
                    public void onReceive(Context context, Intent intent) {
                        String[] stringArrayExtra = intent.getStringArrayExtra("android.intent.extra.PACKAGES");
                        if (stringArrayExtra != null) {
                            for (String str : stringArrayExtra) {
                                ActivityManagerService activityManagerService = ActivityManagerService.this;
                                ActivityManagerService.boostPriorityForLockedSection();
                                synchronized (activityManagerService) {
                                    try {
                                        if (ActivityManagerService.this.forceStopPackageLocked(str, -1, false, false, false, false, false, 0, "query restart")) {
                                            setResultCode(-1);
                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                            return;
                                        }
                                    } catch (Throwable th) {
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                }
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                    }
                }, intentFilter);
                try {
                    Slog.i("ActivityManager", "About to commit checkpoint");
                    InstallLocationUtils.getStorageManager().commitChanges();
                } catch (Exception unused) {
                    ((PowerManager) this.mInjector.getContext().getSystemService("power")).reboot("Checkpoint commit failed");
                }
                this.mSystemServiceManager.startBootPhase(timingsTraceAndSlog, 1000);
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        int size = this.mProcessesOnHold.size();
                        if (size > 0) {
                            ArrayList arrayList = new ArrayList(this.mProcessesOnHold);
                            for (int i = 0; i < size; i++) {
                                if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
                                    Slog.v(TAG_PROCESSES, "Starting process on hold: " + arrayList.get(i));
                                }
                                this.mProcessList.startProcessLocked((ProcessRecord) arrayList.get(i), new HostingRecord(HostingRecord.HOSTING_TYPE_ON_HOLD), 2);
                            }
                        }
                        if (this.mFactoryTest == 1) {
                            return;
                        }
                        this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(27), this.mConstants.POWER_CHECK_INTERVAL);
                        if (((Boolean) InitProperties.userspace_reboot_in_progress().orElse(Boolean.FALSE)).booleanValue()) {
                            UserspaceRebootLogger.noteUserspaceRebootSuccess();
                        }
                        this.mActivityManagerServiceExt.setBootstage();
                        this.mActivityManagerServiceExt.recordBootSuccess();
                        SystemProperties.set("sys.boot_completed", "1");
                        SystemProperties.set("dev.bootcomplete", "1");
                        this.mUserController.onBootComplete(new IIntentReceiver.Stub() { // from class: com.android.server.am.ActivityManagerService.9
                            public void performReceive(Intent intent, int i2, String str, Bundle bundle, boolean z, boolean z2, int i3) {
                                ActivityManagerGlobalLock activityManagerGlobalLock = ActivityManagerService.this.mProcLock;
                                ActivityManagerService.boostPriorityForProcLockedSection();
                                synchronized (activityManagerGlobalLock) {
                                    try {
                                        ActivityManagerService.this.mSocExt.compactAllSystem();
                                        ActivityManagerService.this.mAppProfiler.requestPssAllProcsLPr(SystemClock.uptimeMillis(), true, false);
                                    } catch (Throwable th) {
                                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                                        throw th;
                                    }
                                }
                                ActivityManagerService.resetPriorityAfterProcLockedSection();
                            }
                        });
                        maybeLogUserspaceRebootEvent();
                        this.mUserController.scheduleStartProfiles();
                        resetPriorityAfterLockedSection();
                        showConsoleNotificationIfActive();
                        showMteOverrideNotificationIfActive();
                        this.mActivityManagerServiceExt.hookBootCompleted();
                        timingsTraceAndSlog.traceEnd();
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    private void showConsoleNotificationIfActive() {
        if (SystemProperties.get("init.svc.console").equals(INetd.IF_FLAG_RUNNING)) {
            String string = this.mContext.getString(R.string.eventTypeCustom);
            ((NotificationManager) this.mContext.getSystemService(NotificationManager.class)).notifyAsUser(null, 55, new Notification.Builder(this.mContext, SystemNotificationChannels.DEVELOPER).setSmallIcon(R.drawable.sym_keyboard_num5).setWhen(0L).setOngoing(true).setTicker(string).setDefaults(0).setColor(this.mContext.getColor(R.color.system_notification_accent_color)).setContentTitle(string).setContentText(this.mContext.getString(R.string.eventTypeBirthday)).setVisibility(1).build(), UserHandle.ALL);
            this.mSocExt.writeBootCompletedEvent();
        }
    }

    private void showMteOverrideNotificationIfActive() {
        if (!Arrays.asList(SystemProperties.get("arm64.memtag.bootctl").split(",")).contains("memtag") && SystemProperties.getBoolean("ro.arm64.memtag.bootctl_supported", false) && Zygote.nativeSupportsMemoryTagging()) {
            String string = this.mContext.getString(R.string.permission_request_notification_title);
            ((NotificationManager) this.mContext.getSystemService(NotificationManager.class)).notifyAsUser(null, 69, new Notification.Builder(this.mContext, SystemNotificationChannels.DEVELOPER).setSmallIcon(R.drawable.sym_keyboard_num5).setOngoing(true).setTicker(string).setDefaults(0).setColor(this.mContext.getColor(R.color.system_notification_accent_color)).setContentTitle(string).setContentText(this.mContext.getString(R.string.permgrouplab_storage)).setVisibility(1).build(), UserHandle.ALL);
        }
    }

    public void bootAnimationComplete() {
        boolean z;
        if (ActivityManagerDebugConfig.DEBUG_ALL) {
            Slog.d("ActivityManager", "bootAnimationComplete: Callers=" + Debug.getCallers(4));
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                Slog.d("ActivityManager", "bootAnimationComplete, mCallFinishBooting = " + this.mCallFinishBooting);
                z = this.mCallFinishBooting;
                this.mBootAnimationComplete = true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        if (z) {
            finishBooting();
        }
    }

    final void ensureBootCompleted() {
        boolean z;
        boolean z2;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                z = this.mBooting;
                this.mBooting = false;
                z2 = this.mBooted ? false : true;
                this.mBooted = true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        if (z) {
            finishBooting();
        }
        if (z2) {
            this.mAtmInternal.enableScreenAfterBoot(this.mBooted);
        }
    }

    @Deprecated
    public IIntentSender getIntentSender(int i, String str, IBinder iBinder, String str2, int i2, Intent[] intentArr, String[] strArr, int i3, Bundle bundle, int i4) {
        return getIntentSenderWithFeature(i, str, null, iBinder, str2, i2, intentArr, strArr, i3, bundle, i4);
    }

    public IIntentSender getIntentSenderWithFeature(int i, String str, String str2, IBinder iBinder, String str3, int i2, Intent[] intentArr, String[] strArr, int i3, Bundle bundle, int i4) {
        enforceNotIsolatedCaller("getIntentSender");
        return getIntentSenderWithFeatureAsApp(i, str, str2, iBinder, str3, i2, intentArr, strArr, i3, bundle, i4, Binder.getCallingUid());
    }

    public IIntentSender getIntentSenderWithFeatureAsApp(int i, String str, String str2, IBinder iBinder, String str3, int i2, Intent[] intentArr, String[] strArr, int i3, Bundle bundle, int i4, int i5) {
        if (intentArr != null) {
            if (intentArr.length < 1) {
                throw new IllegalArgumentException("Intents array length must be >= 1");
            }
            int i6 = 0;
            while (i6 < intentArr.length) {
                Intent intent = intentArr[i6];
                if (intent != null) {
                    if (intent.hasFileDescriptors()) {
                        throw new IllegalArgumentException("File descriptors passed in Intent");
                    }
                    if (i == 1 && (intent.getFlags() & 33554432) != 0) {
                        throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
                    }
                    if (PendingIntent.isNewMutableDisallowedImplicitPendingIntent(i3, intent, i == 3)) {
                        boolean isChangeEnabled = CompatChanges.isChangeEnabled(236704164L, str, UserHandle.of(i4));
                        ActivityManagerUtils.logUnsafeIntentEvent(4, i5, intent, (strArr == null || i6 >= strArr.length) ? null : strArr[i6], isChangeEnabled);
                        if (isChangeEnabled) {
                            throw new IllegalArgumentException(str + ": Targeting U+ (version 34 and above) disallows creating or retrieving a PendingIntent with FLAG_MUTABLE, an implicit Intent within and without FLAG_NO_CREATE and FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT for security reasons. To retrieve an already existing PendingIntent, use FLAG_NO_CREATE, however, to create a new PendingIntent with an implicit Intent use FLAG_IMMUTABLE.");
                        }
                    }
                    intentArr[i6] = new Intent(intent);
                }
                i6++;
            }
            if (strArr != null && strArr.length != intentArr.length) {
                throw new IllegalArgumentException("Intent array length does not match resolvedTypes length");
            }
        }
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in options");
        }
        int handleIncomingUser = this.mUserController.handleIncomingUser(Binder.getCallingPid(), i5, i4, i == 1, 0, "getIntentSender", null);
        if (i4 == -2) {
            handleIncomingUser = -2;
        }
        if (i5 != 0 && i5 != 1000) {
            try {
                int packageUid = AppGlobals.getPackageManager().getPackageUid(str, 268435456L, UserHandle.getUserId(i5));
                if (!UserHandle.isSameApp(i5, packageUid)) {
                    String str4 = "Permission Denial: getIntentSender() from pid=" + Binder.getCallingPid() + ", uid=" + i5 + ", (need uid=" + packageUid + ") is not allowed to send as package " + str;
                    Slog.w("ActivityManager", str4);
                    throw new SecurityException(str4);
                }
            } catch (RemoteException e) {
                throw new SecurityException(e);
            }
        }
        if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
            Slog.d("ActivityManager", "getIntentSender type is " + i);
        }
        if (i == 3) {
            return this.mAtmInternal.getIntentSender(i, str, str2, i5, handleIncomingUser, iBinder, str3, i2, intentArr, strArr, i3, bundle);
        }
        return this.mPendingIntentController.getIntentSender(i, str, str2, i5, handleIncomingUser, iBinder, str3, i2, intentArr, strArr, i3, bundle);
    }

    public int sendIntentSender(IApplicationThread iApplicationThread, IIntentSender iIntentSender, IBinder iBinder, int i, Intent intent, String str, IIntentReceiver iIntentReceiver, String str2, Bundle bundle) {
        Intent intent2;
        if (iIntentSender instanceof PendingIntentRecord) {
            PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
            PendingIntentRecord.Key key = pendingIntentRecord.key;
            UserManagerInternal userManagerInternal = (UserManagerInternal) LocalServices.getService(UserManagerInternal.class);
            int callingUserId = UserHandle.getCallingUserId();
            if (UserManager.isVisibleBackgroundUsersEnabled() && key.userId == -2 && callingUserId != 0 && userManagerInternal.isUserVisible(callingUserId)) {
                EventLogTags.writeAmIntentSenderRedirectUser(callingUserId);
                return new PendingIntentRecord(pendingIntentRecord.controller, new PendingIntentRecord.Key(key.type, key.packageName, key.featureId, key.activity, key.who, key.requestCode, key.allIntents, key.allResolvedTypes, key.flags, key.options, callingUserId), pendingIntentRecord.uid).sendWithResult(iApplicationThread, i, intent, str, iBinder, iIntentReceiver, str2, bundle);
            }
            return pendingIntentRecord.sendWithResult(iApplicationThread, i, intent, str, iBinder, iIntentReceiver, str2, bundle);
        }
        if (intent == null) {
            Slog.wtf("ActivityManager", "Can't use null intent with direct IIntentSender call");
            intent2 = new Intent("android.intent.action.MAIN");
        } else {
            intent2 = intent;
        }
        if (iBinder != null) {
            try {
                int callingUid = Binder.getCallingUid();
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    String nameForUid = AppGlobals.getPackageManager().getNameForUid(callingUid);
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                    Slog.wtf("ActivityManager", "Send a non-null allowlistToken to a non-PI target. Calling package: " + nameForUid + "; intent: " + intent2 + "; options: " + bundle);
                } catch (Throwable th) {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                    throw th;
                }
            } catch (RemoteException unused) {
            }
        }
        iIntentSender.send(i, intent2, str, (IBinder) null, (IIntentReceiver) null, str2, bundle);
        if (iIntentReceiver == null) {
            return 0;
        }
        try {
            iIntentReceiver.performReceive(intent2, 0, (String) null, (Bundle) null, false, false, UserHandle.getCallingUserId());
            return 0;
        } catch (RemoteException unused2) {
            return 0;
        }
    }

    public void cancelIntentSender(IIntentSender iIntentSender) {
        this.mPendingIntentController.cancelIntentSender(iIntentSender);
    }

    public boolean registerIntentSenderCancelListenerEx(IIntentSender iIntentSender, IResultReceiver iResultReceiver) {
        return this.mPendingIntentController.registerIntentSenderCancelListener(iIntentSender, iResultReceiver);
    }

    public void unregisterIntentSenderCancelListener(IIntentSender iIntentSender, IResultReceiver iResultReceiver) {
        this.mPendingIntentController.unregisterIntentSenderCancelListener(iIntentSender, iResultReceiver);
    }

    public ActivityManager.PendingIntentInfo getInfoForIntentSender(IIntentSender iIntentSender) {
        if (iIntentSender instanceof PendingIntentRecord) {
            PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
            String str = pendingIntentRecord.key.packageName;
            int i = pendingIntentRecord.uid;
            boolean filterAppAccess = getPackageManagerInternal().filterAppAccess(str, Binder.getCallingUid(), UserHandle.getUserId(i));
            String str2 = filterAppAccess ? null : str;
            int i2 = filterAppAccess ? -1 : i;
            PendingIntentRecord.Key key = pendingIntentRecord.key;
            return new ActivityManager.PendingIntentInfo(str2, i2, (key.flags & 67108864) != 0, key.type);
        }
        return new ActivityManager.PendingIntentInfo((String) null, -1, false, 0);
    }

    public boolean isIntentSenderTargetedToPackage(IIntentSender iIntentSender) {
        if (!(iIntentSender instanceof PendingIntentRecord)) {
            return false;
        }
        try {
            PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
            if (pendingIntentRecord.key.allIntents == null) {
                return false;
            }
            int i = 0;
            while (true) {
                Intent[] intentArr = pendingIntentRecord.key.allIntents;
                if (i >= intentArr.length) {
                    return true;
                }
                Intent intent = intentArr[i];
                if (intent.getPackage() != null && intent.getComponent() != null) {
                    return false;
                }
                i++;
            }
        } catch (ClassCastException unused) {
            return false;
        }
    }

    public boolean isIntentSenderAnActivity(IIntentSender iIntentSender) {
        if (iIntentSender instanceof PendingIntentRecord) {
            return ((PendingIntentRecord) iIntentSender).key.type == 2;
        }
        return false;
    }

    public Intent getIntentForIntentSender(IIntentSender iIntentSender) {
        enforceCallingPermission("android.permission.GET_INTENT_SENDER_INTENT", "getIntentForIntentSender()");
        if (!(iIntentSender instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
            if (pendingIntentRecord.key.requestIntent != null) {
                return new Intent(pendingIntentRecord.key.requestIntent);
            }
            return null;
        } catch (ClassCastException unused) {
            return null;
        }
    }

    public ParceledListSlice<ResolveInfo> queryIntentComponentsForIntentSender(IIntentSender iIntentSender, int i) {
        enforceCallingPermission("android.permission.GET_INTENT_SENDER_INTENT", "queryIntentComponentsForIntentSender()");
        Objects.requireNonNull(iIntentSender);
        try {
            PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
            PendingIntentRecord.Key key = pendingIntentRecord.key;
            Intent intent = key.requestIntent;
            if (intent == null) {
                return null;
            }
            int i2 = key.userId;
            int i3 = pendingIntentRecord.uid;
            String str = key.requestResolvedType;
            int i4 = key.type;
            if (i4 == 1) {
                return new ParceledListSlice<>(this.mPackageManagerInt.queryIntentReceivers(intent, str, i, i3, i2, false));
            }
            if (i4 == 2) {
                return new ParceledListSlice<>(this.mPackageManagerInt.queryIntentActivities(intent, str, i, i3, i2));
            }
            if (i4 == 4 || i4 == 5) {
                return new ParceledListSlice<>(this.mPackageManagerInt.queryIntentServices(intent, i, i3, i2));
            }
            throw new IllegalStateException("Unsupported intent sender type: " + pendingIntentRecord.key.type);
        } catch (ClassCastException unused) {
            return null;
        }
    }

    public String getTagForIntentSender(IIntentSender iIntentSender, String str) {
        String tagForIntentSenderLocked;
        if (!(iIntentSender instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    tagForIntentSenderLocked = getTagForIntentSenderLocked(pendingIntentRecord, str);
                } finally {
                }
            }
            resetPriorityAfterLockedSection();
            return tagForIntentSenderLocked;
        } catch (ClassCastException unused) {
            return null;
        }
    }

    String getTagForIntentSenderLocked(PendingIntentRecord pendingIntentRecord, String str) {
        String str2;
        Intent intent = pendingIntentRecord.key.requestIntent;
        if (intent == null) {
            return null;
        }
        if (pendingIntentRecord.lastTag != null && (str2 = pendingIntentRecord.lastTagPrefix) == str && (str2 == null || str2.equals(str))) {
            return pendingIntentRecord.lastTag;
        }
        pendingIntentRecord.lastTagPrefix = str;
        StringBuilder sb = new StringBuilder(128);
        if (str != null) {
            sb.append(str);
        }
        if (intent.getAction() != null) {
            sb.append(intent.getAction());
        } else if (intent.getComponent() != null) {
            intent.getComponent().appendShortString(sb);
        } else {
            sb.append("?");
        }
        String sb2 = sb.toString();
        pendingIntentRecord.lastTag = sb2;
        return sb2;
    }

    public void setProcessLimit(int i) {
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessLimit()");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mConstants.setOverrideMaxCachedProcesses(i);
                trimApplicationsLocked(true, 12);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public int getProcessLimit() {
        int overrideMaxCachedProcesses;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                overrideMaxCachedProcesses = this.mConstants.getOverrideMaxCachedProcesses();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return overrideMaxCachedProcesses;
    }

    void importanceTokenDied(ImportanceToken importanceToken) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    if (this.mImportantProcesses.get(importanceToken.pid) != importanceToken) {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    this.mImportantProcesses.remove(importanceToken.pid);
                    ProcessRecord processRecord = this.mPidsSelfLocked.get(importanceToken.pid);
                    if (processRecord == null) {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    processRecord.mState.setForcingToImportant(null);
                    clearProcessForegroundLocked(processRecord);
                    updateOomAdjLocked(processRecord, 9);
                    resetPriorityAfterLockedSection();
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:29:0x0072  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void setProcessImportant(IBinder iBinder, int i, boolean z, String str) {
        boolean z2;
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessImportant()");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    ProcessRecord processRecord = this.mPidsSelfLocked.get(i);
                    if (processRecord == null && z) {
                        Slog.w("ActivityManager", "setProcessForeground called on unknown pid: " + i);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    ImportanceToken importanceToken = this.mImportantProcesses.get(i);
                    boolean z3 = true;
                    if (importanceToken != null) {
                        importanceToken.token.unlinkToDeath(importanceToken, 0);
                        this.mImportantProcesses.remove(i);
                        if (processRecord != null) {
                            processRecord.mState.setForcingToImportant(null);
                        }
                        z2 = true;
                    } else {
                        z2 = false;
                    }
                    if (z && iBinder != null) {
                        ImportanceToken importanceToken2 = new ImportanceToken(i, iBinder, str) { // from class: com.android.server.am.ActivityManagerService.10
                            @Override // android.os.IBinder.DeathRecipient
                            public void binderDied() {
                                ActivityManagerService.this.importanceTokenDied(this);
                            }
                        };
                        try {
                            iBinder.linkToDeath(importanceToken2, 0);
                            this.mImportantProcesses.put(i, importanceToken2);
                            processRecord.mState.setForcingToImportant(importanceToken2);
                        } catch (RemoteException unused) {
                        }
                        if (z3) {
                            updateOomAdjLocked(processRecord, 9);
                        }
                        resetPriorityAfterLockedSection();
                    }
                    z3 = z2;
                    if (z3) {
                    }
                    resetPriorityAfterLockedSection();
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isAppForeground(int i) {
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                UidRecord uidRecord = this.mProcessList.mActiveUids.get(i);
                if (uidRecord != null && !uidRecord.isIdle()) {
                    boolean z = uidRecord.getCurProcState() <= 6;
                    resetPriorityAfterProcLockedSection();
                    return z;
                }
                resetPriorityAfterProcLockedSection();
                return false;
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isAppBad(String str, int i) {
        return this.mAppErrors.isBadProcess(str, i);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public int getUidState(int i) {
        int uidProcStateLOSP;
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                uidProcStateLOSP = this.mProcessList.getUidProcStateLOSP(i);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return uidProcStateLOSP;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public int getUidStateLocked(int i) {
        return this.mProcessList.getUidProcStateLOSP(i);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public int getUidProcessCapabilityLocked(int i) {
        return this.mProcessList.getUidProcessCapabilityLOSP(i);
    }

    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    static class ProcessInfoService extends IProcessInfoService.Stub {
        final ActivityManagerService mActivityManagerService;

        ProcessInfoService(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public void getProcessStatesFromPids(int[] iArr, int[] iArr2) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(iArr, iArr2, null);
        }

        public void getProcessStatesAndOomScoresFromPids(int[] iArr, int[] iArr2, int[] iArr3) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(iArr, iArr2, iArr3);
        }
    }

    public void getProcessStatesAndOomScoresForPIDs(int[] iArr, int[] iArr2, int[] iArr3) {
        if (iArr3 != null) {
            enforceCallingPermission("android.permission.GET_PROCESS_STATE_AND_OOM_SCORE", "getProcessStatesAndOomScoresForPIDs()");
        }
        if (iArr == null) {
            throw new NullPointerException("pids");
        }
        if (iArr2 == null) {
            throw new NullPointerException("states");
        }
        if (iArr.length != iArr2.length) {
            throw new IllegalArgumentException("pids and states arrays have different lengths!");
        }
        if (iArr3 != null && iArr.length != iArr3.length) {
            throw new IllegalArgumentException("pids and scores arrays have different lengths!");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    long j = Long.MIN_VALUE;
                    int i = -1;
                    for (int i2 = 0; i2 < iArr.length; i2++) {
                        ProcessRecord processRecord = this.mPidsSelfLocked.get(iArr[i2]);
                        if (processRecord != null) {
                            long pendingTopPidTime = this.mPendingStartActivityUids.getPendingTopPidTime(processRecord.uid, iArr[i2]);
                            if (pendingTopPidTime != 0) {
                                iArr2[i2] = 2;
                                if (iArr3 != null) {
                                    iArr3[i2] = -1;
                                }
                                if (pendingTopPidTime > j) {
                                    i = i2;
                                    j = pendingTopPidTime;
                                }
                            } else {
                                iArr2[i2] = processRecord.mState.getCurProcState();
                                if (iArr3 != null) {
                                    iArr3[i2] = processRecord.mState.getCurAdj();
                                }
                            }
                        } else {
                            iArr2[i2] = 20;
                            if (iArr3 != null) {
                                iArr3[i2] = -10000;
                            }
                        }
                    }
                    if (i != -1 && iArr3 != null) {
                        iArr3[i] = -2;
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    static class PermissionController extends IPermissionController.Stub {
        ActivityManagerService mActivityManagerService;

        PermissionController(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public boolean checkPermission(String str, int i, int i2) {
            return this.mActivityManagerService.checkPermission(str, i, i2) == 0;
        }

        public int noteOp(String str, int i, String str2) {
            return this.mActivityManagerService.mAppOpsService.noteOperation(AppOpsManager.strOpToOp(str), i, str2, null, false, "", false).getOpMode();
        }

        public String[] getPackagesForUid(int i) {
            return this.mActivityManagerService.mContext.getPackageManager().getPackagesForUid(i);
        }

        public boolean isRuntimePermission(String str) {
            try {
                return (this.mActivityManagerService.mContext.getPackageManager().getPermissionInfo(str, 0).protectionLevel & 15) == 1;
            } catch (PackageManager.NameNotFoundException e) {
                Slog.e("ActivityManager", "No such permission: " + str, e);
                return false;
            }
        }

        public int getPackageUid(String str, int i) {
            try {
                return this.mActivityManagerService.mContext.getPackageManager().getPackageUid(str, i);
            } catch (PackageManager.NameNotFoundException unused) {
                return -1;
            }
        }
    }

    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    class IntentFirewallInterface implements IntentFirewall.AMSInterface {
        IntentFirewallInterface() {
        }

        @Override // com.android.server.firewall.IntentFirewall.AMSInterface
        public int checkComponentPermission(String str, int i, int i2, int i3, boolean z) {
            return ActivityManagerService.checkComponentPermission(str, i, i2, i3, z);
        }

        @Override // com.android.server.firewall.IntentFirewall.AMSInterface
        public Object getAMSLock() {
            return ActivityManagerService.this;
        }
    }

    @PermissionMethod
    public static int checkComponentPermission(@PermissionName String str, int i, int i2, int i3, boolean z) {
        ArraySet arraySet;
        if (i == MY_PID) {
            return 0;
        }
        if (str != null) {
            if (mStaticExt.checkSafeWindowPermission(str, i2)) {
                return 0;
            }
            SparseArray<ProcessInfo> sparseArray = sActiveProcessInfoSelfLocked;
            synchronized (sparseArray) {
                ProcessInfo processInfo = sparseArray.get(i);
                if (processInfo != null && (arraySet = processInfo.deniedPermissions) != null && arraySet.contains(str)) {
                    return -1;
                }
            }
        }
        return ActivityManager.checkComponentPermission(str, i2, i3, z);
    }

    private void enforceDebuggable(ProcessRecord processRecord) {
        if (Build.IS_DEBUGGABLE || processRecord.isDebuggable()) {
            return;
        }
        throw new SecurityException("Process not debuggable: " + processRecord.info.packageName);
    }

    private void enforceDebuggable(ApplicationInfo applicationInfo) {
        if (Build.IS_DEBUGGABLE || (applicationInfo.flags & 2) != 0) {
            return;
        }
        throw new SecurityException("Process not debuggable: " + applicationInfo.packageName);
    }

    @PermissionMethod
    public int checkPermission(@PermissionName String str, int i, int i2) {
        if (str == null) {
            return -1;
        }
        return checkComponentPermission(str, i, i2, -1, true);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @PermissionMethod
    public int checkCallingPermission(@PermissionName String str) {
        return checkPermission(str, Binder.getCallingPid(), Binder.getCallingUid());
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @PermissionMethod
    public void enforceCallingPermission(@PermissionName String str, String str2) {
        if (checkCallingPermission(str) == 0 || this.mActivityManagerServiceExt.enforceCallingOplusWindowPermission(this, str)) {
            return;
        }
        String str3 = "Permission Denial: " + str2 + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + str;
        Slog.w("ActivityManager", str3);
        throw new SecurityException(str3);
    }

    @PermissionMethod(anyOf = true)
    private void enforceCallingHasAtLeastOnePermission(String str, String... strArr) {
        for (String str2 : strArr) {
            if (checkCallingPermission(str2) == 0) {
                return;
            }
        }
        String str3 = "Permission Denial: " + str + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires one of " + Arrays.toString(strArr);
        Slog.w("ActivityManager", str3);
        throw new SecurityException(str3);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @PermissionMethod
    public void enforcePermission(@PermissionName String str, int i, int i2, String str2) {
        if (checkPermission(str, i, i2) == 0) {
            return;
        }
        String str3 = "Permission Denial: " + str2 + " from pid=" + i + ", uid=" + i2 + " requires " + str;
        Slog.w("ActivityManager", str3);
        throw new SecurityException(str3);
    }

    public boolean isAppStartModeDisabled(int i, String str) {
        boolean z;
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                z = getAppStartModeLOSP(i, str, 0, -1, false, true, false) == 3;
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return z;
    }

    private boolean isInRestrictedBucket(int i, String str, long j) {
        return 45 <= this.mUsageStatsService.getAppStandbyBucket(str, i, j);
    }

    @GuardedBy(anyOf = {"this", "mProcLock"})
    int appRestrictedInBackgroundLOSP(int i, String str, int i2) {
        if (i2 >= 26) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i("ActivityManager", "App " + i + "/" + str + " targets O+, restricted");
            }
            return 2;
        }
        if (this.mOnBattery && this.mConstants.FORCE_BACKGROUND_CHECK_ON_RESTRICTED_APPS && isInRestrictedBucket(UserHandle.getUserId(i), str, SystemClock.elapsedRealtime())) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i("ActivityManager", "Legacy app " + i + "/" + str + " in RESTRICTED bucket");
            }
            return 1;
        }
        int noteOpNoThrow = getAppOpsManager().noteOpNoThrow(63, i, str, (String) null, "");
        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
            Slog.i("ActivityManager", "Legacy app " + i + "/" + str + " bg appop " + noteOpNoThrow);
        }
        if (noteOpNoThrow != 0) {
            return noteOpNoThrow != 1 ? 2 : 1;
        }
        if (!this.mForceBackgroundCheck || UserHandle.isCore(i) || isOnDeviceIdleAllowlistLOSP(i, true)) {
            return 0;
        }
        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
            Slog.i("ActivityManager", "Force background check: " + i + "/" + str + " restricted");
        }
        return 1;
    }

    @GuardedBy(anyOf = {"this", "mProcLock"})
    int appServicesRestrictedInBackgroundLOSP(int i, String str, int i2) {
        if (this.mPackageManagerInt.isPackagePersistent(str)) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i("ActivityManager", "App " + i + "/" + str + " is persistent; not restricted in background");
            }
            return 0;
        }
        if (uidOnBackgroundAllowlistLOSP(i)) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i("ActivityManager", "App " + i + "/" + str + " on background allowlist; not restricted in background");
            }
            return 0;
        }
        if (isOnDeviceIdleAllowlistLOSP(i, false)) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i("ActivityManager", "App " + i + "/" + str + " on idle allowlist; not restricted in background");
            }
            return 0;
        }
        if (this.mActivityManagerServiceExt.isOnBackgroundServiceWhitelist(str, i)) {
            return 0;
        }
        return appRestrictedInBackgroundLOSP(i, str, i2);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy(anyOf = {"this", "mProcLock"})
    public int getAppStartModeLOSP(int i, String str, int i2, int i3, boolean z, boolean z2, boolean z3) {
        boolean isEphemeral;
        int appServicesRestrictedInBackgroundLOSP;
        ProcessRecord processRecord;
        if (this.mInternal.isPendingTopUid(i)) {
            return 0;
        }
        UidRecord uidRecordLOSP = this.mProcessList.getUidRecordLOSP(i);
        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
            StringBuilder sb = new StringBuilder();
            sb.append("checkAllowBackground: uid=");
            sb.append(i);
            sb.append(" pkg=");
            sb.append(str);
            sb.append(" rec=");
            sb.append(uidRecordLOSP);
            sb.append(" always=");
            sb.append(z);
            sb.append(" idle=");
            sb.append(uidRecordLOSP != null ? uidRecordLOSP.isIdle() : false);
            Slog.d("ActivityManager", sb.toString());
        }
        if (uidRecordLOSP != null && !z && !z3 && !uidRecordLOSP.isIdle()) {
            return 0;
        }
        if (uidRecordLOSP == null) {
            isEphemeral = getPackageManagerInternal().isPackageEphemeral(UserHandle.getUserId(i), str);
        } else {
            isEphemeral = uidRecordLOSP.isEphemeral();
        }
        if (isEphemeral) {
            return 3;
        }
        if (z2) {
            return 0;
        }
        if (z) {
            appServicesRestrictedInBackgroundLOSP = appRestrictedInBackgroundLOSP(i, str, i2);
        } else {
            appServicesRestrictedInBackgroundLOSP = appServicesRestrictedInBackgroundLOSP(i, str, i2);
        }
        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
            Slog.d("ActivityManager", "checkAllowBackground: uid=" + i + " pkg=" + str + " startMode=" + appServicesRestrictedInBackgroundLOSP + " onallowlist=" + isOnDeviceIdleAllowlistLOSP(i, false) + " onallowlist(ei)=" + isOnDeviceIdleAllowlistLOSP(i, true));
        }
        if (appServicesRestrictedInBackgroundLOSP == 1 && i3 >= 0) {
            synchronized (this.mPidsSelfLocked) {
                processRecord = this.mPidsSelfLocked.get(i3);
            }
            if (processRecord != null && !ActivityManager.isProcStateBackground(processRecord.mState.getCurProcState())) {
                return 0;
            }
        }
        return appServicesRestrictedInBackgroundLOSP;
    }

    @GuardedBy(anyOf = {"this", "mProcLock"})
    boolean isOnDeviceIdleAllowlistLOSP(int i, boolean z) {
        int[] iArr;
        int appId = UserHandle.getAppId(i);
        if (z) {
            iArr = this.mDeviceIdleExceptIdleAllowlist;
        } else {
            iArr = this.mDeviceIdleAllowlist;
        }
        return Arrays.binarySearch(iArr, appId) >= 0 || Arrays.binarySearch(this.mDeviceIdleTempAllowlist, appId) >= 0 || this.mPendingTempAllowlist.get(i) != null;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy(anyOf = {"this", "mProcLock"})
    public FgsTempAllowListItem isAllowlistedForFgsStartLOSP(int i) {
        if (Arrays.binarySearch(this.mDeviceIdleExceptIdleAllowlist, UserHandle.getAppId(i)) >= 0) {
            return FAKE_TEMP_ALLOW_LIST_ITEM;
        }
        Pair<Long, FgsTempAllowListItem> pair = this.mFgsStartTempAllowList.get(i);
        if (pair == null) {
            return null;
        }
        return (FgsTempAllowListItem) pair.second;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static class GetBackgroundStartPrivilegesFunctor implements Consumer<ProcessRecord> {
        private BackgroundStartPrivileges mBackgroundStartPrivileges;
        private int mUid;

        private GetBackgroundStartPrivilegesFunctor() {
            this.mBackgroundStartPrivileges = BackgroundStartPrivileges.NONE;
        }

        void prepare(int i) {
            this.mUid = i;
            this.mBackgroundStartPrivileges = BackgroundStartPrivileges.NONE;
        }

        BackgroundStartPrivileges getResult() {
            return this.mBackgroundStartPrivileges;
        }

        @Override // java.util.function.Consumer
        public void accept(ProcessRecord processRecord) {
            if (processRecord.uid == this.mUid) {
                this.mBackgroundStartPrivileges = this.mBackgroundStartPrivileges.merge(processRecord.getBackgroundStartPrivileges());
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public BackgroundStartPrivileges getBackgroundStartPrivileges(int i) {
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                UidRecord uidRecordLOSP = this.mProcessList.getUidRecordLOSP(i);
                if (uidRecordLOSP == null) {
                    BackgroundStartPrivileges backgroundStartPrivileges = BackgroundStartPrivileges.NONE;
                    resetPriorityAfterProcLockedSection();
                    return backgroundStartPrivileges;
                }
                this.mGetBackgroundStartPrivilegesFunctor.prepare(i);
                uidRecordLOSP.forEachProcess(this.mGetBackgroundStartPrivilegesFunctor);
                BackgroundStartPrivileges result = this.mGetBackgroundStartPrivilegesFunctor.getResult();
                resetPriorityAfterProcLockedSection();
                return result;
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    @GuardedBy(anyOf = {"this", "mProcLock"})
    private boolean isProcessInStateToScheduleUserInitiatedJobsLocked(ProcessRecord processRecord, long j) {
        if (processRecord == null) {
            return false;
        }
        if (processRecord.getBackgroundStartPrivileges().allowsBackgroundActivityStarts()) {
            return true;
        }
        ProcessStateRecord processStateRecord = processRecord.mState;
        int curProcState = processStateRecord.getCurProcState();
        if (curProcState <= 3 && doesReasonCodeAllowSchedulingUserInitiatedJobs(PowerExemptionManager.getReasonCodeFromProcState(curProcState))) {
            return true;
        }
        long lastInvisibleTime = processStateRecord.getLastInvisibleTime();
        if (lastInvisibleTime > 0 && lastInvisibleTime < Long.MAX_VALUE && j - lastInvisibleTime < this.mConstants.mVisibleToInvisibleUijScheduleGraceDurationMs) {
            return true;
        }
        ProcessServiceRecord processServiceRecord = processRecord.mServices;
        if (processServiceRecord != null && processServiceRecord.hasForegroundServices()) {
            for (int numberOfRunningServices = processServiceRecord.numberOfRunningServices() - 1; numberOfRunningServices >= 0; numberOfRunningServices--) {
                ServiceRecord runningServiceAt = processServiceRecord.getRunningServiceAt(numberOfRunningServices);
                if (runningServiceAt.isForeground && runningServiceAt.mAllowUiJobScheduling) {
                    return true;
                }
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean canScheduleUserInitiatedJobs(int i, int i2, String str) {
        ProcessRecord processRecord;
        BackgroundStartPrivileges backgroundStartPrivileges;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    processRecord = this.mPidsSelfLocked.get(i2);
                }
                long elapsedRealtime = SystemClock.elapsedRealtime();
                if (processRecord != null) {
                    if (isProcessInStateToScheduleUserInitiatedJobsLocked(processRecord, elapsedRealtime)) {
                        resetPriorityAfterLockedSection();
                        return true;
                    }
                    backgroundStartPrivileges = processRecord.getBackgroundStartPrivileges();
                } else {
                    backgroundStartPrivileges = getBackgroundStartPrivileges(i);
                }
                BackgroundStartPrivileges backgroundStartPrivileges2 = backgroundStartPrivileges;
                if (backgroundStartPrivileges2.allowsBackgroundActivityStarts()) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                if (this.mServices.canAllowWhileInUsePermissionInFgsLocked(i2, i, str, processRecord, backgroundStartPrivileges2)) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                UidRecord uidRecordLOSP = this.mProcessList.getUidRecordLOSP(i);
                if (uidRecordLOSP != null) {
                    for (int numOfProcs = uidRecordLOSP.getNumOfProcs() - 1; numOfProcs >= 0; numOfProcs--) {
                        if (isProcessInStateToScheduleUserInitiatedJobsLocked(uidRecordLOSP.getProcessRecordByIndex(numOfProcs), elapsedRealtime)) {
                            resetPriorityAfterLockedSection();
                            return true;
                        }
                    }
                }
                if (this.mAtmInternal.hasSystemAlertWindowPermission(i, i2, str)) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                if (this.mInternal.isAssociatedCompanionApp(UserHandle.getUserId(i), i) && checkPermission("android.permission.REQUEST_COMPANION_RUN_IN_BACKGROUND", i2, i) == 0) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                resetPriorityAfterLockedSection();
                return false;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    @GuardedBy(anyOf = {"this", "mProcLock"})
    String getPendingTempAllowlistTagForUidLOSP(int i) {
        PendingTempAllowlist pendingTempAllowlist = this.mPendingTempAllowlist.get(i);
        if (pendingTempAllowlist != null) {
            return pendingTempAllowlist.tag;
        }
        return null;
    }

    @VisibleForTesting
    public void grantImplicitAccess(int i, Intent intent, int i2, int i3) {
        getPackageManagerInternal().grantImplicitAccess(i, intent, i3, i2, true);
    }

    public int checkUriPermission(Uri uri, int i, int i2, int i3, int i4, IBinder iBinder) {
        enforceNotIsolatedCaller("checkUriPermission");
        if (i == MY_PID) {
            return 0;
        }
        return ((i2 == 0 || !this.mPackageManagerInt.filterAppAccess(i2, Binder.getCallingUid())) && this.mUgmInternal.checkUriPermission(new GrantUri(i4, uri, i3), i2, i3)) ? 0 : -1;
    }

    public int[] checkUriPermissions(List<Uri> list, int i, int i2, int i3, int i4, IBinder iBinder) {
        int size = list.size();
        int[] iArr = new int[size];
        Arrays.fill(iArr, -1);
        for (int i5 = 0; i5 < size; i5++) {
            Uri uri = list.get(i5);
            iArr[i5] = checkUriPermission(ContentProvider.getUriWithoutUserId(uri), i, i2, i3, ContentProvider.getUserIdFromUri(uri, i4), iBinder);
        }
        return iArr;
    }

    public void grantUriPermission(IApplicationThread iApplicationThread, String str, Uri uri, int i, int i2) {
        enforceNotIsolatedCaller("grantUriPermission");
        GrantUri grantUri = new GrantUri(i2, uri, i);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                if (recordForAppLOSP == null) {
                    throw new SecurityException("Unable to find app for caller " + iApplicationThread + " when granting permission to uri " + grantUri);
                }
                if (str == null) {
                    throw new IllegalArgumentException("null target");
                }
                int userId = UserHandle.getUserId(recordForAppLOSP.uid);
                if (this.mPackageManagerInt.filterAppAccess(str, recordForAppLOSP.uid, userId)) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                Preconditions.checkFlagsArgument(i, 195);
                Intent intent = new Intent();
                intent.setData(uri);
                intent.setFlags(i);
                this.mUgmInternal.grantUriPermissionUncheckedFromIntent(this.mUgmInternal.checkGrantUriPermissionFromIntent(intent, recordForAppLOSP.uid, str, userId), (UriPermissionOwner) null);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void revokeUriPermission(IApplicationThread iApplicationThread, String str, Uri uri, int i, int i2) {
        enforceNotIsolatedCaller("revokeUriPermission");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                if (recordForAppLOSP == null) {
                    throw new SecurityException("Unable to find app for caller " + iApplicationThread + " when revoking permission to uri " + uri);
                }
                if (uri == null) {
                    Slog.w("ActivityManager", "revokeUriPermission: null uri");
                    resetPriorityAfterLockedSection();
                    return;
                }
                if (!Intent.isAccessUriMode(i)) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                if (this.mCpHelper.getProviderInfoLocked(uri.getAuthority(), i2, 786432) == null) {
                    Slog.w("ActivityManager", "No content provider found for permission revoke: " + uri.toSafeString());
                    resetPriorityAfterLockedSection();
                    return;
                }
                this.mUgmInternal.revokeUriPermission(str, recordForAppLOSP.uid, new GrantUri(i2, uri, i), i);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void showWaitingForDebugger(IApplicationThread iApplicationThread, boolean z) {
        ProcessRecord recordForAppLOSP;
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            if (iApplicationThread != null) {
                try {
                    recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            } else {
                recordForAppLOSP = null;
            }
            if (recordForAppLOSP == null) {
                resetPriorityAfterProcLockedSection();
                return;
            }
            Message obtain = Message.obtain();
            obtain.what = 6;
            obtain.obj = recordForAppLOSP;
            obtain.arg1 = z ? 1 : 0;
            this.mUiHandler.sendMessage(obtain);
            resetPriorityAfterProcLockedSection();
        }
    }

    public void getMemoryInfo(ActivityManager.MemoryInfo memoryInfo) {
        this.mProcessList.getMemoryInfo(memoryInfo);
    }

    public List<ActivityManager.RunningTaskInfo> getTasks(int i) {
        return this.mActivityTaskManager.getTasks(i);
    }

    public void cancelTaskWindowTransition(int i) {
        this.mActivityTaskManager.cancelTaskWindowTransition(i);
    }

    public void setTaskResizeable(int i, int i2) {
        this.mActivityTaskManager.setTaskResizeable(i, i2);
    }

    public void resizeTask(int i, Rect rect, int i2) {
        this.mActivityTaskManager.resizeTask(i, rect, i2);
    }

    public Rect getTaskBounds(int i) {
        return this.mActivityTaskManager.getTaskBounds(i);
    }

    public boolean removeTask(int i) {
        return this.mActivityTaskManager.removeTask(i);
    }

    public void moveTaskToFront(IApplicationThread iApplicationThread, String str, int i, int i2, Bundle bundle) {
        this.mActivityTaskManager.moveTaskToFront(iApplicationThread, str, i, i2, bundle);
    }

    public boolean moveActivityTaskToBack(IBinder iBinder, boolean z) {
        return ActivityClient.getInstance().moveActivityTaskToBack(iBinder, z);
    }

    public void moveTaskToRootTask(int i, int i2, boolean z) {
        this.mActivityTaskManager.moveTaskToRootTask(i, i2, z);
    }

    public ParceledListSlice<ActivityManager.RecentTaskInfo> getRecentTasks(int i, int i2, int i3) {
        return this.mActivityTaskManager.getRecentTasks(i, i2, i3);
    }

    public List<ActivityTaskManager.RootTaskInfo> getAllRootTaskInfos() {
        return this.mActivityTaskManager.getAllRootTaskInfos();
    }

    public int getTaskForActivity(IBinder iBinder, boolean z) {
        return ActivityClient.getInstance().getTaskForActivity(iBinder, z);
    }

    public void updateLockTaskPackages(int i, String[] strArr) {
        this.mActivityTaskManager.updateLockTaskPackages(i, strArr);
    }

    public boolean isInLockTaskMode() {
        return this.mActivityTaskManager.isInLockTaskMode();
    }

    public int getLockTaskModeState() {
        return this.mActivityTaskManager.getLockTaskModeState();
    }

    public void startSystemLockTaskMode(int i) throws RemoteException {
        this.mActivityTaskManager.startSystemLockTaskMode(i);
    }

    @VisibleForTesting
    public IPackageManager getPackageManager() {
        return AppGlobals.getPackageManager();
    }

    @VisibleForTesting
    public PackageManagerInternal getPackageManagerInternal() {
        if (this.mPackageManagerInt == null) {
            this.mPackageManagerInt = (PackageManagerInternal) LocalServices.getService(PackageManagerInternal.class);
        }
        return this.mPackageManagerInt;
    }

    private PermissionManagerServiceInternal getPermissionManagerInternal() {
        if (this.mPermissionManagerInt == null) {
            this.mPermissionManagerInt = (PermissionManagerServiceInternal) LocalServices.getService(PermissionManagerServiceInternal.class);
        }
        return this.mPermissionManagerInt;
    }

    private TestUtilityService getTestUtilityServiceLocked() {
        if (this.mTestUtilityService == null) {
            this.mTestUtilityService = (TestUtilityService) LocalServices.getService(TestUtilityService.class);
        }
        return this.mTestUtilityService;
    }

    public void appNotResponding(String str) {
        appNotResponding(str, false);
    }

    public void appNotResponding(String str, boolean z) {
        TimeoutRecord forApp = TimeoutRecord.forApp("App requested: " + str);
        int callingPid = Binder.getCallingPid();
        forApp.mLatencyTracker.waitingOnPidLockStarted();
        synchronized (this.mPidsSelfLocked) {
            forApp.mLatencyTracker.waitingOnPidLockEnded();
            ProcessRecord processRecord = this.mPidsSelfLocked.get(callingPid);
            if (processRecord == null) {
                throw new SecurityException("Unknown process: " + callingPid);
            }
            this.mAnrHelper.appNotResponding(processRecord, null, processRecord.info, null, null, false, forApp, z);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void appNotResponding(ProcessRecord processRecord, TimeoutRecord timeoutRecord) {
        this.mAnrHelper.appNotResponding(processRecord, timeoutRecord);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void appNotResponding(String str, int i, TimeoutRecord timeoutRecord) {
        Objects.requireNonNull(str);
        Objects.requireNonNull(timeoutRecord);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord processRecordLocked = getProcessRecordLocked(str, i);
                if (processRecordLocked == null) {
                    Slog.e("ActivityManager", "Unknown process: " + str);
                    resetPriorityAfterLockedSection();
                    return;
                }
                this.mAnrHelper.appNotResponding(processRecordLocked, timeoutRecord);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void startPersistentApps(int i) {
        ProcessRecord addAppLocked;
        if (this.mFactoryTest == 1) {
            return;
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                try {
                    List<ApplicationInfo> list = AppGlobals.getPackageManager().getPersistentApplications(i | 1024).getList();
                    this.mActivityManagerServiceExt.reorderPersistAppsIfNeeded(list);
                    for (ApplicationInfo applicationInfo : list) {
                        if (!"android".equals(applicationInfo.packageName) && (addAppLocked = addAppLocked(applicationInfo, null, false, null, 2)) != null) {
                            addAppLocked.mProfile.addHostingComponentType(2);
                        }
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (RemoteException unused) {
            }
        }
        resetPriorityAfterLockedSection();
    }

    public ContentProviderHelper getContentProviderHelper() {
        return this.mCpHelper;
    }

    public final ContentProviderHolder getContentProvider(IApplicationThread iApplicationThread, String str, String str2, int i, boolean z) {
        traceBegin(64L, "getContentProvider: ", str2);
        try {
            return this.mCpHelper.getContentProvider(iApplicationThread, str, str2, i, z);
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public ContentProviderHolder getContentProviderExternal(String str, int i, IBinder iBinder, String str2) {
        traceBegin(64L, "getContentProviderExternal: ", str);
        try {
            return this.mCpHelper.getContentProviderExternal(str, i, iBinder, str2);
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public void removeContentProvider(IBinder iBinder, boolean z) {
        this.mCpHelper.removeContentProvider(iBinder, z);
    }

    @Deprecated
    public void removeContentProviderExternal(String str, IBinder iBinder) {
        traceBegin(64L, "removeContentProviderExternal: ", str);
        try {
            removeContentProviderExternalAsUser(str, iBinder, UserHandle.getCallingUserId());
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public void removeContentProviderExternalAsUser(String str, IBinder iBinder, int i) {
        traceBegin(64L, "removeContentProviderExternalAsUser: ", str);
        try {
            this.mCpHelper.removeContentProviderExternalAsUser(str, iBinder, i);
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public final void publishContentProviders(IApplicationThread iApplicationThread, List<ContentProviderHolder> list) {
        ProviderInfo providerInfo;
        String str;
        if (Trace.isTagEnabled(64L)) {
            StringBuilder sb = new StringBuilder(256);
            sb.append("publishContentProviders: ");
            if (list != null) {
                int size = list.size();
                boolean z = true;
                int i = 0;
                while (true) {
                    if (i >= size) {
                        break;
                    }
                    ContentProviderHolder contentProviderHolder = list.get(i);
                    if (contentProviderHolder != null && (providerInfo = contentProviderHolder.info) != null && (str = providerInfo.authority) != null) {
                        if (sb.length() + str.length() > 256) {
                            sb.append("[[TRUNCATED]]");
                            break;
                        }
                        if (z) {
                            z = false;
                        } else {
                            sb.append(';');
                        }
                        sb.append(contentProviderHolder.info.authority);
                    }
                    i++;
                }
            }
            Trace.traceBegin(64L, sb.toString());
        }
        try {
            this.mCpHelper.publishContentProviders(iApplicationThread, list);
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public boolean refContentProvider(IBinder iBinder, int i, int i2) {
        return this.mCpHelper.refContentProvider(iBinder, i, i2);
    }

    public void unstableProviderDied(IBinder iBinder) {
        this.mCpHelper.unstableProviderDied(iBinder);
    }

    public void appNotRespondingViaProvider(IBinder iBinder) {
        this.mCpHelper.appNotRespondingViaProvider(iBinder);
    }

    public void getMimeTypeFilterAsync(Uri uri, int i, RemoteCallback remoteCallback) {
        this.mCpHelper.getMimeTypeFilterAsync(uri, i, remoteCallback);
    }

    @GuardedBy(anyOf = {"this", "mProcLock"})
    private boolean uidOnBackgroundAllowlistLOSP(int i) {
        int appId = UserHandle.getAppId(i);
        for (int i2 : this.mBackgroundAppIdAllowlist) {
            if (appId == i2) {
                return true;
            }
        }
        return false;
    }

    public boolean isBackgroundRestricted(String str) {
        int callingUid = Binder.getCallingUid();
        if (AppGlobals.getPackageManager().getPackageUid(str, 268435456L, UserHandle.getUserId(callingUid)) != callingUid) {
            throw new IllegalArgumentException("Uid " + callingUid + " cannot query restriction state for package " + str);
        }
        return isBackgroundRestrictedNoCheck(callingUid, str);
    }

    @VisibleForTesting
    public boolean isBackgroundRestrictedNoCheck(int i, String str) {
        return getAppOpsManager().checkOpNoThrow(70, i, str) != 0;
    }

    public void backgroundAllowlistUid(int i) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("Only the OS may call backgroundAllowlistUid()");
        }
        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
            Slog.i("ActivityManager", "Adding uid " + i + " to bg uid allowlist");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        int[] iArr = this.mBackgroundAppIdAllowlist;
                        int length = iArr.length;
                        int[] iArr2 = new int[length + 1];
                        System.arraycopy(iArr, 0, iArr2, 0, length);
                        iArr2[length] = UserHandle.getAppId(i);
                        this.mBackgroundAppIdAllowlist = iArr2;
                    } catch (Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final ProcessRecord addAppLocked(ApplicationInfo applicationInfo, String str, boolean z, String str2, int i) {
        return addAppLocked(applicationInfo, str, z, false, str2, i);
    }

    @GuardedBy({"this"})
    final ProcessRecord addAppLocked(ApplicationInfo applicationInfo, String str, boolean z, boolean z2, String str2, int i) {
        return addAppLocked(applicationInfo, str, z, z2, false, str2, i);
    }

    @GuardedBy({"this"})
    final ProcessRecord addAppLocked(ApplicationInfo applicationInfo, String str, boolean z, boolean z2, boolean z3, String str2, int i) {
        return addAppLocked(applicationInfo, str, z, false, 0, null, z2, z3, str2, i);
    }

    final ProcessRecord addAppLocked(ApplicationInfo applicationInfo, String str, boolean z, boolean z2, int i, String str2, boolean z3, boolean z4, String str3, int i2) {
        ProcessRecord processRecord;
        if (z) {
            processRecord = null;
        } else {
            processRecord = getProcessRecordLocked(str != null ? str : applicationInfo.processName, applicationInfo.uid);
        }
        if (processRecord == null) {
            processRecord = this.mProcessList.newProcessRecordLocked(applicationInfo, str, z, 0, z2, i, str2, new HostingRecord(HostingRecord.HOSTING_TYPE_ADDED_APPLICATION, str != null ? str : applicationInfo.processName));
            updateLruProcessLocked(processRecord, false, null);
            updateOomAdjLocked(processRecord, 11);
        }
        this.mUsageStatsService.reportEvent(applicationInfo.packageName, UserHandle.getUserId(processRecord.uid), 31);
        if (!z2) {
            try {
                this.mPackageManagerInt.setPackageStoppedState(applicationInfo.packageName, false, UserHandle.getUserId(processRecord.uid));
            } catch (IllegalArgumentException e) {
                Slog.w("ActivityManager", "Failed trying to unstop package " + applicationInfo.packageName + ": " + e);
            }
        }
        if ((applicationInfo.flags & 9) == 9) {
            processRecord.setPersistent(true);
            processRecord.mState.setMaxAdj(ProcessList.PERSISTENT_PROC_ADJ);
        }
        if (processRecord.getThread() == null && this.mPersistentStartingProcesses.indexOf(processRecord) < 0) {
            this.mPersistentStartingProcesses.add(processRecord);
            this.mProcessList.startProcessLocked(processRecord, new HostingRecord(HostingRecord.HOSTING_TYPE_ADDED_APPLICATION, str != null ? str : processRecord.processName), i2, z3, z4, str3);
        }
        return processRecord;
    }

    public void unhandledBack() {
        this.mActivityTaskManager.unhandledBack();
    }

    public ParcelFileDescriptor openContentUri(String str) throws RemoteException {
        AndroidPackage androidPackage;
        enforceNotIsolatedCaller("openContentUri");
        int callingUserId = UserHandle.getCallingUserId();
        Uri parse = Uri.parse(str);
        String authority = parse.getAuthority();
        ContentProviderHolder contentProviderExternalUnchecked = this.mCpHelper.getContentProviderExternalUnchecked(authority, null, Binder.getCallingUid(), "*opencontent*", callingUserId);
        if (contentProviderExternalUnchecked != null) {
            try {
                int callingUid = Binder.getCallingUid();
                String resolvePackageName = AppOpsManager.resolvePackageName(callingUid, null);
                if (resolvePackageName != null) {
                    androidPackage = this.mPackageManagerInt.getPackage(resolvePackageName);
                } else {
                    androidPackage = this.mPackageManagerInt.getPackage(callingUid);
                }
                if (androidPackage == null) {
                    Log.e("ActivityManager", "Cannot find package for uid: " + callingUid);
                } else {
                    ApplicationInfo applicationInfo = this.mPackageManagerInt.getApplicationInfo(androidPackage.getPackageName(), 0L, 1000, 0);
                    if (!applicationInfo.isVendor() && !applicationInfo.isSystemApp() && !applicationInfo.isSystemExt() && !applicationInfo.isProduct()) {
                        Log.e("ActivityManager", "openContentUri may only be used by vendor/system/product.");
                    } else {
                        return contentProviderExternalUnchecked.provider.openFile(new AttributionSource(Binder.getCallingUid(), androidPackage.getPackageName(), null), parse, "r", (ICancellationSignal) null);
                    }
                }
                return null;
            } catch (FileNotFoundException unused) {
                return null;
            } finally {
                this.mCpHelper.removeContentProviderExternalUnchecked(authority, null, callingUserId);
            }
        }
        Slog.d("ActivityManager", "Failed to get provider for authority '" + authority + "'");
        return null;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void reportGlobalUsageEvent(int i) {
        int currentUserId = this.mUserController.getCurrentUserId();
        this.mUsageStatsService.reportEvent("android", currentUserId, i);
        int[] currentProfileIds = this.mUserController.getCurrentProfileIds();
        if (currentProfileIds != null) {
            for (int length = currentProfileIds.length - 1; length >= 0; length--) {
                if (currentProfileIds[length] != currentUserId) {
                    this.mUsageStatsService.reportEvent("android", currentProfileIds[length], i);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void reportCurWakefulnessUsageEvent() {
        reportGlobalUsageEvent(this.mWakefulness.get() == 1 ? 15 : 16);
    }

    void onWakefulnessChanged(int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                boolean z = this.mWakefulness.getAndSet(i) == 1;
                boolean z2 = i == 1;
                if (isScreenOn != z2) {
                    isScreenOn = z2;
                    this.mActivityManagerServiceExt.ormsSetNotification(z2);
                }
                if (z != z2) {
                    this.mServices.updateScreenStateLocked(z2);
                    reportCurWakefulnessUsageEvent();
                    this.mActivityTaskManager.onScreenAwakeChanged(z2);
                    this.mOomAdjProfiler.onWakefulnessChanged(i);
                    this.mOomAdjuster.onWakefulnessChanged(i);
                    updateOomAdjLocked(9);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void notifyCleartextNetwork(int i, byte[] bArr) {
        this.mHandler.obtainMessage(49, i, 0, bArr).sendToTarget();
    }

    public boolean shutdown(int i) {
        if (checkCallingPermission("android.permission.SHUTDOWN") != 0) {
            throw new SecurityException("Requires permission android.permission.SHUTDOWN");
        }
        boolean shuttingDown = this.mAtmInternal.shuttingDown(this.mBooted, i);
        this.mAppOpsService.shutdown();
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.prepareShutdown();
        }
        this.mBatteryStatsService.shutdown();
        this.mProcessStats.shutdown();
        return shuttingDown;
    }

    public void notifyLockedProfile(int i) {
        this.mAtmInternal.notifyLockedProfile(i);
    }

    public void startConfirmDeviceCredentialIntent(Intent intent, Bundle bundle) {
        this.mAtmInternal.startConfirmDeviceCredentialIntent(intent, bundle);
    }

    public void stopAppSwitches() {
        this.mActivityTaskManager.stopAppSwitches();
    }

    public void resumeAppSwitches() {
        this.mActivityTaskManager.resumeAppSwitches();
    }

    public void setDebugApp(String str, boolean z, boolean z2) {
        setDebugApp(str, z, z2, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setDebugApp(String str, boolean z, boolean z2, boolean z3) {
        enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDebugApp()");
        long clearCallingIdentity = Binder.clearCallingIdentity();
        boolean z4 = true;
        if (z2) {
            try {
                ContentResolver contentResolver = this.mContext.getContentResolver();
                Settings.Global.putString(contentResolver, "debug_app", str);
                Settings.Global.putInt(contentResolver, "wait_for_debugger", z ? 1 : 0);
            } finally {
                Binder.restoreCallingIdentity(clearCallingIdentity);
            }
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            if (!z2) {
                try {
                    this.mOrigDebugApp = this.mDebugApp;
                    this.mOrigWaitForDebugger = this.mWaitForDebugger;
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            this.mDebugApp = str;
            this.mWaitForDebugger = z;
            this.mSuspendUponWait = z3;
            if (z2) {
                z4 = false;
            }
            this.mDebugTransient = z4;
            if (str != null) {
                forceStopPackageLocked(str, -1, false, false, true, true, false, -1, "set debug app");
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void setAgentApp(String str, String str2) {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            this.mAppProfiler.setAgentAppLPf(str, str2);
        }
    }

    void setTrackAllocationApp(ApplicationInfo applicationInfo, String str) {
        enforceDebuggable(applicationInfo);
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mTrackAllocationApp = str;
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void setProfileApp(ApplicationInfo applicationInfo, String str, ProfilerInfo profilerInfo, ApplicationInfo applicationInfo2) {
        synchronized (this.mAppProfiler.mProfilerLock) {
            if (!Build.IS_DEBUGGABLE) {
                boolean z = true;
                boolean z2 = (applicationInfo.flags & 2) != 0;
                boolean isProfileableByShell = applicationInfo.isProfileableByShell();
                if (applicationInfo2 != null) {
                    if ((applicationInfo2.flags & 2) == 0) {
                        z = false;
                    }
                    z2 |= z;
                    isProfileableByShell |= applicationInfo2.isProfileableByShell();
                }
                if (!z2 && !isProfileableByShell) {
                    throw new SecurityException("Process not debuggable, and not profileable by shell: " + applicationInfo.packageName);
                }
            }
            this.mAppProfiler.setProfileAppLPf(str, profilerInfo);
        }
    }

    void setNativeDebuggingAppLocked(ApplicationInfo applicationInfo, String str) {
        enforceDebuggable(applicationInfo);
        this.mNativeDebuggingApp = str;
    }

    public void setAlwaysFinish(boolean z) {
        enforceCallingPermission("android.permission.SET_ALWAYS_FINISH", "setAlwaysFinish()");
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            Settings.Global.putInt(this.mContext.getContentResolver(), "always_finish_activities", z ? 1 : 0);
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    this.mAlwaysFinishActivities = z;
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void setActivityController(IActivityController iActivityController, boolean z) {
        if (iActivityController != null) {
            Binder.allowBlocking(iActivityController.asBinder());
        }
        this.mActivityTaskManager.setActivityController(iActivityController, z);
    }

    public void setUserIsMonkey(boolean z) {
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    int callingPid = Binder.getCallingPid();
                    ProcessRecord processRecord = this.mPidsSelfLocked.get(callingPid);
                    if (processRecord == null) {
                        throw new SecurityException("Unknown process: " + callingPid);
                    }
                    if (processRecord.getActiveInstrumentation() == null || processRecord.getActiveInstrumentation().mUiAutomationConnection == null) {
                        throw new SecurityException("Only an instrumentation process with a UiAutomation can call setUserIsMonkey");
                    }
                }
                this.mUserIsMonkey = z;
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public boolean isUserAMonkey() {
        boolean z;
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                z = this.mUserIsMonkey || this.mActivityTaskManager.isControllerAMonkey();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return z;
    }

    public void requestSystemServerHeapDump() {
        ProcessRecord processRecord;
        if (!Build.IS_DEBUGGABLE) {
            Slog.wtf("ActivityManager", "requestSystemServerHeapDump called on a user build");
            return;
        }
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("Only the system process is allowed to request a system heap dump");
        }
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(Process.myPid());
        }
        if (processRecord == null) {
            Slog.w("ActivityManager", "system process not in mPidsSelfLocked: " + Process.myPid());
            return;
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            this.mAppProfiler.startHeapDumpLPf(processRecord.mProfile, true);
        }
    }

    public void requestBugReport(int i) {
        requestBugReportWithDescription(null, null, i, 0L);
    }

    public void requestBugReportWithDescription(String str, String str2, int i) {
        requestBugReportWithDescription(str, str2, i, 0L);
    }

    public void requestBugReportWithDescription(String str, String str2, int i, long j) {
        String str3;
        if (i == 0) {
            str3 = "bugreportfull";
        } else if (i == 1) {
            str3 = "bugreportplus";
        } else if (i == 2) {
            str3 = "bugreportremote";
        } else if (i == 3) {
            str3 = "bugreportwear";
        } else if (i == 4) {
            str3 = "bugreporttelephony";
        } else {
            if (i != 5) {
                throw new IllegalArgumentException("Provided bugreport type is not correct, value: " + i);
            }
            str3 = "bugreportwifi";
        }
        Slog.i("ActivityManager", str3 + " requested by UID " + Binder.getCallingUid());
        enforceCallingPermission("android.permission.DUMP", "requestBugReport");
        if (!TextUtils.isEmpty(str)) {
            if (str.length() > 100) {
                throw new IllegalArgumentException("shareTitle should be less than 100 characters");
            }
            if (!TextUtils.isEmpty(str2) && str2.length() > 150) {
                throw new IllegalArgumentException("shareDescription should be less than 150 characters");
            }
            Slog.d("ActivityManager", "Bugreport notification title " + str + " description " + str2);
        }
        Intent intent = new Intent();
        intent.setAction(INTENT_BUGREPORT_REQUESTED);
        intent.setPackage(SHELL_APP_PACKAGE);
        intent.putExtra(EXTRA_BUGREPORT_TYPE, i);
        intent.putExtra(EXTRA_BUGREPORT_NONCE, j);
        intent.addFlags(AudioFormat.EVRC);
        intent.addFlags(16777216);
        if (str != null) {
            intent.putExtra(EXTRA_TITLE, str);
        }
        if (str2 != null) {
            intent.putExtra(EXTRA_DESCRIPTION, str2);
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            if (i == 2) {
                this.mContext.sendBroadcastAsUser(intent, UserHandle.SYSTEM);
            } else {
                this.mContext.sendBroadcastAsUser(intent, getCurrentUser().getUserHandle());
            }
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void requestTelephonyBugReport(String str, String str2) {
        requestBugReportWithDescription(str, str2, 4);
    }

    public void requestWifiBugReport(String str, String str2) {
        requestBugReportWithDescription(str, str2, 5);
    }

    public void requestInteractiveBugReport() {
        requestBugReportWithDescription(null, null, 1);
    }

    public void requestInteractiveBugReportWithDescription(String str, String str2) {
        requestBugReportWithDescription(str, str2, 1);
    }

    public void requestFullBugReport() {
        requestBugReportWithDescription(null, null, 0);
    }

    public void requestRemoteBugReport(long j) {
        requestBugReportWithDescription(null, null, 2, j);
    }

    public boolean launchBugReportHandlerApp() {
        Context createContextAsUser = this.mContext.createContextAsUser(getCurrentUser().getUserHandle(), 0);
        if (!BugReportHandlerUtil.isBugReportHandlerEnabled(createContextAsUser)) {
            return false;
        }
        Slog.i("ActivityManager", "launchBugReportHandlerApp requested by UID " + Binder.getCallingUid());
        enforceCallingPermission("android.permission.DUMP", "launchBugReportHandlerApp");
        return BugReportHandlerUtil.launchBugReportHandlerApp(createContextAsUser);
    }

    public List<String> getBugreportWhitelistedPackages() {
        enforceCallingPermission("android.permission.MANAGE_DEBUGGING", "getBugreportWhitelistedPackages");
        return new ArrayList(SystemConfig.getInstance().getBugreportWhitelistedPackages());
    }

    public void registerProcessObserver(IProcessObserver iProcessObserver) {
        enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "registerProcessObserver()");
        this.mProcessList.registerProcessObserver(iProcessObserver);
    }

    public void unregisterProcessObserver(IProcessObserver iProcessObserver) {
        this.mProcessList.unregisterProcessObserver(iProcessObserver);
    }

    public int getUidProcessState(int i, String str) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidProcessState");
        }
        this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), UserHandle.getUserId(i), false, 2, "getUidProcessState", str);
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                if (this.mPendingStartActivityUids.isPendingTopUid(i)) {
                    resetPriorityAfterProcLockedSection();
                    return 2;
                }
                int uidProcStateLOSP = this.mProcessList.getUidProcStateLOSP(i);
                resetPriorityAfterProcLockedSection();
                return uidProcStateLOSP;
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public int getUidProcessCapabilities(int i, String str) {
        int uidProcessCapabilityLOSP;
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidProcessState");
        }
        this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), UserHandle.getUserId(i), false, 2, "getUidProcessCapabilities", str);
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                uidProcessCapabilityLOSP = this.mProcessList.getUidProcessCapabilityLOSP(i);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return uidProcessCapabilityLOSP;
    }

    public void registerUidObserver(IUidObserver iUidObserver, int i, int i2, String str) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        this.mUidObserverController.register(iUidObserver, i, i2, str, Binder.getCallingUid(), null);
    }

    public IBinder registerUidObserverForUids(IUidObserver iUidObserver, int i, int i2, String str, int[] iArr) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        return this.mUidObserverController.register(iUidObserver, i, i2, str, Binder.getCallingUid(), iArr);
    }

    public void unregisterUidObserver(IUidObserver iUidObserver) {
        this.mUidObserverController.unregister(iUidObserver);
    }

    public void addUidToObserver(IBinder iBinder, String str, int i) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        this.mUidObserverController.addUidToObserver(iBinder, i);
    }

    public void removeUidFromObserver(IBinder iBinder, String str, int i) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        this.mUidObserverController.removeUidFromObserver(iBinder, i);
    }

    public boolean isUidActive(int i, String str) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "isUidActive");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                if (isUidActiveLOSP(i)) {
                    resetPriorityAfterProcLockedSection();
                    return true;
                }
                resetPriorityAfterProcLockedSection();
                return this.mInternal.isPendingTopUid(i);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy(anyOf = {"this", "mProcLock"})
    public boolean isUidActiveLOSP(int i) {
        UidRecord uidRecordLOSP = this.mProcessList.getUidRecordLOSP(i);
        return (uidRecordLOSP == null || uidRecordLOSP.isSetIdle()) ? false : true;
    }

    @RequiresPermission("android.permission.PACKAGE_USAGE_STATS")
    public void registerUidFrozenStateChangedCallback(IUidFrozenStateChangedCallback iUidFrozenStateChangedCallback) {
        Preconditions.checkNotNull(iUidFrozenStateChangedCallback, "callback cannot be null");
        enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidFrozenStateChangedCallback()");
        synchronized (this.mUidFrozenStateChangedCallbackList) {
            if (!this.mUidFrozenStateChangedCallbackList.register(iUidFrozenStateChangedCallback)) {
                Slog.w("ActivityManager", "Failed to register with RemoteCallbackList!");
            }
        }
    }

    @RequiresPermission("android.permission.PACKAGE_USAGE_STATS")
    public void unregisterUidFrozenStateChangedCallback(IUidFrozenStateChangedCallback iUidFrozenStateChangedCallback) {
        Preconditions.checkNotNull(iUidFrozenStateChangedCallback, "callback cannot be null");
        enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "unregisterUidFrozenStateChangedCallback()");
        synchronized (this.mUidFrozenStateChangedCallbackList) {
            this.mUidFrozenStateChangedCallbackList.unregister(iUidFrozenStateChangedCallback);
        }
    }

    @RequiresPermission("android.permission.PACKAGE_USAGE_STATS")
    public int[] getUidFrozenState(int[] iArr) {
        Preconditions.checkNotNull(iArr, "uid array cannot be null");
        enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidFrozenState()");
        int[] iArr2 = new int[iArr.length];
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            for (int i = 0; i < iArr.length; i++) {
                try {
                    UidRecord uidRecord = this.mProcessList.mActiveUids.get(iArr[i]);
                    if (uidRecord != null && uidRecord.areAllProcessesFrozen()) {
                        iArr2[i] = 1;
                    } else {
                        iArr2[i] = 2;
                    }
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterProcLockedSection();
        return iArr2;
    }

    public void reportUidFrozenStateChanged(int[] iArr, int[] iArr2) {
        synchronized (this.mUidFrozenStateChangedCallbackList) {
            int beginBroadcast = this.mUidFrozenStateChangedCallbackList.beginBroadcast();
            for (int i = 0; i < beginBroadcast; i++) {
                try {
                    this.mUidFrozenStateChangedCallbackList.getBroadcastItem(i).onUidFrozenStateChanged(iArr, iArr2);
                } catch (RemoteException unused) {
                }
            }
            this.mUidFrozenStateChangedCallbackList.finishBroadcast();
        }
    }

    public void setPersistentVrThread(int i) {
        this.mActivityTaskManager.setPersistentVrThread(i);
    }

    public static boolean scheduleAsRegularPriority(int i, boolean z) {
        try {
            Process.setThreadScheduler(i, 0, 0);
            return true;
        } catch (IllegalArgumentException e) {
            if (!z) {
                Slog.w("ActivityManager", "Failed to set scheduling policy, thread does not exist:\n" + e);
            }
            return false;
        } catch (SecurityException e2) {
            if (!z) {
                Slog.w("ActivityManager", "Failed to set scheduling policy, not allowed:\n" + e2);
            }
            return false;
        }
    }

    public static boolean scheduleAsFifoPriority(int i, boolean z) {
        try {
            Process.setThreadScheduler(i, 1073741825, 1);
            return true;
        } catch (IllegalArgumentException e) {
            if (z) {
                return false;
            }
            Slog.w("ActivityManager", "Failed to set scheduling policy, thread does not exist:\n" + e);
            return false;
        } catch (SecurityException e2) {
            if (z) {
                return false;
            }
            Slog.w("ActivityManager", "Failed to set scheduling policy, not allowed:\n" + e2);
            return false;
        }
    }

    public void setRenderThread(int i) {
        ProcessRecord processRecord;
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                int callingPid = Binder.getCallingPid();
                if (callingPid == Process.myPid()) {
                    demoteSystemServerRenderThread(i);
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                synchronized (this.mPidsSelfLocked) {
                    processRecord = this.mPidsSelfLocked.get(callingPid);
                }
                if (processRecord != null && processRecord.getRenderThreadTid() == 0 && i > 0) {
                    if (!Process.isThreadInProcess(callingPid, i)) {
                        throw new IllegalArgumentException("Render thread does not belong to process");
                    }
                    processRecord.setRenderThreadTid(i);
                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                        Slog.d("UI_FIFO", "Set RenderThread tid " + i + " for pid " + callingPid);
                    }
                    if (processRecord.mState.getCurrentSchedulingGroup() == 3) {
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                            Slog.d("UI_FIFO", "Promoting " + i + "out of band");
                        }
                        if (this.mUseFifoUiScheduling) {
                            Process.setThreadScheduler(processRecord.getRenderThreadTid(), 1073741825, 1);
                        } else {
                            Process.setThreadPriority(processRecord.getRenderThreadTid(), -10);
                        }
                        mUIFirstManagerExt.setRenderThreadTid(processRecord.info.packageName, callingPid, i);
                        int i2 = processRecord.uxValue;
                        if (i2 > 0) {
                            mUIFirstManagerExt.setUxThreadValueByFile(callingPid, i, i2);
                        }
                    }
                } else if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                    Slog.d("UI_FIFO", "Didn't set thread from setRenderThread? PID: " + callingPid + ", TID: " + i + " FIFO: " + this.mUseFifoUiScheduling);
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    private void demoteSystemServerRenderThread(int i) {
        Process.setThreadPriority(i, -4);
    }

    public boolean isVrModePackageEnabled(ComponentName componentName) {
        this.mActivityTaskManager.enforceSystemHasVrFeature();
        return ((VrManagerInternal) LocalServices.getService(VrManagerInternal.class)).hasVrPackage(componentName, UserHandle.getCallingUserId()) == 0;
    }

    public boolean isTopActivityImmersive() {
        return this.mActivityTaskManager.isTopActivityImmersive();
    }

    public boolean isTopOfTask(IBinder iBinder) {
        return ActivityClient.getInstance().isTopOfTask(iBinder);
    }

    public void setHasTopUi(boolean z) throws RemoteException {
        boolean z2;
        if (checkCallingPermission("android.permission.INTERNAL_SYSTEM_WINDOW") != 0) {
            String str = "Permission Denial: setHasTopUi() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.INTERNAL_SYSTEM_WINDOW";
            Slog.w("ActivityManager", str);
            throw new SecurityException(str);
        }
        int callingPid = Binder.getCallingPid();
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    synchronized (this.mPidsSelfLocked) {
                        ProcessRecord processRecord = this.mPidsSelfLocked.get(callingPid);
                        if (processRecord == null) {
                            Slog.w("ActivityManager", "setHasTopUi called on unknown pid: " + callingPid);
                            resetPriorityAfterLockedSection();
                            return;
                        }
                        if (processRecord.mState.hasTopUi() != z) {
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                Slog.d("ActivityManager", "Setting hasTopUi=" + z + " for pid=" + callingPid);
                            }
                            processRecord.mState.setHasTopUi(z);
                            z2 = true;
                        } else {
                            z2 = false;
                        }
                        if (z2) {
                            updateOomAdjLocked(processRecord, 9);
                        }
                        resetPriorityAfterLockedSection();
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final void enterSafeMode() {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!this.mSystemReady) {
                    try {
                        AppGlobals.getPackageManager().enterSafeMode();
                    } catch (RemoteException unused) {
                    }
                }
                this.mSafeMode = true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void showSafeModeOverlay() {
        View inflate = LayoutInflater.from(this.mContext).inflate(R.layout.slice_message, (ViewGroup) null);
        WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams();
        layoutParams.type = 2015;
        layoutParams.width = -2;
        layoutParams.height = -2;
        layoutParams.gravity = 8388691;
        layoutParams.format = inflate.getBackground().getOpacity();
        layoutParams.flags = 24;
        layoutParams.privateFlags |= 16;
        ((WindowManager) this.mContext.getSystemService("window")).addView(inflate, layoutParams);
    }

    public void noteWakeupAlarm(IIntentSender iIntentSender, WorkSource workSource, int i, String str, String str2) {
        int i2;
        WorkSource workSource2 = (workSource == null || !workSource.isEmpty()) ? workSource : null;
        if (i > 0 || workSource2 != null) {
            i2 = i;
        } else {
            if (iIntentSender == null || !(iIntentSender instanceof PendingIntentRecord)) {
                return;
            }
            int callingUid = Binder.getCallingUid();
            int i3 = ((PendingIntentRecord) iIntentSender).uid;
            if (i3 == callingUid) {
                i3 = 1000;
            }
            i2 = i3;
        }
        this.mBatteryStatsService.noteWakupAlarm(str, i2, workSource2, str2);
        if (workSource2 != null) {
            String packageName = workSource2.getPackageName(0);
            int attributionUid = workSource2.getAttributionUid();
            if (packageName == null) {
                packageName = str;
                attributionUid = i2;
            }
            int appStandbyBucket = this.mUsageStatsService != null ? this.mUsageStatsService.getAppStandbyBucket(packageName, UserHandle.getUserId(attributionUid), SystemClock.elapsedRealtime()) : 0;
            FrameworkStatsLog.write(35, workSource2, str2, str, appStandbyBucket);
            if (ActivityManagerDebugConfig.DEBUG_POWER) {
                Slog.w("ActivityManager", "noteWakeupAlarm[ sourcePkg=" + str + ", sourceUid=" + i2 + ", workSource=" + workSource2 + ", tag=" + str2 + ", standbyBucket=" + appStandbyBucket + " wsName=" + packageName + ")]");
                return;
            }
            return;
        }
        int appStandbyBucket2 = this.mUsageStatsService != null ? this.mUsageStatsService.getAppStandbyBucket(str, UserHandle.getUserId(i2), SystemClock.elapsedRealtime()) : 0;
        FrameworkStatsLog.write_non_chained(35, i2, (String) null, str2, str, appStandbyBucket2);
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            Slog.w("ActivityManager", "noteWakeupAlarm[ sourcePkg=" + str + ", sourceUid=" + i2 + ", workSource=" + workSource2 + ", tag=" + str2 + ", standbyBucket=" + appStandbyBucket2 + "]");
        }
    }

    public void noteAlarmStart(IIntentSender iIntentSender, WorkSource workSource, int i, String str) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (i <= 0 && workSource == null) {
            if (iIntentSender == null || !(iIntentSender instanceof PendingIntentRecord)) {
                return;
            }
            int callingUid = Binder.getCallingUid();
            int i2 = ((PendingIntentRecord) iIntentSender).uid;
            if (i2 == callingUid) {
                i2 = 1000;
            }
            i = i2;
        }
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            Slog.w("ActivityManager", "noteAlarmStart[sourceUid=" + i + ", workSource=" + workSource + ", tag=" + str + "]");
        }
        this.mBatteryStatsService.noteAlarmStart(str, workSource, i);
    }

    public void noteAlarmFinish(IIntentSender iIntentSender, WorkSource workSource, int i, String str) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (i <= 0 && workSource == null) {
            if (iIntentSender == null || !(iIntentSender instanceof PendingIntentRecord)) {
                return;
            }
            int callingUid = Binder.getCallingUid();
            int i2 = ((PendingIntentRecord) iIntentSender).uid;
            if (i2 == callingUid) {
                i2 = 1000;
            }
            i = i2;
        }
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            Slog.w("ActivityManager", "noteAlarmFinish[sourceUid=" + i + ", workSource=" + workSource + ", tag=" + str + "]");
        }
        this.mBatteryStatsService.noteAlarmFinish(str, workSource, i);
    }

    public boolean killPids(int[] iArr, final String str, boolean z) {
        boolean z2;
        int setAdj;
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("killPids only available to the system");
        }
        if (str == null) {
            str = "Unknown";
        }
        final ArrayList arrayList = new ArrayList();
        synchronized (this.mPidsSelfLocked) {
            int i = 0;
            for (int i2 : iArr) {
                ProcessRecord processRecord = this.mPidsSelfLocked.get(i2);
                if (processRecord != null && (setAdj = processRecord.mState.getSetAdj()) > i) {
                    i = setAdj;
                }
            }
            if (i < 999 && i > 900) {
                i = 900;
            }
            if (!z && i < 500) {
                i = 500;
            }
            Slog.w("ActivityManager", "Killing processes " + str + " at adjustment " + i);
            z2 = false;
            for (int i3 : iArr) {
                ProcessRecord processRecord2 = this.mPidsSelfLocked.get(i3);
                if (processRecord2 != null && processRecord2.mState.getSetAdj() >= i && !processRecord2.isKilledByAm()) {
                    arrayList.add(processRecord2);
                    z2 = true;
                }
            }
        }
        if (!arrayList.isEmpty()) {
            this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda23
                @Override // java.lang.Runnable
                public final void run() {
                    ActivityManagerService.this.lambda$killPids$4(arrayList, str);
                }
            });
        }
        return z2;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$killPids$4(ArrayList arrayList, String str) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                int size = arrayList.size();
                for (int i = 0; i < size; i++) {
                    ((ProcessRecord) arrayList.get(i)).killLocked(str, 13, 12, true);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void killUid(int i, int i2, String str) {
        enforceCallingPermission("android.permission.KILL_UID", "killUid");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            this.mProcessList.killPackageProcessesLSP(null, i, i2, ProcessList.PERSISTENT_PROC_ADJ, false, true, true, true, false, false, 13, 11, str != null ? str : "kill uid");
                        } catch (Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void killUidForPermissionChange(int i, int i2, String str) {
        enforceCallingPermission("android.permission.KILL_UID", "killUid");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            this.mProcessList.killPackageProcessesLSP(null, i, i2, ProcessList.PERSISTENT_PROC_ADJ, false, true, true, true, false, false, 8, 0, str != null ? str : "kill uid");
                        } catch (Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean killProcessesBelowForeground(String str) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("killProcessesBelowForeground() only available to system");
        }
        return killProcessesBelowAdj(0, str);
    }

    private boolean killProcessesBelowAdj(int i, String str) {
        boolean z;
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("killProcessesBelowAdj() only available to system");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        synchronized (this.mPidsSelfLocked) {
                            int size = this.mPidsSelfLocked.size();
                            z = false;
                            for (int i2 = 0; i2 < size; i2++) {
                                this.mPidsSelfLocked.keyAt(i2);
                                ProcessRecord valueAt = this.mPidsSelfLocked.valueAt(i2);
                                if (valueAt != null && valueAt.mState.getSetAdj() > i && !valueAt.isKilledByAm()) {
                                    valueAt.killLocked(str, 8, true);
                                    z = true;
                                }
                            }
                        }
                    } catch (Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    public void killProcessesWhenImperceptible(int[] iArr, String str) {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            throw new SecurityException("Requires permission android.permission.FORCE_STOP_PACKAGES");
        }
        int callingUid = Binder.getCallingUid();
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            this.mProcessList.killProcessesWhenImperceptible(iArr, str, callingUid);
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void hang(IBinder iBinder, boolean z) {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        IBinder.DeathRecipient deathRecipient = new IBinder.DeathRecipient() { // from class: com.android.server.am.ActivityManagerService.11
            @Override // android.os.IBinder.DeathRecipient
            public void binderDied() {
                synchronized (this) {
                    notifyAll();
                }
            }
        };
        try {
            iBinder.linkToDeath(deathRecipient, 0);
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    Watchdog.getInstance().setAllowRestart(z);
                    Slog.i("ActivityManager", "Hanging system process at request of pid " + Binder.getCallingPid());
                    synchronized (deathRecipient) {
                        while (iBinder.isBinderAlive()) {
                            try {
                                deathRecipient.wait();
                            } catch (InterruptedException unused) {
                            }
                        }
                    }
                    Watchdog.getInstance().setAllowRestart(true);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        } catch (RemoteException unused2) {
            Slog.w("ActivityManager", "hang: given caller IBinder is already dead.");
        }
    }

    public void restart() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        Log.i("ActivityManager", "Sending shutdown broadcast...");
        BroadcastReceiver broadcastReceiver = new BroadcastReceiver() { // from class: com.android.server.am.ActivityManagerService.12
            @Override // android.content.BroadcastReceiver
            public void onReceive(Context context, Intent intent) {
                Log.i("ActivityManager", "Shutting down activity manager...");
                ActivityManagerService.this.shutdown(10000);
                Log.i("ActivityManager", "Shutdown complete, restarting!");
                Process.killProcess(Process.myPid());
                System.exit(10);
            }
        };
        Intent intent = new Intent("android.intent.action.ACTION_SHUTDOWN");
        intent.addFlags(AudioFormat.EVRC);
        intent.putExtra("android.intent.extra.SHUTDOWN_USERSPACE_ONLY", true);
        broadcastReceiver.onReceive(this.mContext, intent);
    }

    public void performIdleMaintenance() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                final long uptimeMillis = SystemClock.uptimeMillis();
                final long j = uptimeMillis - this.mLastIdleTime;
                this.mOomAdjuster.mCachedAppOptimizer.compactAllSystem();
                final long lowRamTimeSinceIdleLPr = this.mAppProfiler.getLowRamTimeSinceIdleLPr(uptimeMillis);
                this.mLastIdleTime = uptimeMillis;
                this.mAppProfiler.updateLowRamTimestampLPr(uptimeMillis);
                StringBuilder sb = new StringBuilder(128);
                sb.append("Idle maintenance over ");
                TimeUtils.formatDuration(j, sb);
                sb.append(" low RAM for ");
                TimeUtils.formatDuration(lowRamTimeSinceIdleLPr, sb);
                Slog.i("ActivityManager", sb.toString());
                final boolean z = lowRamTimeSinceIdleLPr > j / 3;
                final long max = Math.max((Process.getTotalMemory() / 1000) / 100, IDeviceIdleControllerExt.ADVANCE_TIME);
                this.mProcessList.forEachLruProcessesLOSP(false, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda13
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.this.lambda$performIdleMaintenance$6(z, max, j, lowRamTimeSinceIdleLPr, uptimeMillis, (ProcessRecord) obj);
                    }
                });
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performIdleMaintenance$6(boolean z, long j, long j2, long j3, long j4, final ProcessRecord processRecord) {
        final long initialIdlePss;
        final long lastPss;
        long lastSwapPss;
        if (processRecord.getThread() == null) {
            return;
        }
        ProcessProfileRecord processProfileRecord = processRecord.mProfile;
        ProcessStateRecord processStateRecord = processRecord.mState;
        int setProcState = processStateRecord.getSetProcState();
        if (!processStateRecord.isNotCachedSinceIdle()) {
            if (setProcState >= 14 || setProcState < 0) {
                return;
            }
            processStateRecord.setNotCachedSinceIdle(true);
            synchronized (this.mAppProfiler.mProfilerLock) {
                processProfileRecord.setInitialIdlePss(0L);
                this.mAppProfiler.updateNextPssTimeLPf(processStateRecord.getSetProcState(), processRecord.mProfile, j4, true);
            }
            return;
        }
        if (setProcState < 5 || setProcState > 10) {
            return;
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            initialIdlePss = processProfileRecord.getInitialIdlePss();
            lastPss = processProfileRecord.getLastPss();
            lastSwapPss = processProfileRecord.getLastSwapPss();
        }
        if (!z || initialIdlePss == 0 || lastPss <= (3 * initialIdlePss) / 2 || lastPss <= initialIdlePss + j) {
            return;
        }
        StringBuilder sb = new StringBuilder(128);
        sb.append("Kill");
        sb.append(processRecord.processName);
        sb.append(" in idle maint: pss=");
        sb.append(lastPss);
        sb.append(", swapPss=");
        sb.append(lastSwapPss);
        sb.append(", initialPss=");
        sb.append(initialIdlePss);
        sb.append(", period=");
        TimeUtils.formatDuration(j2, sb);
        sb.append(", lowRamPeriod=");
        TimeUtils.formatDuration(j3, sb);
        Slog.wtfQuiet("ActivityManager", sb.toString());
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda30
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.lambda$performIdleMaintenance$5(processRecord, lastPss, initialIdlePss);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performIdleMaintenance$5(ProcessRecord processRecord, long j, long j2) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                processRecord.killLocked("idle maint (pss " + j + " from " + j2 + ")", 13, 6, true);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void sendIdleJobTrigger() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            broadcastIntent(null, new Intent(ACTION_TRIGGER_IDLE).setPackage("android").addFlags(1073741824), null, null, 0, null, null, null, -1, null, false, false, -1);
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    private void retrieveSettings() {
        Resources resources;
        ContentResolver contentResolver = this.mContext.getContentResolver();
        this.mActivityTaskManager.retrieveSettings(contentResolver);
        String string = Settings.Global.getString(contentResolver, "debug_app");
        boolean z = Settings.Global.getInt(contentResolver, "wait_for_debugger", 0) != 0;
        boolean z2 = Settings.Global.getInt(contentResolver, "always_finish_activities", 0) != 0;
        this.mHiddenApiBlacklist.registerObserver();
        this.mPlatformCompat.registerContentObserver();
        this.mAppProfiler.retrieveSettings();
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mOrigDebugApp = string;
                this.mDebugApp = string;
                this.mOrigWaitForDebugger = z;
                this.mWaitForDebugger = z;
                this.mAlwaysFinishActivities = z2;
                resources = this.mContext.getResources();
                this.mUserController.setInitialConfig(resources.getBoolean(R.bool.config_windowSwipeToDismiss) ? false : true, resources.getInteger(R.integer.config_soundEffectVolumeDb), resources.getBoolean(17891760));
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        this.mAppErrors.loadAppsNotReportingCrashesFromConfig(resources.getString(R.string.config_defaultSupervisionProfileOwnerComponent));
    }

    /* JADX WARN: Finally extract failed */
    public void systemReady(Runnable runnable, TimingsTraceAndSlog timingsTraceAndSlog) {
        ArrayList arrayList;
        ((IPackageManagerServiceUtilsExt) ExtLoader.type(IPackageManagerServiceUtilsExt.class).create()).addBootEvent("AMS:systemReady");
        timingsTraceAndSlog.traceBegin("PhaseActivityManagerReady");
        this.mSystemServiceManager.preSystemReady();
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (this.mSystemReady) {
                    if (runnable != null) {
                        runnable.run();
                    }
                    timingsTraceAndSlog.traceEnd();
                    return;
                }
                timingsTraceAndSlog.traceBegin("controllersReady");
                this.mLocalDeviceIdleController = (DeviceIdleInternal) LocalServices.getService(DeviceIdleInternal.class);
                this.mActivityTaskManager.onSystemReady();
                this.mUserController.onSystemReady();
                this.mAppOpsService.systemReady();
                this.mProcessList.onSystemReady();
                this.mAppRestrictionController.onSystemReady();
                this.mSystemReady = true;
                timingsTraceAndSlog.traceEnd();
                resetPriorityAfterLockedSection();
                try {
                    sTheRealBuildSerial = IDeviceIdentifiersPolicyService.Stub.asInterface(ServiceManager.getService("device_identifiers")).getSerial();
                } catch (RemoteException unused) {
                }
                timingsTraceAndSlog.traceBegin("killProcesses");
                synchronized (this.mPidsSelfLocked) {
                    arrayList = null;
                    for (int size = this.mPidsSelfLocked.size() - 1; size >= 0; size--) {
                        ProcessRecord valueAt = this.mPidsSelfLocked.valueAt(size);
                        if (!isAllowedWhileBooting(valueAt.info)) {
                            if (arrayList == null) {
                                arrayList = new ArrayList();
                            }
                            arrayList.add(valueAt);
                        }
                    }
                }
                boostPriorityForLockedSection();
                synchronized (this) {
                    if (arrayList != null) {
                        try {
                            for (int size2 = arrayList.size() - 1; size2 >= 0; size2 += -1) {
                                ProcessRecord processRecord = (ProcessRecord) arrayList.get(size2);
                                Slog.i("ActivityManager", "Removing system update proc: " + processRecord);
                                this.mProcessList.removeProcessLocked(processRecord, true, false, 13, 8, "system update done");
                            }
                        } finally {
                            resetPriorityAfterLockedSection();
                        }
                    }
                    this.mProcessesReady = true;
                }
                resetPriorityAfterLockedSection();
                timingsTraceAndSlog.traceEnd();
                Slog.i("ActivityManager", "System now ready");
                EventLogTags.writeBootProgressAmsReady(SystemClock.uptimeMillis());
                ((IPackageManagerServiceUtilsExt) ExtLoader.type(IPackageManagerServiceUtilsExt.class).create()).addBootEvent("AMS:AMS_READY");
                timingsTraceAndSlog.traceBegin("updateTopComponentForFactoryTest");
                this.mActivityManagerServiceExt.onOplusSystemReady();
                this.mAtmInternal.updateTopComponentForFactoryTest();
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("registerActivityLaunchObserver");
                this.mAtmInternal.getLaunchObserverRegistry().registerLaunchObserver(this.mActivityLaunchObserver);
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("watchDeviceProvisioning");
                watchDeviceProvisioning(this.mContext);
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("retrieveSettings");
                retrieveSettings();
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("Ugm.onSystemReady");
                this.mUgmInternal.onSystemReady();
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("updateForceBackgroundCheck");
                PowerManagerInternal powerManagerInternal = (PowerManagerInternal) LocalServices.getService(PowerManagerInternal.class);
                if (powerManagerInternal != null) {
                    powerManagerInternal.registerLowPowerModeObserver(12, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda7
                        @Override // java.util.function.Consumer
                        public final void accept(Object obj) {
                            ActivityManagerService.this.lambda$systemReady$7((PowerSaveState) obj);
                        }
                    });
                    updateForceBackgroundCheck(powerManagerInternal.getLowPowerState(12).batterySaverEnabled);
                } else {
                    Slog.wtf("ActivityManager", "PowerManagerInternal not found.");
                }
                timingsTraceAndSlog.traceEnd();
                if (runnable != null) {
                    runnable.run();
                }
                timingsTraceAndSlog.traceBegin("getCurrentUser");
                int currentUserId = this.mUserController.getCurrentUserId();
                Slog.i("ActivityManager", "Current user:" + currentUserId);
                if (currentUserId != 0 && !this.mUserController.isSystemUserStarted()) {
                    throw new RuntimeException("System user not started while current user is:" + currentUserId);
                }
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("ActivityManagerStartApps");
                this.mBatteryStatsService.onSystemReady();
                this.mBatteryStatsService.noteEvent(32775, Integer.toString(currentUserId), currentUserId);
                this.mBatteryStatsService.noteEvent(32776, Integer.toString(currentUserId), currentUserId);
                this.mUserController.onSystemUserStarting();
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        timingsTraceAndSlog.traceBegin("startPersistentApps");
                        startPersistentApps(524288);
                        timingsTraceAndSlog.traceEnd();
                        this.mBooting = true;
                        if (SystemProperties.getBoolean(SYSTEM_USER_HOME_NEEDED, false)) {
                            timingsTraceAndSlog.traceBegin("enableHomeActivity");
                            try {
                                AppGlobals.getPackageManager().setComponentEnabledSetting(new ComponentName(this.mContext, (Class<?>) SystemUserHomeActivity.class), 1, 0, 0, "am");
                                timingsTraceAndSlog.traceEnd();
                            } catch (RemoteException e) {
                                throw e.rethrowAsRuntimeException();
                            }
                        }
                        boolean z = currentUserId == 0;
                        if (z && !UserManager.isHeadlessSystemUserMode()) {
                            timingsTraceAndSlog.traceBegin("startHomeOnAllDisplays");
                            this.mAtmInternal.startHomeOnAllDisplays(currentUserId, "systemReady");
                            timingsTraceAndSlog.traceEnd();
                        }
                        timingsTraceAndSlog.traceBegin("showSystemReadyErrorDialogs");
                        this.mAtmInternal.showSystemReadyErrorDialogsIfNeeded();
                        timingsTraceAndSlog.traceEnd();
                        if (z) {
                            timingsTraceAndSlog.traceBegin("sendUserStartBroadcast");
                            int callingUid = Binder.getCallingUid();
                            int callingPid = Binder.getCallingPid();
                            long clearCallingIdentity = Binder.clearCallingIdentity();
                            try {
                                this.mUserController.sendUserStartedBroadcast(currentUserId, callingUid, callingPid);
                                this.mUserController.sendUserStartingBroadcast(currentUserId, callingUid, callingPid);
                            } finally {
                                try {
                                    timingsTraceAndSlog.traceEnd();
                                } finally {
                                }
                            }
                            timingsTraceAndSlog.traceEnd();
                        } else {
                            Slog.i("ActivityManager", "Not sending multi-user broadcasts for non-system user " + currentUserId);
                        }
                        timingsTraceAndSlog.traceBegin("resumeTopActivities");
                        this.mAtmInternal.resumeTopActivities(false);
                        timingsTraceAndSlog.traceEnd();
                        if (z) {
                            timingsTraceAndSlog.traceBegin("sendUserSwitchBroadcasts");
                            this.mUserController.sendUserSwitchBroadcasts(-1, currentUserId);
                            timingsTraceAndSlog.traceEnd();
                        }
                        timingsTraceAndSlog.traceBegin("setBinderProxies");
                        BinderInternal.nSetBinderProxyCountWatermarks(6000, BINDER_PROXY_LOW_WATERMARK);
                        BinderInternal.nSetBinderProxyCountEnabled(true);
                        BinderInternal.setBinderProxyCountCallback(new BinderInternal.BinderProxyLimitListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda8
                            public final void onLimitReached(int i) {
                                ActivityManagerService.this.lambda$systemReady$8(i);
                            }
                        }, this.mHandler);
                        timingsTraceAndSlog.traceEnd();
                        timingsTraceAndSlog.traceEnd();
                        timingsTraceAndSlog.traceBegin("componentAlias");
                        this.mComponentAliasResolver.onSystemReady(this.mConstants.mEnableComponentAlias, this.mConstants.mComponentAliasOverrides);
                        timingsTraceAndSlog.traceEnd();
                        timingsTraceAndSlog.traceEnd();
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
                resetPriorityAfterLockedSection();
                this.mActivityManagerServiceExt.hookSystemReady(this.mUiContext, this.mUiHandler, this.mContext, this);
                this.mActivityManagerServiceExt.isDisableDelayMCPKill(this);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$systemReady$7(PowerSaveState powerSaveState) {
        updateForceBackgroundCheck(powerSaveState.batterySaverEnabled);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$systemReady$8(int i) {
        Slog.wtf("ActivityManager", "Uid " + i + " sent too many Binders to uid " + Process.myUid());
        BinderProxy.dumpProxyDebugInfo();
        if (i == 1000 || i == 1073) {
            Slog.i("ActivityManager", "Skipping kill (uid is SYSTEM)");
        } else {
            killUid(UserHandle.getAppId(i), UserHandle.getUserId(i), "Too many Binders sent to SYSTEM");
            VMRuntime.getRuntime().requestConcurrentGC();
        }
    }

    private void watchDeviceProvisioning(final Context context) {
        if (isDeviceProvisioned(context)) {
            SystemProperties.set(SYSTEM_PROPERTY_DEVICE_PROVISIONED, "1");
        } else {
            context.getContentResolver().registerContentObserver(Settings.Global.getUriFor("device_provisioned"), false, new ContentObserver(new Handler(Looper.getMainLooper())) { // from class: com.android.server.am.ActivityManagerService.13
                @Override // android.database.ContentObserver
                public void onChange(boolean z) {
                    if (ActivityManagerService.this.isDeviceProvisioned(context)) {
                        SystemProperties.set(ActivityManagerService.SYSTEM_PROPERTY_DEVICE_PROVISIONED, "1");
                        context.getContentResolver().unregisterContentObserver(this);
                    }
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isDeviceProvisioned(Context context) {
        return Settings.Global.getInt(context.getContentResolver(), "device_provisioned", 0) != 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void startBroadcastObservers() {
        for (BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.start(this.mContext.getContentResolver());
        }
    }

    private void updateForceBackgroundCheck(boolean z) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        if (this.mForceBackgroundCheck != z) {
                            this.mForceBackgroundCheck = z;
                            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                                StringBuilder sb = new StringBuilder();
                                sb.append("Force background check ");
                                sb.append(z ? "enabled" : "disabled");
                                Slog.i("ActivityManager", sb.toString());
                            }
                            if (this.mForceBackgroundCheck) {
                                this.mProcessList.doStopUidForIdleUidsLocked();
                            }
                        }
                    } catch (Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void killAppAtUsersRequest(ProcessRecord processRecord) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mAppErrors.killAppAtUserRequestLocked(processRecord);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void handleApplicationCrash(IBinder iBinder, ApplicationErrorReport.ParcelableCrashInfo parcelableCrashInfo) {
        String str;
        ProcessRecord findAppProcess = findAppProcess(iBinder, "Crash");
        if (iBinder == null) {
            str = "system_server";
        } else {
            str = findAppProcess == null ? "unknown" : findAppProcess.processName;
        }
        this.mActivityManagerServiceExt.hookHandleApplicationCrashBeforeInner(findAppProcess, parcelableCrashInfo);
        this.mActivityManagerServiceExt.hookHandlerMarketCrash(str, parcelableCrashInfo);
        handleApplicationCrashInner("crash", findAppProcess, str, parcelableCrashInfo);
        this.mActivityManagerServiceExt.handleApplicationCrash(this.mUsageStatsService, iBinder, findAppProcess, 32, Process.myPid());
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void handleApplicationCrashInner(String str, ProcessRecord processRecord, String str2, ApplicationErrorReport.CrashInfo crashInfo) {
        int processClassEnum;
        int i;
        float f;
        long j;
        String str3;
        IncrementalMetrics incrementalMetrics = null;
        if (processRecord != null && processRecord.info != null && processRecord.info.packageName != null) {
            IncrementalStatesInfo incrementalStatesInfo = this.mPackageManagerInt.getIncrementalStatesInfo(processRecord.info.packageName, 1000, processRecord.userId);
            r0 = incrementalStatesInfo != null ? incrementalStatesInfo.getProgress() : 1.0f;
            String codePath = processRecord.info.getCodePath();
            if (codePath != null && !codePath.isEmpty() && IncrementalManager.isIncrementalPath(codePath)) {
                Slog.e("ActivityManager", "App crashed on incremental package " + processRecord.info.packageName + " which is " + ((int) (100.0f * r0)) + "% loaded.");
                IBinder service = ServiceManager.getService("incremental");
                if (service != null) {
                    incrementalMetrics = new IncrementalManager(IIncrementalService.Stub.asInterface(service)).getMetrics(codePath);
                }
            }
        }
        float f2 = r0;
        IncrementalMetrics incrementalMetrics2 = incrementalMetrics;
        boolean equals = str.equals("native_recoverable_crash");
        EventLogTags.writeAmCrash(Binder.getCallingPid(), UserHandle.getUserId(Binder.getCallingUid()), str2, processRecord == null ? -1 : processRecord.info.flags, crashInfo.exceptionClassName, crashInfo.exceptionMessage, crashInfo.throwFileName, crashInfo.throwLineNumber, equals ? 1 : 0);
        if (str2.equals("system_server")) {
            processClassEnum = 3;
        } else {
            processClassEnum = processRecord != null ? processRecord.getProcessClassEnum() : 0;
        }
        int i2 = processRecord != null ? processRecord.uid : -1;
        int pid = processRecord != null ? processRecord.getPid() : -1;
        if (str2.equals("system_server") && (str3 = crashInfo.exceptionMessage) != null && str3.contains("roles.xml") && !"1".equals(SystemProperties.get("sys.boot_completed"))) {
            new File("/data/misc_de/0/apexdata/com.android.permission/roles.xml").delete();
            Slog.d("ActivityManager", "delete damage /data/misc_de/0/apexdata/com.android.permission/roles.xml file.");
        }
        String str4 = "";
        String str5 = (processRecord == null || processRecord.info == null) ? "" : processRecord.info.packageName;
        int i3 = (processRecord == null || processRecord.info == null) ? 0 : processRecord.info.isInstantApp() ? 2 : 1;
        if (processRecord != null) {
            i = processRecord.isInterestingToUserLocked() ? 2 : 1;
        } else {
            i = 0;
        }
        boolean z = incrementalMetrics2 != null;
        long millisSinceOldestPendingRead = incrementalMetrics2 != null ? incrementalMetrics2.getMillisSinceOldestPendingRead() : -1L;
        int storageHealthStatusCode = incrementalMetrics2 != null ? incrementalMetrics2.getStorageHealthStatusCode() : -1;
        int dataLoaderStatusCode = incrementalMetrics2 != null ? incrementalMetrics2.getDataLoaderStatusCode() : -1;
        boolean z2 = incrementalMetrics2 != null && incrementalMetrics2.getReadLogsEnabled();
        long millisSinceLastDataLoaderBind = incrementalMetrics2 != null ? incrementalMetrics2.getMillisSinceLastDataLoaderBind() : -1L;
        long dataLoaderBindDelayMillis = incrementalMetrics2 != null ? incrementalMetrics2.getDataLoaderBindDelayMillis() : -1L;
        int totalDelayedReads = incrementalMetrics2 != null ? incrementalMetrics2.getTotalDelayedReads() : -1;
        int totalFailedReads = incrementalMetrics2 != null ? incrementalMetrics2.getTotalFailedReads() : -1;
        int lastReadErrorUid = incrementalMetrics2 != null ? incrementalMetrics2.getLastReadErrorUid() : -1;
        long millisSinceLastReadError = incrementalMetrics2 != null ? incrementalMetrics2.getMillisSinceLastReadError() : -1L;
        int lastReadErrorNumber = incrementalMetrics2 != null ? incrementalMetrics2.getLastReadErrorNumber() : 0;
        if (incrementalMetrics2 != null) {
            f = f2;
            j = incrementalMetrics2.getTotalDelayedReadsDurationMillis();
        } else {
            f = f2;
            j = -1;
        }
        FrameworkStatsLog.write(78, i2, str, str2, pid, str5, i3, i, processClassEnum, z, f, millisSinceOldestPendingRead, storageHealthStatusCode, dataLoaderStatusCode, z2, millisSinceLastDataLoaderBind, dataLoaderBindDelayMillis, totalDelayedReads, totalFailedReads, lastReadErrorUid, millisSinceLastReadError, lastReadErrorNumber, j);
        if (str.equals("native_crash")) {
            CriticalEventLog.getInstance().logNativeCrash(processClassEnum, str2, i2, pid);
        } else if (str.equals("crash")) {
            CriticalEventLog.getInstance().logJavaCrash(crashInfo.exceptionClassName, processClassEnum, str2, i2, pid);
        }
        this.mActivityManagerServiceExt.sendApplicationStop(this.mHandler, this.mContext, str2, 3);
        String relaunchReasonToString = ActivityTaskManagerService.relaunchReasonToString(processRecord != null ? processRecord.getWindowProcessController().computeRelaunchReason() : 0);
        if (crashInfo.crashTag == null) {
            crashInfo.crashTag = relaunchReasonToString;
        } else {
            crashInfo.crashTag += " " + relaunchReasonToString;
        }
        IActivityManagerServiceSocExt iActivityManagerServiceSocExt = this.mSocExt;
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        if (processRecord != null && processRecord.info != null) {
            str4 = processRecord.info.packageName;
        }
        iActivityManagerServiceSocExt.onNotifyAppCrash(callingPid, callingUid, str4);
        addErrorToDropBox(str, processRecord, str2, null, null, null, null, null, null, crashInfo, new Float(f), incrementalMetrics2, null);
        if (equals) {
            this.mAppErrors.sendRecoverableCrashToAppExitInfo(processRecord, crashInfo);
        } else {
            this.mAppErrors.crashApplication(processRecord, crashInfo);
            this.mActivityManagerServiceExt.recordAppCrash(str, processRecord);
        }
    }

    public void handleApplicationStrictModeViolation(IBinder iBinder, int i, StrictMode.ViolationInfo violationInfo) {
        boolean z;
        ProcessRecord findAppProcess = findAppProcess(iBinder, "StrictMode");
        if ((67108864 & i) != 0) {
            Integer valueOf = Integer.valueOf(violationInfo.hashCode());
            synchronized (this.mAlreadyLoggedViolatedStacks) {
                if (this.mAlreadyLoggedViolatedStacks.contains(valueOf)) {
                    z = false;
                } else {
                    if (this.mAlreadyLoggedViolatedStacks.size() >= 5000) {
                        this.mAlreadyLoggedViolatedStacks.clear();
                    }
                    this.mAlreadyLoggedViolatedStacks.add(valueOf);
                    z = true;
                }
            }
            if (z) {
                logStrictModeViolationToDropBox(findAppProcess, violationInfo);
            }
        }
        if ((i & AudioFormat.APTX) != 0) {
            AppErrorResult appErrorResult = new AppErrorResult();
            long clearCallingIdentity = Binder.clearCallingIdentity();
            try {
                Message obtain = Message.obtain();
                obtain.what = 26;
                HashMap hashMap = new HashMap();
                hashMap.put("result", appErrorResult);
                hashMap.put("app", findAppProcess);
                hashMap.put("info", violationInfo);
                obtain.obj = hashMap;
                this.mUiHandler.sendMessage(obtain);
                Binder.restoreCallingIdentity(clearCallingIdentity);
                Slog.w("ActivityManager", "handleApplicationStrictModeViolation; res=" + appErrorResult.get());
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(clearCallingIdentity);
                throw th;
            }
        }
    }

    public void registerStrictModeCallback(IBinder iBinder) {
        final int callingPid = Binder.getCallingPid();
        this.mStrictModeCallbacks.put(callingPid, IUnsafeIntentStrictModeCallback.Stub.asInterface(iBinder));
        try {
            iBinder.linkToDeath(new IBinder.DeathRecipient() { // from class: com.android.server.am.ActivityManagerService.14
                @Override // android.os.IBinder.DeathRecipient
                public void binderDied() {
                    ActivityManagerService.this.mStrictModeCallbacks.remove(callingPid);
                }
            }, 0);
        } catch (RemoteException unused) {
            this.mStrictModeCallbacks.remove(callingPid);
        }
    }

    private void logStrictModeViolationToDropBox(ProcessRecord processRecord, StrictMode.ViolationInfo violationInfo) {
        if (violationInfo == null) {
            return;
        }
        boolean z = processRecord == null || (processRecord.info.flags & 129) != 0;
        String str = processRecord == null ? "unknown" : processRecord.processName;
        final DropBoxManager dropBoxManager = (DropBoxManager) this.mContext.getSystemService("dropbox");
        final String str2 = processClass(processRecord) + "_strictmode";
        if (dropBoxManager == null || !dropBoxManager.isTagEnabled(str2)) {
            return;
        }
        StringBuilder sb = new StringBuilder(1024);
        synchronized (sb) {
            appendDropBoxProcessHeaders(processRecord, str, sb);
            sb.append("Build: ");
            sb.append(Build.FINGERPRINT);
            sb.append("\n");
            sb.append("System-App: ");
            sb.append(z);
            sb.append("\n");
            sb.append("Uptime-Millis: ");
            sb.append(violationInfo.violationUptimeMillis);
            sb.append("\n");
            if (violationInfo.violationNumThisLoop != 0) {
                sb.append("Loop-Violation-Number: ");
                sb.append(violationInfo.violationNumThisLoop);
                sb.append("\n");
            }
            if (violationInfo.numAnimationsRunning != 0) {
                sb.append("Animations-Running: ");
                sb.append(violationInfo.numAnimationsRunning);
                sb.append("\n");
            }
            if (violationInfo.broadcastIntentAction != null) {
                sb.append("Broadcast-Intent-Action: ");
                sb.append(violationInfo.broadcastIntentAction);
                sb.append("\n");
            }
            if (violationInfo.durationMillis != -1) {
                sb.append("Duration-Millis: ");
                sb.append(violationInfo.durationMillis);
                sb.append("\n");
            }
            if (violationInfo.numInstances != -1) {
                sb.append("Instance-Count: ");
                sb.append(violationInfo.numInstances);
                sb.append("\n");
            }
            String[] strArr = violationInfo.tags;
            if (strArr != null) {
                for (String str3 : strArr) {
                    sb.append("Span-Tag: ");
                    sb.append(str3);
                    sb.append("\n");
                }
            }
            sb.append("\n");
            sb.append(violationInfo.getStackTrace());
            sb.append("\n");
            if (violationInfo.getViolationDetails() != null) {
                sb.append(violationInfo.getViolationDetails());
                sb.append("\n");
            }
        }
        final String sb2 = sb.toString();
        IoThread.getHandler().post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda26
            @Override // java.lang.Runnable
            public final void run() {
                dropBoxManager.addText(str2, sb2);
            }
        });
    }

    public boolean handleApplicationWtf(final IBinder iBinder, final String str, boolean z, final ApplicationErrorReport.ParcelableCrashInfo parcelableCrashInfo, int i) {
        final int callingUid = Binder.getCallingUid();
        final int callingPid = Binder.getCallingPid();
        Preconditions.checkNotNull(parcelableCrashInfo);
        if (z || i == Process.myPid()) {
            this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.15
                @Override // java.lang.Runnable
                public void run() {
                    ActivityManagerService.this.handleApplicationWtfInner(callingUid, callingPid, iBinder, str, parcelableCrashInfo);
                }
            });
            return false;
        }
        ProcessRecord handleApplicationWtfInner = handleApplicationWtfInner(callingUid, callingPid, iBinder, str, parcelableCrashInfo);
        boolean z2 = Build.IS_ENG || Settings.Global.getInt(this.mContext.getContentResolver(), "wtf_is_fatal", 0) != 0;
        boolean z3 = handleApplicationWtfInner == null || handleApplicationWtfInner.isPersistent();
        if (!z2 || z3) {
            return false;
        }
        this.mAppErrors.crashApplication(handleApplicationWtfInner, parcelableCrashInfo);
        return true;
    }

    /* JADX WARN: Removed duplicated region for block: B:10:0x002d  */
    /* JADX WARN: Removed duplicated region for block: B:13:0x003c  */
    /* JADX WARN: Removed duplicated region for block: B:17:0x0041  */
    /* JADX WARN: Removed duplicated region for block: B:18:0x0025  */
    /* JADX WARN: Removed duplicated region for block: B:7:0x0023  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    ProcessRecord handleApplicationWtfInner(int i, int i2, IBinder iBinder, String str, ApplicationErrorReport.CrashInfo crashInfo) {
        String str2;
        String str3;
        ProcessRecord findAppProcess = findAppProcess(iBinder, "WTF");
        if (iBinder == null) {
            str2 = "system_server";
        } else if (findAppProcess != null) {
            str2 = findAppProcess.processName;
        } else {
            str3 = "unknown";
            EventLogTags.writeAmWtf(UserHandle.getUserId(i), i2, str3, findAppProcess != null ? -1 : findAppProcess.info.flags, str, crashInfo != null ? crashInfo.exceptionMessage : "unknown");
            FrameworkStatsLog.write(80, i, str, str3, i2, findAppProcess == null ? findAppProcess.getProcessClassEnum() : 0);
            addErrorToDropBox("wtf", findAppProcess, str3, null, null, null, str, null, null, crashInfo, null, null, null);
            return findAppProcess;
        }
        str3 = str2;
        EventLogTags.writeAmWtf(UserHandle.getUserId(i), i2, str3, findAppProcess != null ? -1 : findAppProcess.info.flags, str, crashInfo != null ? crashInfo.exceptionMessage : "unknown");
        FrameworkStatsLog.write(80, i, str, str3, i2, findAppProcess == null ? findAppProcess.getProcessClassEnum() : 0);
        addErrorToDropBox("wtf", findAppProcess, str3, null, null, null, str, null, null, crashInfo, null, null, null);
        return findAppProcess;
    }

    public void schedulePendingSystemServerWtfs(final LinkedList<Pair<String, ApplicationErrorReport.CrashInfo>> linkedList) {
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda19
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.lambda$schedulePendingSystemServerWtfs$10(linkedList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: handlePendingSystemServerWtfs, reason: merged with bridge method [inline-methods] */
    public void lambda$schedulePendingSystemServerWtfs$10(LinkedList<Pair<String, ApplicationErrorReport.CrashInfo>> linkedList) {
        ProcessRecord processRecord;
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(MY_PID);
        }
        Pair<String, ApplicationErrorReport.CrashInfo> poll = linkedList.poll();
        while (poll != null) {
            addErrorToDropBox("wtf", processRecord, "system_server", null, null, null, (String) poll.first, null, null, (ApplicationErrorReport.CrashInfo) poll.second, null, null, null);
            poll = linkedList.poll();
        }
    }

    private ProcessRecord findAppProcess(IBinder iBinder, String str) {
        ProcessRecord findAppProcessLOSP;
        if (iBinder == null) {
            return null;
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                findAppProcessLOSP = this.mProcessList.findAppProcessLOSP(iBinder, str);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return findAppProcessLOSP;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void appendDropBoxProcessHeaders(ProcessRecord processRecord, String str, final StringBuilder sb) {
        if (processRecord == null) {
            sb.append("Process: ");
            sb.append(str);
            sb.append("\n");
            return;
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                sb.append("Process: ");
                sb.append(str);
                sb.append("\n");
                sb.append("PID: ");
                sb.append(processRecord.getPid());
                sb.append("\n");
                sb.append("UID: ");
                sb.append(processRecord.uid);
                sb.append("\n");
                if (processRecord.mOptRecord != null) {
                    sb.append("Frozen: ");
                    sb.append(processRecord.mOptRecord.isFrozen());
                    sb.append("\n");
                }
                int i = processRecord.info.flags;
                final IPackageManager packageManager = AppGlobals.getPackageManager();
                sb.append("Flags: 0x");
                sb.append(Integer.toHexString(i));
                sb.append("\n");
                final int callingUserId = UserHandle.getCallingUserId();
                processRecord.getPkgList().forEachPackage(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda35
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.this.lambda$appendDropBoxProcessHeaders$11(sb, packageManager, callingUserId, (String) obj);
                    }
                });
                sb.append("PID: ");
                sb.append(processRecord.getPid());
                sb.append("\n");
                if (processRecord.info.isInstantApp()) {
                    sb.append("Instant-App: true\n");
                }
                if (processRecord.isSdkSandbox) {
                    String str2 = processRecord.sdkSandboxClientAppPackage;
                    try {
                        PackageInfo packageInfo = packageManager.getPackageInfo(str2, 1024L, callingUserId);
                        if (packageInfo != null) {
                            appendSdkSandboxClientPackageHeader(sb, packageInfo);
                            appendSdkSandboxLibraryHeaders(sb, packageInfo);
                        } else {
                            Slog.e("ActivityManager", "PackageInfo is null for SDK sandbox client: " + str2);
                        }
                    } catch (RemoteException e) {
                        Slog.e("ActivityManager", "Error getting package info for SDK sandbox client: " + str2, e);
                    }
                    sb.append("SdkSandbox: true\n");
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$appendDropBoxProcessHeaders$11(StringBuilder sb, IPackageManager iPackageManager, int i, String str) {
        sb.append("Package: ");
        sb.append(str);
        this.mActivityManagerServiceExt.setErrorPackageName(str);
        try {
            PackageInfo packageInfo = iPackageManager.getPackageInfo(str, 0L, i);
            if (packageInfo != null) {
                sb.append(" v");
                sb.append(packageInfo.getLongVersionCode());
                if (packageInfo.versionName != null) {
                    sb.append(" (");
                    sb.append(packageInfo.versionName);
                    sb.append(")");
                }
            }
        } catch (RemoteException e) {
            Slog.e("ActivityManager", "Error getting package info: " + str, e);
        }
        sb.append("\n");
    }

    private void appendSdkSandboxClientPackageHeader(StringBuilder sb, PackageInfo packageInfo) {
        sb.append("SdkSandbox-Client-Package: ");
        sb.append(packageInfo.packageName);
        sb.append(" v");
        sb.append(packageInfo.getLongVersionCode());
        if (packageInfo.versionName != null) {
            sb.append(" (");
            sb.append(packageInfo.versionName);
            sb.append(")");
        }
        sb.append("\n");
    }

    private void appendSdkSandboxLibraryHeaders(StringBuilder sb, PackageInfo packageInfo) {
        List sharedLibraryInfos = packageInfo.applicationInfo.getSharedLibraryInfos();
        int size = sharedLibraryInfos.size();
        for (int i = 0; i < size; i++) {
            SharedLibraryInfo sharedLibraryInfo = (SharedLibraryInfo) sharedLibraryInfos.get(i);
            if (sharedLibraryInfo.isSdk()) {
                sb.append("SdkSandbox-Library: ");
                sb.append(sharedLibraryInfo.getPackageName());
                VersionedPackage declaringPackage = sharedLibraryInfo.getDeclaringPackage();
                sb.append(" v");
                sb.append(declaringPackage.getLongVersionCode());
                sb.append("\n");
            }
        }
    }

    private static String processClass(ProcessRecord processRecord) {
        return (processRecord == null || processRecord.getPid() == MY_PID) ? "system_server" : (processRecord.info.isSystemApp() || processRecord.info.isSystemExt()) ? "system_app" : "data_app";
    }

    public void handleAppNotResponding(ProcessRecord processRecord, String str, ApplicationInfo applicationInfo, String str2, WindowProcessController windowProcessController, boolean z, String str3, String str4) {
        try {
            OplusCrashInfo oplusCrashInfo = new OplusCrashInfo();
            oplusCrashInfo.anrProcess = processRecord;
            oplusCrashInfo.activityShortComponentName = str;
            oplusCrashInfo.aInfo = applicationInfo;
            oplusCrashInfo.parentShortComponentName = str2;
            oplusCrashInfo.parentProcess = windowProcessController;
            oplusCrashInfo.aboveSystem = z;
            oplusCrashInfo.annotation = str3;
            oplusCrashInfo.eventId = str4;
            this.mActivityManagerServiceExt.hookHandleAppNotResponding(oplusCrashInfo);
        } catch (NoClassDefFoundError unused) {
            Slog.e("ActivityManager", "handleAppNotResponding NoClassDefFoundError");
        }
    }

    public void addErrorToDropBox(String str, ProcessRecord processRecord, String str2, String str3, String str4, ProcessRecord processRecord2, String str5, String str6, File file, ApplicationErrorReport.CrashInfo crashInfo, Float f, IncrementalMetrics incrementalMetrics, UUID uuid) {
        String uuid2;
        if (uuid != null) {
            uuid2 = uuid.toString();
        } else {
            uuid2 = UUID.randomUUID().toString();
        }
        addErrorToDropBox(str, processRecord, str2, str3, str4, processRecord2, str5, str6, file, crashInfo, f, incrementalMetrics, uuid, uuid2);
    }

    public void addErrorToDropBox(final String str, final ProcessRecord processRecord, String str2, String str3, String str4, ProcessRecord processRecord2, String str5, final String str6, final File file, final ApplicationErrorReport.CrashInfo crashInfo, Float f, IncrementalMetrics incrementalMetrics, UUID uuid, String str7) {
        String str8;
        String str9;
        try {
            final DropBoxManager dropBoxManager = (DropBoxManager) this.mContext.getSystemService(DropBoxManager.class);
            final String str10 = processClass(processRecord) + "_" + str;
            if (dropBoxManager == null || !dropBoxManager.isTagEnabled(str10)) {
                return;
            }
            DropboxRateLimiter.RateLimitResult shouldRateLimit = this.mDropboxRateLimiter.shouldRateLimit(str, str2);
            if (shouldRateLimit.shouldRateLimit()) {
                return;
            }
            final StringBuilder sb = new StringBuilder(1024);
            appendDropBoxProcessHeaders(processRecord, str2, sb);
            OplusCrashInfo oplusCrashInfo = new OplusCrashInfo();
            oplusCrashInfo.context = this.mContext;
            oplusCrashInfo.dropboxTag = str10;
            oplusCrashInfo.eventType = str;
            oplusCrashInfo.process = processRecord;
            oplusCrashInfo.processName = str2;
            oplusCrashInfo.subject = str5;
            oplusCrashInfo.dataFile = file;
            oplusCrashInfo.crashInfo = crashInfo;
            oplusCrashInfo.eventId = str7;
            this.mActivityManagerServiceExt.hookAddErrorToDropBox(oplusCrashInfo);
            if (processRecord != null) {
                sb.append("Foreground: ");
                sb.append(processRecord.isInterestingToUserLocked() ? "Yes" : "No");
                sb.append("\n");
                if (processRecord.getStartUptime() > 0) {
                    long uptimeMillis = SystemClock.uptimeMillis() - processRecord.getStartUptime();
                    sb.append("Process-Runtime: ");
                    sb.append(uptimeMillis);
                    sb.append("\n");
                }
            }
            if (str3 != null) {
                sb.append("Activity: ");
                sb.append(str3);
                sb.append("\n");
            }
            if (str4 != null) {
                if (processRecord2 != null && processRecord2.getPid() != processRecord.getPid()) {
                    sb.append("Parent-Process: ");
                    sb.append(processRecord2.processName);
                    sb.append("\n");
                }
                if (!str4.equals(str3)) {
                    sb.append("Parent-Activity: ");
                    sb.append(str4);
                    sb.append("\n");
                }
            }
            if (str5 != null) {
                sb.append("Subject: ");
                sb.append(str5);
                sb.append("\n");
            }
            if (uuid != null) {
                sb.append("ErrorId: ");
                sb.append(uuid.toString());
                sb.append("\n");
            }
            sb.append("Build: ");
            sb.append(Build.FINGERPRINT);
            sb.append("\n");
            if (Debug.isDebuggerConnected()) {
                sb.append("Debugger: Connected\n");
            }
            if (crashInfo != null && (str9 = crashInfo.exceptionHandlerClassName) != null && !str9.isEmpty()) {
                sb.append("Crash-Handler: ");
                sb.append(crashInfo.exceptionHandlerClassName);
                sb.append("\n");
            }
            if (crashInfo != null && (str8 = crashInfo.crashTag) != null && !str8.isEmpty()) {
                sb.append("Crash-Tag: ");
                sb.append(crashInfo.crashTag);
                sb.append("\n");
            }
            if (f != null) {
                sb.append("Loading-Progress: ");
                sb.append(f.floatValue());
                sb.append("\n");
            }
            if (incrementalMetrics != null) {
                sb.append("Incremental: Yes");
                sb.append("\n");
                long millisSinceOldestPendingRead = incrementalMetrics.getMillisSinceOldestPendingRead();
                if (millisSinceOldestPendingRead > 0) {
                    sb.append("Millis-Since-Oldest-Pending-Read: ");
                    sb.append(millisSinceOldestPendingRead);
                    sb.append("\n");
                }
            }
            sb.append(shouldRateLimit.createHeader());
            sb.append("\n");
            final boolean z = processRecord == null;
            Thread thread = new Thread("Error dump: " + str10) { // from class: com.android.server.am.ActivityManagerService.16
                /* JADX WARN: Removed duplicated region for block: B:68:0x0199  */
                /* JADX WARN: Removed duplicated region for block: B:71:0x019c  */
                @Override // java.lang.Thread, java.lang.Runnable
                /*
                    Code decompiled incorrectly, please refer to instructions dump.
                */
                public void run() {
                    String str11;
                    String str12 = str6;
                    if (str12 != null) {
                        sb.append(str12);
                    }
                    String str13 = "logcat_for_" + str10;
                    String str14 = "max_error_bytes_for_" + str10;
                    int i = Build.IS_USER ? 0 : Settings.Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), str13, 0);
                    int dataFileSizeAjusted = ActivityManagerService.this.mActivityManagerServiceExt.getDataFileSizeAjusted((Settings.Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), str14, ActivityManagerService.DROPBOX_DEFAULT_MAX_SIZE) - sb.length()) - (i * 100), i, file);
                    File file2 = file;
                    if (file2 != null && dataFileSizeAjusted > 0) {
                        try {
                            sb.append(FileUtils.readTextFile(file2, dataFileSizeAjusted, "\n\n[[TRUNCATED]]"));
                        } catch (IOException e) {
                            Slog.e("ActivityManager", "Error reading " + file, e);
                        }
                    }
                    ApplicationErrorReport.CrashInfo crashInfo2 = crashInfo;
                    if (crashInfo2 != null && (str11 = crashInfo2.stackTrace) != null) {
                        sb.append(str11);
                    }
                    ActivityManagerService.this.mActivityManagerServiceExt.appendCpuInfo(sb, str);
                    if (i > 0 && !z) {
                        sb.append("\n");
                        InputStreamReader inputStreamReader = null;
                        try {
                            try {
                                try {
                                    Process start = new ProcessBuilder("/system/bin/timeout", "-i", "-s", "SEGV", "10s", "/system/bin/logcat", "-v", "threadtime", "-b", "events", "-b", "system", "-b", "radio", "-b", "main", "-b", "crash", "-t", String.valueOf(i)).redirectErrorStream(true).start();
                                    try {
                                        start.getOutputStream().close();
                                    } catch (IOException unused) {
                                    }
                                    try {
                                        start.getErrorStream().close();
                                    } catch (IOException unused2) {
                                    }
                                    InputStreamReader inputStreamReader2 = new InputStreamReader(start.getInputStream());
                                    try {
                                        char[] cArr = new char[8192];
                                        while (true) {
                                            int read = inputStreamReader2.read(cArr);
                                            if (read <= 0) {
                                                break;
                                            } else {
                                                sb.append(cArr, 0, read);
                                            }
                                        }
                                        inputStreamReader2.close();
                                    } catch (IOException e2) {
                                        e = e2;
                                        inputStreamReader = inputStreamReader2;
                                        Slog.e("ActivityManager", "Error running logcat", e);
                                        if (inputStreamReader != null) {
                                            inputStreamReader.close();
                                        }
                                        dropBoxManager.addText(str10, sb.toString());
                                        IActivityManagerServiceSocExt iActivityManagerServiceSocExt = ActivityManagerService.this.mSocExt;
                                        String str15 = str10;
                                        String sb2 = sb.toString();
                                        ProcessRecord processRecord3 = processRecord;
                                        iActivityManagerServiceSocExt.onAddErrorToDropBox(str15, sb2, processRecord3 != null ? ActivityManagerService.MY_PID : processRecord3.mPid);
                                    } catch (Throwable th) {
                                        th = th;
                                        inputStreamReader = inputStreamReader2;
                                        if (inputStreamReader != null) {
                                            try {
                                                inputStreamReader.close();
                                            } catch (IOException unused3) {
                                            }
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th2) {
                                    th = th2;
                                }
                            } catch (IOException e3) {
                                e = e3;
                            }
                        } catch (IOException unused4) {
                        }
                    }
                    dropBoxManager.addText(str10, sb.toString());
                    IActivityManagerServiceSocExt iActivityManagerServiceSocExt2 = ActivityManagerService.this.mSocExt;
                    String str152 = str10;
                    String sb22 = sb.toString();
                    ProcessRecord processRecord32 = processRecord;
                    iActivityManagerServiceSocExt2.onAddErrorToDropBox(str152, sb22, processRecord32 != null ? ActivityManagerService.MY_PID : processRecord32.mPid);
                }
            };
            if (z) {
                int allowThreadDiskWritesMask = StrictMode.allowThreadDiskWritesMask();
                try {
                    thread.run();
                } finally {
                    StrictMode.setThreadPolicyMask(allowThreadDiskWritesMask);
                }
            } else {
                thread.start();
            }
            this.mActivityManagerServiceExt.waitForDumpCondition(processClass(processRecord).equals("system_server"), str);
        } catch (Exception unused) {
        }
    }

    public List<ActivityManager.ProcessErrorStateInfo> getProcessesInErrorState() {
        enforceNotIsolatedCaller("getProcessesInErrorState");
        final List<ActivityManager.ProcessErrorStateInfo>[] listArr = new List[1];
        final int callingUid = Binder.getCallingUid();
        final boolean z = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        final int userId = UserHandle.getUserId(callingUid);
        final boolean z2 = ActivityManager.checkUidPermission("android.permission.DUMP", callingUid) == 0;
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mProcessList.forEachLruProcessesLOSP(false, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda17
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.lambda$getProcessesInErrorState$12(z, userId, z2, callingUid, listArr, (ProcessRecord) obj);
                    }
                });
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return listArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getProcessesInErrorState$12(boolean z, int i, boolean z2, int i2, List[] listArr, ProcessRecord processRecord) {
        ActivityManager.ProcessErrorStateInfo notRespondingReport;
        if (z || processRecord.userId == i) {
            if (z2 || processRecord.info.uid == i2) {
                ProcessErrorStateRecord processErrorStateRecord = processRecord.mErrorState;
                boolean isCrashing = processErrorStateRecord.isCrashing();
                boolean isNotResponding = processErrorStateRecord.isNotResponding();
                if (processRecord.getThread() != null) {
                    if (isCrashing || isNotResponding) {
                        if (isCrashing) {
                            notRespondingReport = processErrorStateRecord.getCrashingReport();
                        } else {
                            notRespondingReport = isNotResponding ? processErrorStateRecord.getNotRespondingReport() : null;
                        }
                        if (notRespondingReport != null) {
                            if (listArr[0] == null) {
                                listArr[0] = new ArrayList(1);
                            }
                            listArr[0].add(notRespondingReport);
                            return;
                        }
                        Slog.w("ActivityManager", "Missing app error report, app = " + processRecord.processName + " crashing = " + isCrashing + " notResponding = " + isNotResponding);
                    }
                }
            }
        }
    }

    public List<ActivityManager.RunningAppProcessInfo> getRunningAppProcesses() {
        List<ActivityManager.RunningAppProcessInfo> runningAppProcessesLOSP;
        enforceNotIsolatedCaller("getRunningAppProcesses");
        int callingUid = Binder.getCallingUid();
        int uidTargetSdkVersion = this.mPackageManagerInt.getUidTargetSdkVersion(callingUid);
        boolean z = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        int userId = UserHandle.getUserId(callingUid);
        boolean isGetTasksAllowed = this.mAtmInternal.isGetTasksAllowed("getRunningAppProcesses", Binder.getCallingPid(), callingUid);
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                runningAppProcessesLOSP = this.mProcessList.getRunningAppProcessesLOSP(z, userId, isGetTasksAllowed, callingUid, uidTargetSdkVersion);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return runningAppProcessesLOSP;
    }

    public List<ApplicationInfo> getRunningExternalApplications() {
        enforceNotIsolatedCaller("getRunningExternalApplications");
        List<ActivityManager.RunningAppProcessInfo> runningAppProcesses = getRunningAppProcesses();
        ArrayList arrayList = new ArrayList();
        if (runningAppProcesses != null && runningAppProcesses.size() > 0) {
            HashSet hashSet = new HashSet();
            Iterator<ActivityManager.RunningAppProcessInfo> it = runningAppProcesses.iterator();
            while (it.hasNext()) {
                String[] strArr = it.next().pkgList;
                if (strArr != null) {
                    for (String str : strArr) {
                        hashSet.add(str);
                    }
                }
            }
            IPackageManager packageManager = AppGlobals.getPackageManager();
            Iterator it2 = hashSet.iterator();
            while (it2.hasNext()) {
                try {
                    ApplicationInfo applicationInfo = packageManager.getApplicationInfo((String) it2.next(), 0L, UserHandle.getCallingUserId());
                    if ((applicationInfo.flags & 262144) != 0) {
                        arrayList.add(applicationInfo);
                    }
                } catch (RemoteException unused) {
                }
            }
        }
        return arrayList;
    }

    public ParceledListSlice<ApplicationStartInfo> getHistoricalProcessStartReasons(String str, int i, int i2) {
        if (!this.mConstants.mFlagApplicationStartInfoEnabled) {
            return new ParceledListSlice<>(new ArrayList());
        }
        enforceNotIsolatedCaller("getHistoricalProcessStartReasons");
        return new ParceledListSlice<>(new ArrayList());
    }

    public void setApplicationStartInfoCompleteListener(IApplicationStartInfoCompleteListener iApplicationStartInfoCompleteListener, int i) {
        if (this.mConstants.mFlagApplicationStartInfoEnabled) {
            enforceNotIsolatedCaller("setApplicationStartInfoCompleteListener");
        }
    }

    public void removeApplicationStartInfoCompleteListener(int i) {
        if (this.mConstants.mFlagApplicationStartInfoEnabled) {
            enforceNotIsolatedCaller("removeApplicationStartInfoCompleteListener");
        }
    }

    public ParceledListSlice<ApplicationExitInfo> getHistoricalProcessExitReasons(String str, int i, int i2, int i3) {
        enforceNotIsolatedCaller("getHistoricalProcessExitReasons");
        if (i3 == -1 || i3 == -2) {
            throw new IllegalArgumentException("Unsupported userId");
        }
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        UserHandle.getCallingUserId();
        this.mUserController.handleIncomingUser(callingPid, callingUid, i3, true, 0, "getHistoricalProcessExitReasons", null);
        NativeTombstoneManager nativeTombstoneManager = (NativeTombstoneManager) LocalServices.getService(NativeTombstoneManager.class);
        ArrayList<ApplicationExitInfo> arrayList = new ArrayList<>();
        if (!TextUtils.isEmpty(str)) {
            int enforceDumpPermissionForPackage = enforceDumpPermissionForPackage(str, i3, callingUid, "getHistoricalProcessExitReasons");
            if (enforceDumpPermissionForPackage != -1) {
                this.mProcessList.mAppExitInfoTracker.getExitInfo(str, enforceDumpPermissionForPackage, i, i2, arrayList);
                nativeTombstoneManager.collectTombstones(arrayList, enforceDumpPermissionForPackage, i, i2);
            }
        } else {
            this.mProcessList.mAppExitInfoTracker.getExitInfo(str, callingUid, i, i2, arrayList);
            nativeTombstoneManager.collectTombstones(arrayList, callingUid, i, i2);
        }
        return new ParceledListSlice<>(arrayList);
    }

    public void setProcessStateSummary(byte[] bArr) {
        if (bArr != null && bArr.length > 128) {
            throw new IllegalArgumentException("Data size is too large");
        }
        this.mProcessList.mAppExitInfoTracker.setProcessStateSummary(Binder.getCallingUid(), Binder.getCallingPid(), bArr);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public int enforceDumpPermissionForPackage(String str, int i, int i2, String str2) {
        try {
            if (Process.isSdkSandboxUid(i2)) {
                if (getPackageManager().getSdkSandboxPackageName().equals(str)) {
                    return i2;
                }
            }
        } catch (RemoteException unused) {
            Log.e("ActivityManager", "Could not get SDK sandbox package name");
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            int packageUid = this.mPackageManagerInt.getPackageUid(str, 786432L, i);
            Binder.restoreCallingIdentity(clearCallingIdentity);
            if (UserHandle.getAppId(packageUid) != UserHandle.getAppId(i2)) {
                enforceCallingPermission("android.permission.DUMP", str2);
            }
            return packageUid;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(clearCallingIdentity);
            throw th;
        }
    }

    public void getMyMemoryState(ActivityManager.RunningAppProcessInfo runningAppProcessInfo) {
        ProcessRecord processRecord;
        if (runningAppProcessInfo == null) {
            throw new IllegalArgumentException("outState is null");
        }
        enforceNotIsolatedCaller("getMyMemoryState");
        int uidTargetSdkVersion = this.mPackageManagerInt.getUidTargetSdkVersion(Binder.getCallingUid());
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    processRecord = this.mPidsSelfLocked.get(Binder.getCallingPid());
                }
                if (processRecord != null) {
                    this.mProcessList.fillInProcMemInfoLOSP(processRecord, runningAppProcessInfo, uidTargetSdkVersion);
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public int getMemoryTrimLevel() {
        int lastMemoryLevelLocked;
        enforceNotIsolatedCaller("getMyMemoryState");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                lastMemoryLevelLocked = this.mAppProfiler.getLastMemoryLevelLocked();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return lastMemoryLevelLocked;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void setMemFactorOverride(int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (i == this.mAppProfiler.getLastMemoryLevelLocked()) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                this.mAppProfiler.setMemFactorOverrideLocked(i);
                updateOomAdjLocked(16);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void setServiceRestartBackoffEnabled(String str, boolean z, String str2) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.setServiceRestartBackoffEnabledLocked(str, z, str2);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean isServiceRestartBackoffEnabled(String str) {
        boolean isServiceRestartBackoffEnabledLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                isServiceRestartBackoffEnabledLocked = this.mServices.isServiceRestartBackoffEnabledLocked(str);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return isServiceRestartBackoffEnabledLocked;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void onShellCommand(FileDescriptor fileDescriptor, FileDescriptor fileDescriptor2, FileDescriptor fileDescriptor3, String[] strArr, ShellCallback shellCallback, ResultReceiver resultReceiver) {
        new ActivityManagerShellCommand(this, false).exec(this, fileDescriptor, fileDescriptor2, fileDescriptor3, strArr, shellCallback, resultReceiver);
    }

    protected void dump(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr) {
        PriorityDump.dump(this.mPriorityDumper, fileDescriptor, printWriter, strArr);
    }

    private void dumpEverything(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, int i, boolean z, String str, int i2, boolean z2, boolean z3, int i3, boolean z4) {
        ActiveServices.ServiceDumper newServiceDumperLocked;
        String str2;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mConstants.dump(printWriter);
                ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        this.mOomAdjuster.dumpCachedAppOptimizerSettings(printWriter);
                    } finally {
                    }
                }
                resetPriorityAfterProcLockedSection();
                this.mOomAdjuster.dumpCacheOomRankerSettings(printWriter);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                dumpAllowedAssociationsLocked(fileDescriptor, printWriter, strArr, i, z, str);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                this.mPendingIntentController.dumpPendingIntents(printWriter, z, str);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                dumpBroadcastsLocked(fileDescriptor, printWriter, strArr, i, z, str);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                if (z || str != null) {
                    dumpBroadcastStatsLocked(fileDescriptor, printWriter, strArr, i, z, str);
                    printWriter.println();
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                }
                this.mCpHelper.dumpProvidersLocked(fileDescriptor, printWriter, strArr, i, z, str);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                dumpPermissions(fileDescriptor, printWriter, strArr, i, z, str);
                printWriter.println();
                newServiceDumperLocked = this.mServices.newServiceDumperLocked(fileDescriptor, printWriter, strArr, i, z, str);
                if (!z2) {
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    newServiceDumperLocked.dumpLocked();
                }
            } finally {
            }
        }
        resetPriorityAfterLockedSection();
        if (z2) {
            if (z) {
                printWriter.println("-------------------------------------------------------------------------------");
            }
            newServiceDumperLocked.dumpWithClient();
        }
        if (str == null && z4) {
            printWriter.println();
            if (z) {
                printWriter.println("-------------------------------------------------------------------------------");
            }
            this.mActivityManagerServiceExt.dumpBinderProxies(printWriter, 6000);
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                this.mAtmInternal.dump("recents", fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                this.mAtmInternal.dump("lastanr", fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                this.mAtmInternal.dump("starter", fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                if (str == null) {
                    printWriter.println();
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    this.mAtmInternal.dump("containers", fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                }
                if (!z3) {
                    printWriter.println();
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    this.mAtmInternal.dump("activities", fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                }
                if (this.mAssociations.size() > 0) {
                    printWriter.println();
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    str2 = str;
                    dumpAssociationsLocked(fileDescriptor, printWriter, strArr, i, z, z2, str);
                } else {
                    str2 = str;
                }
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                    this.mProcessList.mAppExitInfoTracker.dumpHistoryProcessExitInfo(printWriter, str2);
                }
                if (str2 == null) {
                    printWriter.println();
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    this.mOomAdjProfiler.dump(printWriter);
                    printWriter.println();
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    dumpLmkLocked(printWriter);
                }
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock2) {
                    try {
                        this.mProcessList.dumpProcessesLSP(fileDescriptor, printWriter, strArr, i, z, str, i3);
                    } finally {
                    }
                }
                resetPriorityAfterProcLockedSection();
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                dumpUsers(printWriter);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                this.mComponentAliasResolver.dump(printWriter);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    private void dumpAppRestrictionController(PrintWriter printWriter) {
        printWriter.println("-------------------------------------------------------------------------------");
        this.mAppRestrictionController.dump(printWriter, "");
    }

    void dumpAppRestrictionController(ProtoOutputStream protoOutputStream, int i) {
        this.mAppRestrictionController.dumpAsProto(protoOutputStream, i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:102:0x0122, code lost:
    
        if ("1".equals(android.os.SystemProperties.get("persist.sys.agingtest", "0")) == false) goto L74;
     */
    /* JADX WARN: Code restructure failed: missing block: B:103:0x0124, code lost:
    
        android.util.Slog.w("ActivityManager", "dumpsys activity called from pid: " + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid());
        r15 = false;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:253:0x0864  */
    /* JADX WARN: Removed duplicated region for block: B:255:0x0868  */
    @NeverCompile
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void doDump(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, boolean z) {
        int i;
        int i2;
        String[] strArr2;
        String str;
        int i3;
        String str2;
        int i4;
        String str3;
        int i5;
        int i6;
        int i7;
        ActiveServices.ServiceDumper newServiceDumperLocked;
        int i8;
        int i9;
        String str4;
        String[] strArr3;
        int i10;
        int i11;
        String str5;
        int i12;
        String[] strArr4;
        int i13;
        String str6;
        String[] strArr5;
        String str7;
        String[] strArr6 = strArr;
        if (DumpUtils.checkDumpAndUsageStatsPermission(this.mContext, "ActivityManager", printWriter)) {
            int i14 = -1;
            int i15 = 0;
            int i16 = -1;
            int i17 = -1;
            int i18 = 0;
            boolean z2 = false;
            boolean z3 = false;
            boolean z4 = false;
            boolean z5 = false;
            boolean z6 = false;
            boolean z7 = false;
            boolean z8 = false;
            String str8 = null;
            while (i18 < strArr6.length && (str7 = strArr6[i18]) != null && str7.length() > 0 && str7.charAt(0) == '-') {
                i18++;
                if ("-a".equals(str7)) {
                    z7 = true;
                } else {
                    if (!"-c".equals(str7)) {
                        if ("-v".equals(str7)) {
                            z3 = true;
                        } else if ("-f".equals(str7)) {
                            z4 = true;
                        } else if ("-p".equals(str7)) {
                            if (i18 < strArr6.length) {
                                str8 = strArr6[i18];
                                i18++;
                            } else {
                                printWriter.println("Error: -p option requires package argument");
                                return;
                            }
                        } else if ("--checkin".equals(str7)) {
                            z5 = true;
                            z8 = true;
                        } else if ("-C".equals(str7)) {
                            z8 = true;
                        } else if ("--normal-priority".equals(str7)) {
                            z6 = true;
                        } else if ("--user".equals(str7)) {
                            if (i18 < strArr6.length) {
                                int parseUserArg = UserHandle.parseUserArg(strArr6[i18]);
                                if (parseUserArg == -2) {
                                    parseUserArg = this.mUserController.getCurrentUserId();
                                }
                                i16 = parseUserArg;
                                i18++;
                            } else {
                                printWriter.println("Error: --user option requires user id argument");
                                return;
                            }
                        } else if ("-d".equals(str7)) {
                            if (i18 < strArr6.length) {
                                int parseInt = Integer.parseInt(strArr6[i18]);
                                if (parseInt == -1) {
                                    printWriter.println("Error: -d cannot be used with INVALID_DISPLAY");
                                    return;
                                } else {
                                    i18++;
                                    i17 = parseInt;
                                }
                            } else {
                                printWriter.println("Error: -d option requires display argument");
                                return;
                            }
                        } else {
                            if ("-h".equals(str7)) {
                                ActivityManagerShellCommand.dumpHelp(printWriter, true);
                                return;
                            }
                            printWriter.println("Unknown argument: " + str7 + "; use -h for help");
                            return;
                        }
                    }
                    z2 = true;
                }
            }
            boolean z9 = z2;
            long clearCallingIdentity = Binder.clearCallingIdentity();
            if (z) {
                ProtoOutputStream protoOutputStream = new ProtoOutputStream(fileDescriptor);
                String str9 = i18 < strArr6.length ? strArr6[i18] : "";
                int i19 = i18 + 1;
                if ("activities".equals(str9) || "a".equals(str9)) {
                    this.mAtmInternal.writeActivitiesToProto(protoOutputStream);
                } else if ("broadcasts".equals(str9) || "b".equals(str9)) {
                    boostPriorityForLockedSection();
                    synchronized (this) {
                        try {
                            writeBroadcastsToProtoLocked(protoOutputStream);
                        } finally {
                            resetPriorityAfterLockedSection();
                        }
                    }
                    resetPriorityAfterLockedSection();
                } else if ("provider".equals(str9)) {
                    if (i19 >= strArr6.length) {
                        strArr5 = EMPTY_STRING_ARRAY;
                        str6 = null;
                    } else {
                        str6 = strArr6[i19];
                        int i20 = i19 + 1;
                        String[] strArr7 = new String[strArr6.length - i20];
                        if (strArr6.length > 2) {
                            System.arraycopy(strArr6, i20, strArr7, 0, strArr6.length - i20);
                        }
                        strArr5 = strArr7;
                    }
                    if (!this.mCpHelper.dumpProviderProto(fileDescriptor, printWriter, str6, strArr5)) {
                        printWriter.println("No providers match: " + str6);
                        printWriter.println("Use -h for help.");
                    }
                } else if (HostingRecord.HOSTING_TYPE_SERVICE.equals(str9)) {
                    this.mServices.dumpDebug(protoOutputStream, 1146756268033L);
                } else if ("processes".equals(str9) || "p".equals(str9)) {
                    if (i19 < strArr6.length) {
                        str8 = strArr6[i19];
                    }
                    boostPriorityForLockedSection();
                    synchronized (this) {
                        try {
                            ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                            boostPriorityForProcLockedSection();
                            synchronized (activityManagerGlobalLock) {
                                try {
                                    this.mProcessList.writeProcessesToProtoLSP(protoOutputStream, str8);
                                } finally {
                                }
                            }
                            resetPriorityAfterProcLockedSection();
                        } finally {
                        }
                    }
                    resetPriorityAfterLockedSection();
                } else if ("app-restrictions".equals(str9)) {
                    int i21 = 0;
                    while (true) {
                        if (i21 >= strArr6.length) {
                            break;
                        }
                        if ("--uid".equals(strArr6[i21])) {
                            int i22 = i21 + 1;
                            if (i22 < strArr6.length) {
                                try {
                                    i14 = Integer.parseInt(strArr6[i22]);
                                } catch (NumberFormatException unused) {
                                }
                            }
                            i15 = 1;
                        } else {
                            i21++;
                        }
                    }
                    if (i15 != 0) {
                        printWriter.println("Invalid --uid argument");
                        printWriter.println("Use -h for help.");
                    } else {
                        dumpAppRestrictionController(protoOutputStream, i14);
                    }
                } else {
                    boostPriorityForLockedSection();
                    synchronized (this) {
                        try {
                            long start = protoOutputStream.start(1146756268033L);
                            this.mAtmInternal.writeActivitiesToProto(protoOutputStream);
                            protoOutputStream.end(start);
                            long start2 = protoOutputStream.start(1146756268034L);
                            writeBroadcastsToProtoLocked(protoOutputStream);
                            protoOutputStream.end(start2);
                            long start3 = protoOutputStream.start(1146756268035L);
                            this.mServices.dumpDebug(protoOutputStream, 1146756268033L);
                            protoOutputStream.end(start3);
                            long start4 = protoOutputStream.start(1146756268036L);
                            ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
                            boostPriorityForProcLockedSection();
                            synchronized (activityManagerGlobalLock2) {
                                try {
                                    this.mProcessList.writeProcessesToProtoLSP(protoOutputStream, str8);
                                } finally {
                                }
                            }
                            resetPriorityAfterProcLockedSection();
                            protoOutputStream.end(start4);
                        } finally {
                        }
                    }
                    resetPriorityAfterLockedSection();
                }
                protoOutputStream.flush();
                Binder.restoreCallingIdentity(clearCallingIdentity);
                return;
            }
            int appId = getAppId(str8);
            if (appId != -1) {
                printWriter.println("[dump_debug] dumpAppId:" + appId + ", dumpPackage:" + str8);
            }
            if (i18 < strArr6.length) {
                String str10 = strArr6[i18];
                int i23 = i18 + 1;
                i = appId;
                String str11 = str8;
                int i24 = i16;
                if (this.mActivityManagerServiceExt.dynamicLogDump(this, str10, fileDescriptor, printWriter, strArr, i23)) {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                    return;
                }
                if ("activities".equals(str10) || "a".equals(str10) || "lastanr".equals(str10) || "lastanr-traces".equals(str10) || "starter".equals(str10) || "containers".equals(str10) || "recents".equals(str10) || "r".equals(str10) || "top-resumed".equals(str10) || "visible".equals(str10)) {
                    i3 = 0;
                    str2 = str11;
                    i4 = i23;
                    this.mAtmInternal.dump(str10, fileDescriptor, printWriter, strArr, i4, true, z9, str2, i17);
                } else {
                    if ("binder-proxies".equals(str10)) {
                        i6 = i23;
                        if (i6 >= strArr6.length) {
                            dumpBinderProxies(printWriter, 0);
                            i3 = 0;
                            str2 = str11;
                            i4 = i6;
                        } else {
                            String str12 = strArr6[i6];
                            i5 = i6 + 1;
                            System.gc();
                            System.runFinalization();
                            System.gc();
                            printWriter.println(BinderInternal.nGetBinderProxyCount(Integer.parseInt(str12)));
                            str3 = str11;
                            if (i15 != 0) {
                                Binder.restoreCallingIdentity(clearCallingIdentity);
                                return;
                            } else {
                                i2 = i5;
                                str = str3;
                                strArr2 = strArr6;
                            }
                        }
                    } else {
                        i6 = i23;
                        if ("allowed-associations".equals(str10)) {
                            if (i6 < strArr6.length) {
                                i13 = i6 + 1;
                                str11 = strArr6[i6];
                            } else {
                                i13 = i6;
                            }
                            boostPriorityForLockedSection();
                            synchronized (this) {
                                try {
                                    dumpAllowedAssociationsLocked(fileDescriptor, printWriter, strArr, i13, true, str11);
                                } finally {
                                    resetPriorityAfterLockedSection();
                                }
                            }
                            resetPriorityAfterLockedSection();
                        } else if ("broadcasts".equals(str10) || "b".equals(str10)) {
                            i3 = 0;
                            str2 = str11;
                            i4 = i6;
                            if (i4 < strArr6.length) {
                                String str13 = strArr6[i4];
                                i4++;
                                str2 = str13;
                            }
                            boostPriorityForLockedSection();
                            synchronized (this) {
                                try {
                                    dumpBroadcastsLocked(fileDescriptor, printWriter, strArr, i4, true, str2);
                                } finally {
                                    resetPriorityAfterLockedSection();
                                }
                            }
                            resetPriorityAfterLockedSection();
                        } else if ("broadcast-stats".equals(str10)) {
                            if (i6 < strArr6.length) {
                                i13 = i6 + 1;
                                str11 = strArr6[i6];
                            } else {
                                i13 = i6;
                            }
                            boostPriorityForLockedSection();
                            synchronized (this) {
                                try {
                                    if (z8) {
                                        dumpBroadcastStatsCheckinLocked(fileDescriptor, printWriter, strArr, i13, z5, str11);
                                    } else {
                                        dumpBroadcastStatsLocked(fileDescriptor, printWriter, strArr, i13, true, str11);
                                    }
                                } finally {
                                    resetPriorityAfterLockedSection();
                                }
                            }
                            resetPriorityAfterLockedSection();
                        } else if ("intents".equals(str10) || "i".equals(str10)) {
                            i3 = 0;
                            int i25 = i6;
                            if (i25 < strArr6.length) {
                                str3 = strArr6[i25];
                                i25++;
                            } else {
                                str3 = str11;
                            }
                            this.mPendingIntentController.dumpPendingIntents(printWriter, true, str3);
                            i5 = i25;
                        } else if ("processes".equals(str10) || "p".equals(str10)) {
                            i3 = 0;
                            str2 = str11;
                            i4 = i6;
                            if (i4 < strArr6.length) {
                                String str14 = strArr6[i4];
                                i4++;
                                str2 = str14;
                            }
                            boostPriorityForLockedSection();
                            synchronized (this) {
                                try {
                                    ActivityManagerGlobalLock activityManagerGlobalLock3 = this.mProcLock;
                                    boostPriorityForProcLockedSection();
                                    synchronized (activityManagerGlobalLock3) {
                                        try {
                                            this.mProcessList.dumpProcessesLSP(fileDescriptor, printWriter, strArr, i4, true, str2, i);
                                        } finally {
                                            resetPriorityAfterProcLockedSection();
                                        }
                                    }
                                    resetPriorityAfterProcLockedSection();
                                } finally {
                                    resetPriorityAfterLockedSection();
                                }
                            }
                            resetPriorityAfterLockedSection();
                        } else {
                            if ("oom".equals(str10) || "o".equals(str10)) {
                                i7 = i6;
                                i3 = 0;
                                str2 = str11;
                                boostPriorityForLockedSection();
                                synchronized (this) {
                                    try {
                                        this.mProcessList.dumpOomLocked(fileDescriptor, printWriter, false, strArr, i7, true, str2, true);
                                    } finally {
                                        resetPriorityAfterLockedSection();
                                    }
                                }
                                resetPriorityAfterLockedSection();
                            } else if ("lmk".equals(str10)) {
                                boostPriorityForLockedSection();
                                synchronized (this) {
                                    try {
                                        dumpLmkLocked(printWriter);
                                    } finally {
                                        resetPriorityAfterLockedSection();
                                    }
                                }
                                resetPriorityAfterLockedSection();
                                i3 = 0;
                                str2 = str11;
                                i4 = i6;
                            } else {
                                if ("lru".equals(str10)) {
                                    boostPriorityForLockedSection();
                                    synchronized (this) {
                                        try {
                                            this.mProcessList.dumpLruLocked(printWriter, str11, null);
                                        } finally {
                                            resetPriorityAfterLockedSection();
                                        }
                                    }
                                    resetPriorityAfterLockedSection();
                                    str2 = str11;
                                } else if ("permissions".equals(str10) || "perm".equals(str10)) {
                                    str2 = str11;
                                    i7 = i6;
                                    i3 = 0;
                                    dumpPermissions(fileDescriptor, printWriter, strArr, i7, true, str2);
                                } else {
                                    if ("provider".equals(str10)) {
                                        if (i6 >= strArr6.length) {
                                            strArr4 = EMPTY_STRING_ARRAY;
                                            i12 = i6;
                                            str5 = null;
                                        } else {
                                            String str15 = strArr6[i6];
                                            int i26 = i6 + 1;
                                            String[] strArr8 = new String[strArr6.length - i26];
                                            if (strArr6.length > 2) {
                                                System.arraycopy(strArr6, i26, strArr8, 0, strArr6.length - i26);
                                            }
                                            str5 = str15;
                                            i12 = i26;
                                            strArr4 = strArr8;
                                        }
                                        str2 = str11;
                                        if (!this.mCpHelper.dumpProvider(fileDescriptor, printWriter, str5, strArr4, 0, z7)) {
                                            printWriter.println("No providers match: " + str5);
                                            printWriter.println("Use -h for help.");
                                        }
                                        i5 = i12;
                                    } else {
                                        str2 = str11;
                                        if ("providers".equals(str10) || "prov".equals(str10)) {
                                            i7 = i6;
                                            i3 = 0;
                                            boostPriorityForLockedSection();
                                            synchronized (this) {
                                                try {
                                                    this.mCpHelper.dumpProvidersLocked(fileDescriptor, printWriter, strArr, i7, true, str2);
                                                } finally {
                                                    resetPriorityAfterLockedSection();
                                                }
                                            }
                                            resetPriorityAfterLockedSection();
                                        } else if (HostingRecord.HOSTING_TYPE_SERVICE.equals(str10)) {
                                            if (i6 >= strArr6.length) {
                                                strArr3 = EMPTY_STRING_ARRAY;
                                                i9 = i6;
                                                i10 = i24;
                                                i11 = -1;
                                                str4 = null;
                                            } else {
                                                String str16 = strArr6[i6];
                                                int i27 = i6 + 1;
                                                String[] strArr9 = new String[strArr6.length - i27];
                                                if (strArr6.length > 2) {
                                                    System.arraycopy(strArr6, i27, strArr9, 0, strArr6.length - i27);
                                                }
                                                i9 = i27;
                                                str4 = str16;
                                                strArr3 = strArr9;
                                                i10 = i24;
                                                i11 = -1;
                                            }
                                            if (!this.mServices.dumpService(fileDescriptor, printWriter, str4, i10 == i11 ? null : new int[]{i10}, strArr3, 0, z7)) {
                                                printWriter.println("No services match: " + str4);
                                                printWriter.println("Use -h for help.");
                                            }
                                            i5 = i9;
                                        } else {
                                            if ("package".equals(str10)) {
                                                if (i6 >= strArr6.length) {
                                                    printWriter.println("package: no package name specified");
                                                    printWriter.println("Use -h for help.");
                                                    i8 = 0;
                                                    str3 = str2;
                                                    i15 = i6;
                                                } else {
                                                    str3 = strArr6[i6];
                                                    int i28 = i6 + 1;
                                                    String[] strArr10 = new String[strArr6.length - i28];
                                                    if (strArr6.length > 2) {
                                                        System.arraycopy(strArr6, i28, strArr10, 0, strArr6.length - i28);
                                                    }
                                                    strArr6 = strArr10;
                                                    i8 = 1;
                                                }
                                                i5 = i15;
                                                i15 = i8;
                                            } else if ("associations".equals(str10) || "as".equals(str10)) {
                                                i7 = i6;
                                                i3 = 0;
                                                boostPriorityForLockedSection();
                                                synchronized (this) {
                                                    try {
                                                        dumpAssociationsLocked(fileDescriptor, printWriter, strArr, i7, true, z9, str2);
                                                    } finally {
                                                        resetPriorityAfterLockedSection();
                                                    }
                                                }
                                                resetPriorityAfterLockedSection();
                                            } else if ("settings".equals(str10)) {
                                                boostPriorityForLockedSection();
                                                synchronized (this) {
                                                    try {
                                                        this.mConstants.dump(printWriter);
                                                    } finally {
                                                        resetPriorityAfterLockedSection();
                                                    }
                                                }
                                                resetPriorityAfterLockedSection();
                                                ActivityManagerGlobalLock activityManagerGlobalLock4 = this.mProcLock;
                                                boostPriorityForProcLockedSection();
                                                synchronized (activityManagerGlobalLock4) {
                                                    try {
                                                        this.mOomAdjuster.dumpCachedAppOptimizerSettings(printWriter);
                                                        this.mOomAdjuster.dumpCacheOomRankerSettings(printWriter);
                                                    } finally {
                                                        resetPriorityAfterProcLockedSection();
                                                    }
                                                }
                                                resetPriorityAfterProcLockedSection();
                                            } else if ("locks".equals(str10)) {
                                                LockGuard.dump(fileDescriptor, printWriter, strArr);
                                            } else if ("services".equals(str10) || "s".equals(str10)) {
                                                i7 = i6;
                                                i3 = 0;
                                                if (z9) {
                                                    boostPriorityForLockedSection();
                                                    synchronized (this) {
                                                        try {
                                                            newServiceDumperLocked = this.mServices.newServiceDumperLocked(fileDescriptor, printWriter, strArr, i7, true, str2);
                                                        } finally {
                                                            resetPriorityAfterLockedSection();
                                                        }
                                                    }
                                                    resetPriorityAfterLockedSection();
                                                    newServiceDumperLocked.dumpWithClient();
                                                } else {
                                                    boostPriorityForLockedSection();
                                                    synchronized (this) {
                                                        try {
                                                            this.mServices.newServiceDumperLocked(fileDescriptor, printWriter, strArr, i7, true, str2).dumpLocked();
                                                        } finally {
                                                            resetPriorityAfterLockedSection();
                                                        }
                                                    }
                                                    resetPriorityAfterLockedSection();
                                                }
                                            } else if ("users".equals(str10)) {
                                                dumpUsers(printWriter);
                                            } else if ("exit-info".equals(str10)) {
                                                if (i6 < strArr6.length) {
                                                    str3 = strArr6[i6];
                                                    i5 = i6 + 1;
                                                } else {
                                                    i5 = i6;
                                                    str3 = str2;
                                                }
                                                this.mProcessList.mAppExitInfoTracker.dumpHistoryProcessExitInfo(printWriter, str3);
                                            } else if ("component-alias".equals(str10)) {
                                                this.mComponentAliasResolver.dump(printWriter);
                                            } else if ("message".equals(str10)) {
                                                this.mActivityManagerServiceExt.enableProcessMainThreadLooperLog(printWriter, strArr6, i6, this.mProcessList.mLruProcesses);
                                            } else {
                                                if (this.mActivityManagerServiceExt.hookDoDump(fileDescriptor, printWriter, strArr, i6, str10)) {
                                                    return;
                                                }
                                                i7 = i6;
                                                i3 = 0;
                                                if (!this.mAtmInternal.dumpActivity(fileDescriptor, printWriter, str10, strArr, i6, z7, z3, z4, i17, i24) && new ActivityManagerShellCommand(this, true).exec(this, (FileDescriptor) null, fileDescriptor, (FileDescriptor) null, strArr, (ShellCallback) null, new ResultReceiver(null)) < 0) {
                                                    printWriter.println("Bad activity command, or no activities match: " + str10);
                                                    printWriter.println("Use -h for help.");
                                                }
                                            }
                                            if (i15 != 0) {
                                            }
                                        }
                                    }
                                    str3 = str2;
                                    if (i15 != 0) {
                                    }
                                }
                                i3 = 0;
                                i4 = i6;
                            }
                            i4 = i7;
                        }
                        i5 = i13;
                        str3 = str11;
                        if (i15 != 0) {
                        }
                    }
                    i15 = i3;
                    if (i15 != 0) {
                    }
                }
                i5 = i4;
                str3 = str2;
                i15 = i3;
                if (i15 != 0) {
                }
            } else {
                i = appId;
                i2 = i18;
                strArr2 = strArr6;
                str = str8;
            }
            if (z8) {
                dumpBroadcastStatsCheckinLocked(fileDescriptor, printWriter, strArr2, i2, z5, str);
            } else {
                if (z9) {
                    dumpEverything(fileDescriptor, printWriter, strArr2, i2, z7, str, i17, z9, z6, i, true);
                } else {
                    boostPriorityForLockedSection();
                    synchronized (this) {
                        try {
                            dumpEverything(fileDescriptor, printWriter, strArr2, i2, z7, str, i17, z9, z6, i, false);
                        } finally {
                            resetPriorityAfterLockedSection();
                        }
                    }
                    resetPriorityAfterLockedSection();
                }
                if (z7) {
                    dumpAppRestrictionController(printWriter);
                }
            }
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:57:0x017e  */
    /* JADX WARN: Removed duplicated region for block: B:60:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:8:0x0029  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    void dumpAssociationsLocked(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, int i, boolean z, boolean z2, String str) {
        int i2;
        int size;
        int i3;
        boolean z3;
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap;
        SparseArray<ArrayMap<String, Association>> sparseArray;
        int i4;
        ActivityManagerService activityManagerService = this;
        String str2 = str;
        printWriter.println("ACTIVITY MANAGER ASSOCIATIONS (dumpsys activity associations)");
        int i5 = 0;
        if (str2 != null) {
            try {
                i2 = AppGlobals.getPackageManager().getPackageUid(str2, 4194304L, 0);
            } catch (RemoteException unused) {
            }
            long uptimeMillis = SystemClock.uptimeMillis();
            size = activityManagerService.mAssociations.size();
            i3 = 0;
            z3 = false;
            while (i3 < size) {
                ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> valueAt = activityManagerService.mAssociations.valueAt(i3);
                int size2 = valueAt.size();
                int i6 = i5;
                while (i6 < size2) {
                    SparseArray<ArrayMap<String, Association>> valueAt2 = valueAt.valueAt(i6);
                    int size3 = valueAt2.size();
                    int i7 = i5;
                    while (i7 < size3) {
                        ArrayMap<String, Association> valueAt3 = valueAt2.valueAt(i7);
                        int size4 = valueAt3.size();
                        int i8 = size;
                        int i9 = 0;
                        while (i9 < size4) {
                            int i10 = size4;
                            Association valueAt4 = valueAt3.valueAt(i9);
                            ArrayMap<String, Association> arrayMap2 = valueAt3;
                            if (str2 == null || valueAt4.mTargetComponent.getPackageName().equals(str2) || UserHandle.getAppId(valueAt4.mSourceUid) == i2) {
                                printWriter.print("  ");
                                printWriter.print(valueAt4.mTargetProcess);
                                printWriter.print("/");
                                UserHandle.formatUid(printWriter, valueAt4.mTargetUid);
                                printWriter.print(" <- ");
                                printWriter.print(valueAt4.mSourceProcess);
                                printWriter.print("/");
                                UserHandle.formatUid(printWriter, valueAt4.mSourceUid);
                                printWriter.println();
                                printWriter.print("    via ");
                                printWriter.print(valueAt4.mTargetComponent.flattenToShortString());
                                printWriter.println();
                                printWriter.print("    ");
                                arrayMap = valueAt;
                                long j = valueAt4.mTime;
                                if (valueAt4.mNesting > 0) {
                                    sparseArray = valueAt2;
                                    i4 = size3;
                                    j += uptimeMillis - valueAt4.mStartTime;
                                } else {
                                    sparseArray = valueAt2;
                                    i4 = size3;
                                }
                                TimeUtils.formatDuration(j, printWriter);
                                printWriter.print(" (");
                                printWriter.print(valueAt4.mCount);
                                printWriter.print(" times)");
                                printWriter.print("  ");
                                int i11 = 0;
                                while (true) {
                                    long[] jArr = valueAt4.mStateTimes;
                                    if (i11 >= jArr.length) {
                                        break;
                                    }
                                    long j2 = jArr[i11];
                                    if (valueAt4.mLastState - 0 == i11) {
                                        j2 += uptimeMillis - valueAt4.mLastStateUptime;
                                    }
                                    if (j2 != 0) {
                                        printWriter.print(" ");
                                        printWriter.print(ProcessList.makeProcStateString(i11 + 0));
                                        printWriter.print("=");
                                        TimeUtils.formatDuration(j2, printWriter);
                                        if (valueAt4.mLastState - 0 == i11) {
                                            printWriter.print("*");
                                        }
                                    }
                                    i11++;
                                }
                                printWriter.println();
                                if (valueAt4.mNesting > 0) {
                                    printWriter.print("    Currently active: ");
                                    TimeUtils.formatDuration(uptimeMillis - valueAt4.mStartTime, printWriter);
                                    printWriter.println();
                                }
                                z3 = true;
                            } else {
                                arrayMap = valueAt;
                                sparseArray = valueAt2;
                                i4 = size3;
                            }
                            i9++;
                            size4 = i10;
                            valueAt3 = arrayMap2;
                            valueAt = arrayMap;
                            valueAt2 = sparseArray;
                            size3 = i4;
                            str2 = str;
                        }
                        i7++;
                        size = i8;
                        i5 = 0;
                        valueAt = valueAt;
                        str2 = str;
                    }
                    i6++;
                    str2 = str;
                    valueAt = valueAt;
                }
                i3++;
                activityManagerService = this;
                str2 = str;
            }
            if (z3) {
                printWriter.println("  (nothing)");
                return;
            }
            return;
        }
        i2 = 0;
        long uptimeMillis2 = SystemClock.uptimeMillis();
        size = activityManagerService.mAssociations.size();
        i3 = 0;
        z3 = false;
        while (i3 < size) {
        }
        if (z3) {
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public int getAppId(String str) {
        if (str == null) {
            return -1;
        }
        try {
            return UserHandle.getAppId(this.mContext.getPackageManager().getApplicationInfo(str, 0).uid);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
            return -1;
        }
    }

    void dumpBinderProxyInterfaceCounts(PrintWriter printWriter, String str) {
        BinderProxy.InterfaceCount[] sortedInterfaceCounts = BinderProxy.getSortedInterfaceCounts(50);
        printWriter.println(str);
        int i = 0;
        while (i < sortedInterfaceCounts.length) {
            StringBuilder sb = new StringBuilder();
            sb.append("    #");
            int i2 = i + 1;
            sb.append(i2);
            sb.append(": ");
            sb.append(sortedInterfaceCounts[i]);
            printWriter.println(sb.toString());
            i = i2;
        }
    }

    boolean dumpBinderProxiesCounts(PrintWriter printWriter, String str) {
        SparseIntArray nGetBinderProxyPerUidCounts = BinderInternal.nGetBinderProxyPerUidCounts();
        if (nGetBinderProxyPerUidCounts == null) {
            return false;
        }
        printWriter.println(str);
        for (int i = 0; i < nGetBinderProxyPerUidCounts.size(); i++) {
            int keyAt = nGetBinderProxyPerUidCounts.keyAt(i);
            int valueAt = nGetBinderProxyPerUidCounts.valueAt(i);
            printWriter.print("    UID ");
            printWriter.print(keyAt);
            printWriter.print(", binder count = ");
            printWriter.print(valueAt);
            printWriter.print(", package(s)= ");
            String[] packagesForUid = this.mContext.getPackageManager().getPackagesForUid(keyAt);
            if (packagesForUid != null) {
                for (String str2 : packagesForUid) {
                    printWriter.print(str2);
                    printWriter.print("; ");
                }
            } else {
                printWriter.print("NO PACKAGE NAME FOUND");
            }
            printWriter.println();
        }
        return true;
    }

    void dumpBinderProxies(PrintWriter printWriter, int i) {
        printWriter.println("ACTIVITY MANAGER BINDER PROXY STATE (dumpsys activity binder-proxies)");
        int proxyCount = BinderProxy.getProxyCount();
        if (proxyCount >= i) {
            dumpBinderProxyInterfaceCounts(printWriter, "Top proxy interface names held by SYSTEM");
        } else {
            printWriter.print("Not dumping proxy interface counts because size (" + Integer.toString(proxyCount) + ") looks reasonable");
            printWriter.println();
        }
        dumpBinderProxiesCounts(printWriter, "  Counts of Binder Proxies held by SYSTEM");
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public boolean dumpActiveInstruments(PrintWriter printWriter, String str, boolean z) {
        int size = this.mActiveInstrumentation.size();
        if (size > 0) {
            boolean z2 = false;
            for (int i = 0; i < size; i++) {
                ActiveInstrumentation activeInstrumentation = this.mActiveInstrumentation.get(i);
                if (str == null || activeInstrumentation.mClass.getPackageName().equals(str) || activeInstrumentation.mTargetInfo.packageName.equals(str)) {
                    if (!z2) {
                        if (z) {
                            printWriter.println();
                        }
                        printWriter.println("  Active instrumentation:");
                        z = true;
                        z2 = true;
                    }
                    printWriter.print("    Instrumentation #");
                    printWriter.print(i);
                    printWriter.print(": ");
                    printWriter.println(activeInstrumentation);
                    activeInstrumentation.dump(printWriter, "      ");
                }
            }
        }
        return z;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this", "mProcLock"})
    @NeverCompile
    public void dumpOtherProcessesInfoLSP(FileDescriptor fileDescriptor, final PrintWriter printWriter, boolean z, String str, int i, int i2, boolean z2) {
        boolean z3;
        boolean dumpMemWatchProcessesLPf;
        boolean z4 = false;
        boolean z5 = true;
        if (z || str != null) {
            SparseArray sparseArray = new SparseArray();
            synchronized (this.mPidsSelfLocked) {
                int size = this.mPidsSelfLocked.size();
                z3 = z2;
                boolean z6 = false;
                for (int i3 = 0; i3 < size; i3++) {
                    ProcessRecord valueAt = this.mPidsSelfLocked.valueAt(i3);
                    sparseArray.put(valueAt.getPid(), valueAt);
                    if (str == null || valueAt.getPkgList().containsKey(str)) {
                        if (!z6) {
                            if (z3) {
                                printWriter.println();
                            }
                            printWriter.println("  PID mappings:");
                            z3 = true;
                            z6 = true;
                        }
                        printWriter.print("    PID #");
                        printWriter.print(this.mPidsSelfLocked.keyAt(i3));
                        printWriter.print(": ");
                        printWriter.println(this.mPidsSelfLocked.valueAt(i3));
                    }
                }
            }
            SparseArray<ProcessInfo> sparseArray2 = sActiveProcessInfoSelfLocked;
            synchronized (sparseArray2) {
                int size2 = sparseArray2.size();
                boolean z7 = false;
                for (int i4 = 0; i4 < size2; i4++) {
                    SparseArray<ProcessInfo> sparseArray3 = sActiveProcessInfoSelfLocked;
                    ProcessInfo valueAt2 = sparseArray3.valueAt(i4);
                    ProcessRecord processRecord = (ProcessRecord) sparseArray.get(sparseArray3.keyAt(i4));
                    if (processRecord == null || str == null || processRecord.getPkgList().containsKey(str)) {
                        if (!z7) {
                            if (z3) {
                                printWriter.println();
                            }
                            printWriter.println("  Active process infos:");
                            z3 = true;
                            z7 = true;
                        }
                        printWriter.print("    Pinfo PID #");
                        printWriter.print(sparseArray3.keyAt(i4));
                        printWriter.println(":");
                        printWriter.print("      name=");
                        printWriter.println(valueAt2.name);
                        if (valueAt2.deniedPermissions != null) {
                            for (int i5 = 0; i5 < valueAt2.deniedPermissions.size(); i5++) {
                                printWriter.print("      deny: ");
                                printWriter.println((String) valueAt2.deniedPermissions.valueAt(i5));
                            }
                        }
                    }
                }
            }
        } else {
            z3 = z2;
        }
        if (z) {
            this.mPhantomProcessList.dump(printWriter, "  ");
        }
        if (this.mImportantProcesses.size() > 0) {
            synchronized (this.mPidsSelfLocked) {
                int size3 = this.mImportantProcesses.size();
                boolean z8 = false;
                for (int i6 = 0; i6 < size3; i6++) {
                    ProcessRecord processRecord2 = this.mPidsSelfLocked.get(this.mImportantProcesses.valueAt(i6).pid);
                    if (str == null || (processRecord2 != null && processRecord2.getPkgList().containsKey(str))) {
                        if (!z8) {
                            if (z3) {
                                printWriter.println();
                            }
                            printWriter.println("  Foreground Processes:");
                            z3 = true;
                            z8 = true;
                        }
                        printWriter.print("    PID #");
                        printWriter.print(this.mImportantProcesses.keyAt(i6));
                        printWriter.print(": ");
                        printWriter.println(this.mImportantProcesses.valueAt(i6));
                    }
                }
            }
        }
        if (this.mPersistentStartingProcesses.size() > 0) {
            if (z3) {
                printWriter.println();
            }
            printWriter.println("  Persisent processes that are starting:");
            dumpProcessList(printWriter, this, this.mPersistentStartingProcesses, "    ", "Starting Norm", "Restarting PERS", str);
            z3 = true;
        }
        if (this.mProcessList.mRemovedProcesses.size() > 0) {
            if (z3) {
                printWriter.println();
            }
            printWriter.println("  Processes that are being removed:");
            dumpProcessList(printWriter, this, this.mProcessList.mRemovedProcesses, "    ", "Removed Norm", "Removed PERS", str);
            z3 = true;
        }
        if (this.mProcessesOnHold.size() > 0) {
            if (z3) {
                printWriter.println();
            }
            printWriter.println("  Processes that are on old until the system is ready:");
            dumpProcessList(printWriter, this, this.mProcessesOnHold, "    ", "OnHold Norm", "OnHold PERS", str);
            z3 = true;
        }
        boolean dumpForProcesses = this.mAtmInternal.dumpForProcesses(fileDescriptor, printWriter, z, str, i, this.mAppErrors.dumpLPr(fileDescriptor, printWriter, z3, str), this.mAppProfiler.getTestPssMode(), this.mWakefulness.get());
        if (!z || this.mProcessList.mPendingStarts.size() <= 0) {
            z5 = dumpForProcesses;
        } else {
            if (dumpForProcesses) {
                printWriter.println();
            }
            printWriter.println("  mPendingStarts: ");
            int size4 = this.mProcessList.mPendingStarts.size();
            for (int i7 = 0; i7 < size4; i7++) {
                printWriter.println("    " + this.mProcessList.mPendingStarts.keyAt(i7) + ": " + this.mProcessList.mPendingStarts.valueAt(i7));
            }
        }
        if (z) {
            this.mUidObserverController.dump(printWriter, str);
            printWriter.println("  mDeviceIdleAllowlist=" + Arrays.toString(this.mDeviceIdleAllowlist));
            printWriter.println("  mDeviceIdleExceptIdleAllowlist=" + Arrays.toString(this.mDeviceIdleExceptIdleAllowlist));
            printWriter.println("  mDeviceIdleTempAllowlist=" + Arrays.toString(this.mDeviceIdleTempAllowlist));
            if (this.mPendingTempAllowlist.size() > 0) {
                printWriter.println("  mPendingTempAllowlist:");
                int size5 = this.mPendingTempAllowlist.size();
                for (int i8 = 0; i8 < size5; i8++) {
                    PendingTempAllowlist valueAt3 = this.mPendingTempAllowlist.valueAt(i8);
                    printWriter.print("    ");
                    UserHandle.formatUid(printWriter, valueAt3.targetUid);
                    printWriter.print(": ");
                    TimeUtils.formatDuration(valueAt3.duration, printWriter);
                    printWriter.print(" ");
                    printWriter.println(valueAt3.tag);
                    printWriter.print(" ");
                    printWriter.print(valueAt3.type);
                    printWriter.print(" ");
                    printWriter.print(valueAt3.reasonCode);
                    printWriter.print(" ");
                    printWriter.print(valueAt3.callingUid);
                }
            }
            printWriter.println("  mFgsStartTempAllowList:");
            final long currentTimeMillis = System.currentTimeMillis();
            final long elapsedRealtime = SystemClock.elapsedRealtime();
            this.mFgsStartTempAllowList.forEach(new BiConsumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda20
                @Override // java.util.function.BiConsumer
                public final void accept(Object obj, Object obj2) {
                    ActivityManagerService.lambda$dumpOtherProcessesInfoLSP$13(printWriter, currentTimeMillis, elapsedRealtime, (Integer) obj, (Pair) obj2);
                }
            });
            if (!this.mProcessList.mAppsInBackgroundRestricted.isEmpty()) {
                printWriter.println("  Processes that are in background restricted:");
                int size6 = this.mProcessList.mAppsInBackgroundRestricted.size();
                for (int i9 = 0; i9 < size6; i9++) {
                    printWriter.println(String.format("%s #%2d: %s", "    ", Integer.valueOf(i9), this.mProcessList.mAppsInBackgroundRestricted.valueAt(i9).toString()));
                }
            }
        }
        String str2 = this.mDebugApp;
        if ((str2 != null || this.mOrigDebugApp != null || this.mDebugTransient || this.mOrigWaitForDebugger) && (str == null || str.equals(str2) || str.equals(this.mOrigDebugApp))) {
            if (z5) {
                printWriter.println();
                z5 = false;
            }
            printWriter.println("  mDebugApp=" + this.mDebugApp + "/orig=" + this.mOrigDebugApp + " mDebugTransient=" + this.mDebugTransient + " mOrigWaitForDebugger=" + this.mOrigWaitForDebugger);
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            dumpMemWatchProcessesLPf = this.mAppProfiler.dumpMemWatchProcessesLPf(printWriter, z5);
        }
        String str3 = this.mTrackAllocationApp;
        if (str3 != null && (str == null || str.equals(str3))) {
            if (dumpMemWatchProcessesLPf) {
                printWriter.println();
            } else {
                z4 = dumpMemWatchProcessesLPf;
            }
            printWriter.println("  mTrackAllocationApp=" + this.mTrackAllocationApp);
            dumpMemWatchProcessesLPf = z4;
        }
        boolean dumpProfileDataLocked = this.mAppProfiler.dumpProfileDataLocked(printWriter, str, dumpMemWatchProcessesLPf);
        String str4 = this.mNativeDebuggingApp;
        if (str4 != null && (str == null || str.equals(str4))) {
            if (dumpProfileDataLocked) {
                printWriter.println();
            }
            printWriter.println("  mNativeDebuggingApp=" + this.mNativeDebuggingApp);
        }
        if (str == null) {
            if (this.mAlwaysFinishActivities) {
                printWriter.println("  mAlwaysFinishActivities=" + this.mAlwaysFinishActivities);
            }
            if (z) {
                printWriter.println("  Total persistent processes: " + i2);
                printWriter.println("  mProcessesReady=" + this.mProcessesReady + " mSystemReady=" + this.mSystemReady + " mBooted=" + this.mBooted + " mFactoryTest=" + this.mFactoryTest);
                StringBuilder sb = new StringBuilder();
                sb.append("  mBooting=");
                sb.append(this.mBooting);
                sb.append(" mCallFinishBooting=");
                sb.append(this.mCallFinishBooting);
                sb.append(" mBootAnimationComplete=");
                sb.append(this.mBootAnimationComplete);
                printWriter.println(sb.toString());
                printWriter.print("  mLastPowerCheckUptime=");
                TimeUtils.formatDuration(this.mLastPowerCheckUptime, printWriter);
                printWriter.println("");
                this.mOomAdjuster.dumpSequenceNumbersLocked(printWriter);
                this.mOomAdjuster.dumpProcCountsLocked(printWriter);
                this.mAppProfiler.dumpMemoryLevelsLocked(printWriter);
                long uptimeMillis = SystemClock.uptimeMillis();
                printWriter.print("  mLastIdleTime=");
                TimeUtils.formatDuration(uptimeMillis, this.mLastIdleTime, printWriter);
                printWriter.print(" mLowRamSinceLastIdle=");
                TimeUtils.formatDuration(this.mAppProfiler.getLowRamTimeSinceIdleLPr(uptimeMillis), printWriter);
                printWriter.println();
                printWriter.println();
                printWriter.println("  ServiceManager statistics:");
                ServiceManager.sStatLogger.dump(printWriter, "    ");
                printWriter.println();
            }
        }
        printWriter.println("  mForceBackgroundCheck=" + this.mForceBackgroundCheck);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$dumpOtherProcessesInfoLSP$13(PrintWriter printWriter, long j, long j2, Integer num, Pair pair) {
        printWriter.print("    " + UserHandle.formatUid(num.intValue()) + ": ");
        ((FgsTempAllowListItem) pair.second).dump(printWriter);
        printWriter.print(" expiration=");
        TimeUtils.dumpTimeWithDelta(printWriter, (j - j2) + ((Long) pair.first).longValue(), j);
        printWriter.println();
    }

    private void dumpUsers(PrintWriter printWriter) {
        printWriter.println("ACTIVITY MANAGER USERS (dumpsys activity users)");
        this.mUserController.dump(printWriter);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this", "mProcLock"})
    public void writeOtherProcessesInfoToProtoLSP(ProtoOutputStream protoOutputStream, String str, int i, int i2) {
        int size = this.mActiveInstrumentation.size();
        for (int i3 = 0; i3 < size; i3++) {
            ActiveInstrumentation activeInstrumentation = this.mActiveInstrumentation.get(i3);
            if (str == null || activeInstrumentation.mClass.getPackageName().equals(str) || activeInstrumentation.mTargetInfo.packageName.equals(str)) {
                activeInstrumentation.dumpDebug(protoOutputStream, 2246267895811L);
            }
        }
        this.mUidObserverController.dumpValidateUidsProto(protoOutputStream, str, i, 2246267895813L);
        if (str != null) {
            synchronized (this.mPidsSelfLocked) {
                int size2 = this.mPidsSelfLocked.size();
                for (int i4 = 0; i4 < size2; i4++) {
                    ProcessRecord valueAt = this.mPidsSelfLocked.valueAt(i4);
                    if (valueAt.getPkgList().containsKey(str)) {
                        valueAt.dumpDebug(protoOutputStream, 2246267895815L);
                    }
                }
            }
        }
        if (this.mImportantProcesses.size() > 0) {
            synchronized (this.mPidsSelfLocked) {
                int size3 = this.mImportantProcesses.size();
                for (int i5 = 0; i5 < size3; i5++) {
                    ImportanceToken valueAt2 = this.mImportantProcesses.valueAt(i5);
                    ProcessRecord processRecord = this.mPidsSelfLocked.get(valueAt2.pid);
                    if (str == null || (processRecord != null && processRecord.getPkgList().containsKey(str))) {
                        valueAt2.dumpDebug(protoOutputStream, 2246267895816L);
                    }
                }
            }
        }
        int size4 = this.mPersistentStartingProcesses.size();
        for (int i6 = 0; i6 < size4; i6++) {
            ProcessRecord processRecord2 = this.mPersistentStartingProcesses.get(i6);
            if (str == null || str.equals(processRecord2.info.packageName)) {
                processRecord2.dumpDebug(protoOutputStream, 2246267895817L);
            }
        }
        int size5 = this.mProcessList.mRemovedProcesses.size();
        for (int i7 = 0; i7 < size5; i7++) {
            ProcessRecord processRecord3 = this.mProcessList.mRemovedProcesses.get(i7);
            if (str == null || str.equals(processRecord3.info.packageName)) {
                processRecord3.dumpDebug(protoOutputStream, 2246267895818L);
            }
        }
        int size6 = this.mProcessesOnHold.size();
        for (int i8 = 0; i8 < size6; i8++) {
            ProcessRecord processRecord4 = this.mProcessesOnHold.get(i8);
            if (str == null || str.equals(processRecord4.info.packageName)) {
                processRecord4.dumpDebug(protoOutputStream, 2246267895819L);
            }
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            this.mAppProfiler.writeProcessesToGcToProto(protoOutputStream, 2246267895820L, str);
        }
        this.mAppErrors.dumpDebugLPr(protoOutputStream, 1146756268045L, str);
        this.mAtmInternal.writeProcessesToProto(protoOutputStream, str, this.mWakefulness.get(), this.mAppProfiler.getTestPssMode());
        if (str == null) {
            this.mUserController.dumpDebug(protoOutputStream, 1146756268046L);
        }
        this.mUidObserverController.dumpDebug(protoOutputStream, str);
        for (int i9 : this.mDeviceIdleAllowlist) {
            protoOutputStream.write(2220498092056L, i9);
        }
        for (int i10 : this.mDeviceIdleTempAllowlist) {
            protoOutputStream.write(2220498092057L, i10);
        }
        if (this.mPendingTempAllowlist.size() > 0) {
            int size7 = this.mPendingTempAllowlist.size();
            for (int i11 = 0; i11 < size7; i11++) {
                this.mPendingTempAllowlist.valueAt(i11).dumpDebug(protoOutputStream, 2246267895834L);
            }
        }
        String str2 = this.mDebugApp;
        if ((str2 != null || this.mOrigDebugApp != null || this.mDebugTransient || this.mOrigWaitForDebugger) && (str == null || str.equals(str2) || str.equals(this.mOrigDebugApp))) {
            long start = protoOutputStream.start(1146756268062L);
            protoOutputStream.write(1138166333441L, this.mDebugApp);
            protoOutputStream.write(1138166333442L, this.mOrigDebugApp);
            protoOutputStream.write(1133871366147L, this.mDebugTransient);
            protoOutputStream.write(1133871366148L, this.mOrigWaitForDebugger);
            protoOutputStream.end(start);
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            this.mAppProfiler.writeMemWatchProcessToProtoLPf(protoOutputStream);
        }
        String str3 = this.mTrackAllocationApp;
        if (str3 != null && (str == null || str.equals(str3))) {
            protoOutputStream.write(1138166333473L, this.mTrackAllocationApp);
        }
        this.mAppProfiler.writeProfileDataToProtoLocked(protoOutputStream, str);
        if (str == null || str.equals(this.mNativeDebuggingApp)) {
            protoOutputStream.write(1138166333475L, this.mNativeDebuggingApp);
        }
        if (str == null) {
            protoOutputStream.write(1133871366180L, this.mAlwaysFinishActivities);
            protoOutputStream.write(1120986464294L, i2);
            protoOutputStream.write(1133871366183L, this.mProcessesReady);
            protoOutputStream.write(1133871366184L, this.mSystemReady);
            protoOutputStream.write(1133871366185L, this.mBooted);
            protoOutputStream.write(1120986464298L, this.mFactoryTest);
            protoOutputStream.write(1133871366187L, this.mBooting);
            protoOutputStream.write(1133871366188L, this.mCallFinishBooting);
            protoOutputStream.write(1133871366189L, this.mBootAnimationComplete);
            protoOutputStream.write(1112396529710L, this.mLastPowerCheckUptime);
            this.mOomAdjuster.dumpProcessListVariablesLocked(protoOutputStream);
            this.mAppProfiler.writeMemoryLevelsToProtoLocked(protoOutputStream);
            long uptimeMillis = SystemClock.uptimeMillis();
            ProtoUtils.toDuration(protoOutputStream, 1146756268090L, this.mLastIdleTime, uptimeMillis);
            protoOutputStream.write(1112396529723L, this.mAppProfiler.getLowRamTimeSinceIdleLPr(uptimeMillis));
        }
    }

    private boolean reportLmkKillAtOrBelow(PrintWriter printWriter, int i) {
        Integer lmkdKillCount = ProcessList.getLmkdKillCount(0, i);
        if (lmkdKillCount == null) {
            return false;
        }
        printWriter.println("    kills at or below oom_adj " + i + ": " + lmkdKillCount);
        return true;
    }

    boolean dumpLmkLocked(PrintWriter printWriter) {
        printWriter.println("ACTIVITY MANAGER LMK KILLS (dumpsys activity lmk)");
        Integer lmkdKillCount = ProcessList.getLmkdKillCount(1001, 1001);
        if (lmkdKillCount == null) {
            return false;
        }
        printWriter.println("  Total number of kills: " + lmkdKillCount);
        return reportLmkKillAtOrBelow(printWriter, 999) && reportLmkKillAtOrBelow(printWriter, ProcessList.CACHED_APP_MIN_ADJ) && reportLmkKillAtOrBelow(printWriter, ProcessList.SERVICE_B_ADJ) && reportLmkKillAtOrBelow(printWriter, ProcessList.PREVIOUS_APP_ADJ) && reportLmkKillAtOrBelow(printWriter, 600) && reportLmkKillAtOrBelow(printWriter, 500) && reportLmkKillAtOrBelow(printWriter, 400) && reportLmkKillAtOrBelow(printWriter, 300) && reportLmkKillAtOrBelow(printWriter, 250) && reportLmkKillAtOrBelow(printWriter, 200) && reportLmkKillAtOrBelow(printWriter, 100) && reportLmkKillAtOrBelow(printWriter, 0);
    }

    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static class ItemMatcher {
        boolean all = true;
        ArrayList<ComponentName> components;
        ArrayList<Integer> objects;
        ArrayList<String> strings;

        public void build(String str) {
            ComponentName unflattenFromString = ComponentName.unflattenFromString(str);
            if (unflattenFromString != null) {
                if (this.components == null) {
                    this.components = new ArrayList<>();
                }
                this.components.add(unflattenFromString);
                this.all = false;
                return;
            }
            try {
                int parseInt = Integer.parseInt(str, 16);
                if (this.objects == null) {
                    this.objects = new ArrayList<>();
                }
                this.objects.add(Integer.valueOf(parseInt));
                this.all = false;
            } catch (RuntimeException unused) {
                if (this.strings == null) {
                    this.strings = new ArrayList<>();
                }
                this.strings.add(str);
                this.all = false;
            }
        }

        public int build(String[] strArr, int i) {
            while (i < strArr.length) {
                String str = strArr[i];
                if ("--".equals(str)) {
                    return i + 1;
                }
                build(str);
                i++;
            }
            return i;
        }

        public boolean match(Object obj, ComponentName componentName) {
            if (this.all) {
                return true;
            }
            if (this.components != null) {
                for (int i = 0; i < this.components.size(); i++) {
                    if (this.components.get(i).equals(componentName)) {
                        return true;
                    }
                }
            }
            if (this.objects != null) {
                for (int i2 = 0; i2 < this.objects.size(); i2++) {
                    if (System.identityHashCode(obj) == this.objects.get(i2).intValue()) {
                        return true;
                    }
                }
            }
            if (this.strings != null) {
                String flattenToString = componentName.flattenToString();
                for (int i3 = 0; i3 < this.strings.size(); i3++) {
                    if (flattenToString.contains(this.strings.get(i3))) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    void writeBroadcastsToProtoLocked(ProtoOutputStream protoOutputStream) {
        if (this.mRegisteredReceivers.size() > 0) {
            Iterator<ReceiverList> it = this.mRegisteredReceivers.values().iterator();
            while (it.hasNext()) {
                it.next().dumpDebug(protoOutputStream, 2246267895809L);
            }
        }
        this.mReceiverResolver.dumpDebug(protoOutputStream, 1146756268034L);
        for (BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.dumpDebug(protoOutputStream, 2246267895811L);
        }
        int i = 0;
        while (true) {
            long j = 1138166333441L;
            if (i < this.mStickyBroadcasts.size()) {
                long start = protoOutputStream.start(2246267895812L);
                protoOutputStream.write(1120986464257L, this.mStickyBroadcasts.keyAt(i));
                for (Map.Entry<String, ArrayList<StickyBroadcast>> entry : this.mStickyBroadcasts.valueAt(i).entrySet()) {
                    long start2 = protoOutputStream.start(2246267895810L);
                    protoOutputStream.write(j, entry.getKey());
                    Iterator<StickyBroadcast> it2 = entry.getValue().iterator();
                    while (it2.hasNext()) {
                        it2.next().intent.dumpDebug(protoOutputStream, 2246267895810L, false, true, true, false);
                        start2 = start2;
                        start = start;
                    }
                    protoOutputStream.end(start2);
                    j = 1138166333441L;
                }
                protoOutputStream.end(start);
                i++;
            } else {
                long start3 = protoOutputStream.start(1146756268037L);
                protoOutputStream.write(1138166333441L, this.mHandler.toString());
                this.mHandler.getLooper().dumpDebug(protoOutputStream, 1146756268034L);
                protoOutputStream.end(start3);
                return;
            }
        }
    }

    void dumpAllowedAssociationsLocked(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, int i, boolean z, String str) {
        printWriter.println("ACTIVITY MANAGER ALLOWED ASSOCIATION STATE (dumpsys activity allowed-associations)");
        boolean z2 = false;
        if (this.mAllowedAssociations != null) {
            boolean z3 = false;
            for (int i2 = 0; i2 < this.mAllowedAssociations.size(); i2++) {
                String keyAt = this.mAllowedAssociations.keyAt(i2);
                ArraySet<String> allowedPackageAssociations = this.mAllowedAssociations.valueAt(i2).getAllowedPackageAssociations();
                if (!z3) {
                    printWriter.println("  Allowed associations (by restricted package):");
                    z3 = true;
                }
                printWriter.print("  * ");
                printWriter.print(keyAt);
                printWriter.println(":");
                for (int i3 = 0; i3 < allowedPackageAssociations.size(); i3++) {
                    if (str == null || keyAt.equals(str) || allowedPackageAssociations.valueAt(i3).equals(str)) {
                        printWriter.print("      Allow: ");
                        printWriter.println(allowedPackageAssociations.valueAt(i3));
                    }
                }
                if (this.mAllowedAssociations.valueAt(i2).isDebuggable()) {
                    printWriter.println("      (debuggable)");
                }
            }
            z2 = z3;
        }
        if (z2) {
            return;
        }
        printWriter.println("  (No association restrictions)");
    }

    @NeverCompile
    void dumpBroadcastsLocked(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, int i, boolean z, String str) {
        boolean z2;
        boolean z3;
        String str2;
        int i2;
        boolean z4;
        boolean z5;
        boolean z6;
        int i3;
        ProcessRecord processRecord;
        boolean z7 = true;
        String str3 = str;
        boolean z8 = true;
        if ("history".equals(str3)) {
            z2 = (i >= strArr.length || !"-s".equals(strArr[i])) ? z : false;
            str3 = null;
            z3 = true;
        } else {
            z2 = z;
            z3 = false;
        }
        int i4 = -1;
        if ("receivers".equals(str3)) {
            if (i + 2 <= strArr.length) {
                i2 = -1;
                int i5 = i;
                while (i5 < strArr.length) {
                    String str4 = strArr[i5];
                    str4.hashCode();
                    if (str4.equals("--uid")) {
                        int i6 = i5 + 1;
                        i2 = getIntArg(printWriter, strArr, i6, -1);
                        if (i2 == -1) {
                            return;
                        } else {
                            i5 = i6 + 1;
                        }
                    } else {
                        printWriter.printf("Invalid argument at index %d: %s\n", Integer.valueOf(i5), str4);
                        return;
                    }
                }
                str2 = null;
            } else {
                str2 = null;
                i2 = -1;
            }
            z4 = true;
        } else {
            str2 = str3;
            i2 = -1;
            z4 = false;
        }
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slogf.d(TAG_BROADCAST, "dumpBroadcastsLocked(): dumpPackage=%s, onlyHistory=%b, onlyReceivers=%b, filteredUid=%d", new Object[]{str2, Boolean.valueOf(z3), Boolean.valueOf(z4), Integer.valueOf(i2)});
        }
        printWriter.println("ACTIVITY MANAGER BROADCAST STATE (dumpsys activity broadcasts)");
        String str5 = "    ";
        if (z3 || !z2) {
            z5 = false;
            z6 = false;
        } else {
            if (this.mRegisteredReceivers.size() > 0) {
                boolean z9 = false;
                boolean z10 = false;
                boolean z11 = false;
                for (ReceiverList receiverList : this.mRegisteredReceivers.values()) {
                    if (str2 == null || ((processRecord = receiverList.app) != null && str2.equals(processRecord.info.packageName))) {
                        if (i2 != i4 && i2 != (i3 = receiverList.app.uid)) {
                            if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                                Slogf.v(TAG_BROADCAST, "dumpBroadcastsLocked(): skipping receiver whose uid (%d) is not %d: %s", new Object[]{Integer.valueOf(i3), Integer.valueOf(i2), receiverList.app});
                            }
                        } else {
                            if (!z11) {
                                printWriter.println("  Registered Receivers:");
                                z9 = true;
                                z10 = true;
                                z11 = true;
                            }
                            printWriter.print("  * ");
                            printWriter.println(receiverList);
                            receiverList.dump(printWriter, "    ");
                        }
                    }
                    i4 = -1;
                }
                z5 = z9;
                z6 = z10;
            } else {
                if (z4) {
                    printWriter.println("  (no registered receivers)");
                }
                z5 = false;
                z6 = false;
            }
            if (!z4) {
                if (this.mReceiverResolver.dump(printWriter, z5 ? "\n  Receiver Resolver Table:" : "  Receiver Resolver Table:", "    ", str2, false, false)) {
                    z5 = true;
                    z6 = true;
                }
            }
        }
        if (!z4) {
            BroadcastQueue[] broadcastQueueArr = this.mBroadcastQueues;
            int length = broadcastQueueArr.length;
            int i7 = 0;
            while (i7 < length) {
                z5 = broadcastQueueArr[i7].dumpLocked(fileDescriptor, printWriter, strArr, i, z7, true, z2, str2, z5);
                z6 |= z5;
                i7++;
                str5 = str5;
                length = length;
                broadcastQueueArr = broadcastQueueArr;
                z7 = true;
            }
        }
        String str6 = str5;
        String str7 = str2;
        int i8 = 0;
        if (!z3 && !z4 && this.mStickyBroadcasts != null && str7 == null) {
            int i9 = 0;
            while (i9 < this.mStickyBroadcasts.size()) {
                printWriter.println();
                printWriter.print("  Sticky broadcasts for user ");
                printWriter.print(this.mStickyBroadcasts.keyAt(i9));
                printWriter.println(":");
                StringBuilder sb = new StringBuilder(128);
                for (Map.Entry<String, ArrayList<StickyBroadcast>> entry : this.mStickyBroadcasts.valueAt(i9).entrySet()) {
                    printWriter.print("  * Sticky action ");
                    printWriter.print(entry.getKey());
                    if (z2) {
                        printWriter.println(":");
                        ArrayList<StickyBroadcast> value = entry.getValue();
                        int size = value.size();
                        int i10 = i8;
                        while (i10 < size) {
                            Intent intent = value.get(i10).intent;
                            boolean z12 = value.get(i10).deferUntilActive;
                            sb.setLength(i8);
                            sb.append("    Intent: ");
                            int i11 = i10;
                            intent.toShortString(sb, false, true, false, false);
                            printWriter.print(sb);
                            if (z12) {
                                printWriter.print(" [D]");
                            }
                            printWriter.println();
                            printWriter.print("      originalCallingUid: ");
                            printWriter.println(value.get(i11).originalCallingUid);
                            printWriter.println();
                            Object extras = intent.getExtras();
                            if (extras != null) {
                                printWriter.print("      extras: ");
                                printWriter.println(extras);
                            }
                            i10 = i11 + 1;
                            i8 = 0;
                        }
                    } else {
                        printWriter.println("");
                    }
                    i8 = 0;
                }
                i9++;
                z6 = true;
                i8 = 0;
            }
        }
        if (z3 || z4 || !z2) {
            z8 = z6;
        } else {
            printWriter.println();
            for (BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
                printWriter.println("  Queue " + broadcastQueue.toString() + ": " + broadcastQueue.describeStateLocked());
            }
            printWriter.println("  mHandler:");
            this.mHandler.dump(new PrintWriterPrinter(printWriter), str6);
        }
        if (z8) {
            return;
        }
        printWriter.println("  (nothing)");
    }

    @NeverCompile
    void dumpBroadcastStatsLocked(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, int i, boolean z, String str) {
        if (this.mCurBroadcastStats == null) {
            return;
        }
        printWriter.println("ACTIVITY MANAGER BROADCAST STATS STATE (dumpsys activity broadcast-stats)");
        long elapsedRealtime = SystemClock.elapsedRealtime();
        if (this.mLastBroadcastStats != null) {
            printWriter.print("  Last stats (from ");
            TimeUtils.formatDuration(this.mLastBroadcastStats.mStartRealtime, elapsedRealtime, printWriter);
            printWriter.print(" to ");
            TimeUtils.formatDuration(this.mLastBroadcastStats.mEndRealtime, elapsedRealtime, printWriter);
            printWriter.print(", ");
            BroadcastStats broadcastStats = this.mLastBroadcastStats;
            TimeUtils.formatDuration(broadcastStats.mEndUptime - broadcastStats.mStartUptime, printWriter);
            printWriter.println(" uptime):");
            if (!this.mLastBroadcastStats.dumpStats(printWriter, "    ", str)) {
                printWriter.println("    (nothing)");
            }
            printWriter.println();
        }
        printWriter.print("  Current stats (from ");
        TimeUtils.formatDuration(this.mCurBroadcastStats.mStartRealtime, elapsedRealtime, printWriter);
        printWriter.print(" to now, ");
        TimeUtils.formatDuration(SystemClock.uptimeMillis() - this.mCurBroadcastStats.mStartUptime, printWriter);
        printWriter.println(" uptime):");
        if (this.mCurBroadcastStats.dumpStats(printWriter, "    ", str)) {
            return;
        }
        printWriter.println("    (nothing)");
    }

    @NeverCompile
    void dumpBroadcastStatsCheckinLocked(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, int i, boolean z, String str) {
        if (this.mCurBroadcastStats == null) {
            return;
        }
        BroadcastStats broadcastStats = this.mLastBroadcastStats;
        if (broadcastStats != null) {
            broadcastStats.dumpCheckinStats(printWriter, str);
            if (z) {
                this.mLastBroadcastStats = null;
                return;
            }
        }
        this.mCurBroadcastStats.dumpCheckinStats(printWriter, str);
        if (z) {
            this.mCurBroadcastStats = null;
        }
    }

    void dumpPermissions(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, int i, boolean z, String str) {
        printWriter.println("ACTIVITY MANAGER URI PERMISSIONS (dumpsys activity permissions)");
        this.mUgmInternal.dump(printWriter, z, str);
    }

    private static int dumpProcessList(PrintWriter printWriter, ActivityManagerService activityManagerService, List list, String str, String str2, String str3, String str4) {
        int i = 0;
        for (int size = list.size() - 1; size >= 0; size--) {
            ProcessRecord processRecord = (ProcessRecord) list.get(size);
            if (str4 == null || str4.equals(processRecord.info.packageName)) {
                Object[] objArr = new Object[4];
                objArr[0] = str;
                objArr[1] = processRecord.isPersistent() ? str3 : str2;
                objArr[2] = Integer.valueOf(size);
                objArr[3] = processRecord.toString();
                printWriter.println(String.format("%s%s #%2d: %s", objArr));
                if (processRecord.isPersistent()) {
                    i++;
                }
            }
        }
        return i;
    }

    ArrayList<ProcessRecord> collectProcesses(PrintWriter printWriter, int i, boolean z, String[] strArr) {
        ArrayList<ProcessRecord> collectProcessesLOSP;
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                collectProcessesLOSP = this.mProcessList.collectProcessesLOSP(i, z, strArr);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return collectProcessesLOSP;
    }

    final void dumpGraphicsHardwareUsage(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr) {
        ArrayList<ProcessRecord> collectProcesses = collectProcesses(printWriter, 0, false, strArr);
        if (collectProcesses == null) {
            printWriter.println("No process found for: " + strArr[0]);
            return;
        }
        long uptimeMillis = SystemClock.uptimeMillis();
        long elapsedRealtime = SystemClock.elapsedRealtime();
        printWriter.println("Applications Graphics Acceleration Info:");
        printWriter.println("Uptime: " + uptimeMillis + " Realtime: " + elapsedRealtime);
        for (int size = collectProcesses.size() + (-1); size >= 0; size--) {
            ProcessRecord processRecord = collectProcesses.get(size);
            int pid = processRecord.getPid();
            IApplicationThread thread = processRecord.getThread();
            if (thread != null) {
                printWriter.println("\n** Graphics info for pid " + pid + " [" + processRecord.processName + "] **");
                printWriter.flush();
                try {
                    TransferPipe transferPipe = new TransferPipe();
                    try {
                        if (MY_PID == pid) {
                            thread.dumpGfxInfo(new ParcelFileDescriptor(fileDescriptor), strArr);
                        } else {
                            thread.dumpGfxInfo(transferPipe.getWriteFd(), strArr);
                            transferPipe.go(fileDescriptor);
                        }
                        transferPipe.kill();
                    } catch (Throwable th) {
                        transferPipe.kill();
                        throw th;
                        break;
                    }
                } catch (RemoteException unused) {
                    printWriter.println("Got a RemoteException while dumping the app " + processRecord);
                    printWriter.flush();
                } catch (IOException unused2) {
                    printWriter.println("Failure while dumping the app: " + processRecord);
                    printWriter.flush();
                }
            }
        }
    }

    final void dumpBinderCacheContents(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr) {
        ArrayList<ProcessRecord> collectProcesses = collectProcesses(printWriter, 0, false, strArr);
        if (collectProcesses == null) {
            printWriter.println("No process found for: " + strArr[0]);
            return;
        }
        printWriter.println("Per-process Binder Cache Contents");
        for (int size = collectProcesses.size() - 1; size >= 0; size--) {
            ProcessRecord processRecord = collectProcesses.get(size);
            int pid = processRecord.getPid();
            IApplicationThread thread = processRecord.getThread();
            if (thread != null) {
                printWriter.println("\n\n** Cache info for pid " + pid + " [" + processRecord.processName + "] **");
                printWriter.flush();
                try {
                    TransferPipe transferPipe = new TransferPipe();
                    try {
                        thread.dumpCacheInfo(transferPipe.getWriteFd(), strArr);
                        transferPipe.go(fileDescriptor);
                        transferPipe.kill();
                    } catch (Throwable th) {
                        transferPipe.kill();
                        throw th;
                        break;
                    }
                } catch (RemoteException unused) {
                    printWriter.println("Got a RemoteException while dumping the app " + processRecord);
                    printWriter.flush();
                } catch (IOException unused2) {
                    printWriter.println("Failure while dumping the app " + processRecord);
                    printWriter.flush();
                }
            }
        }
    }

    final void dumpDbInfo(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr) {
        ArrayList<ProcessRecord> collectProcesses = collectProcesses(printWriter, 0, false, strArr);
        if (collectProcesses == null) {
            printWriter.println("No process found for: " + strArr[0]);
            return;
        }
        printWriter.println("Applications Database Info:");
        for (int size = collectProcesses.size() - 1; size >= 0; size--) {
            ProcessRecord processRecord = collectProcesses.get(size);
            int pid = processRecord.getPid();
            IApplicationThread thread = processRecord.getThread();
            if (thread != null) {
                printWriter.println("\n** Database info for pid " + pid + " [" + processRecord.processName + "] **");
                printWriter.flush();
                try {
                    TransferPipe transferPipe = new TransferPipe();
                    try {
                        thread.dumpDbInfo(transferPipe.getWriteFd(), strArr);
                        transferPipe.go(fileDescriptor);
                        transferPipe.kill();
                    } catch (Throwable th) {
                        transferPipe.kill();
                        throw th;
                        break;
                    }
                } catch (RemoteException unused) {
                    printWriter.println("Got a RemoteException while dumping the app " + processRecord);
                    printWriter.flush();
                } catch (IOException unused2) {
                    printWriter.println("Failure while dumping the app: " + processRecord);
                    printWriter.flush();
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static final class MemItem {
        final boolean hasActivities;
        final int id;
        final boolean isProc;
        final String label;
        final long mRss;
        final long pss;
        final String shortLabel;
        ArrayList<MemItem> subitems;
        final long swapPss;
        final int userId;

        MemItem(String str, String str2, long j, long j2, long j3, int i, int i2, boolean z) {
            this.isProc = true;
            this.label = str;
            this.shortLabel = str2;
            this.pss = j;
            this.swapPss = j2;
            this.mRss = j3;
            this.id = i;
            this.userId = i2;
            this.hasActivities = z;
        }

        MemItem(String str, String str2, long j, long j2, long j3, int i) {
            this.isProc = false;
            this.label = str;
            this.shortLabel = str2;
            this.pss = j;
            this.swapPss = j2;
            this.mRss = j3;
            this.id = i;
            this.userId = 0;
            this.hasActivities = false;
        }
    }

    private static void sortMemItems(List<MemItem> list, final boolean z) {
        Collections.sort(list, new Comparator<MemItem>() { // from class: com.android.server.am.ActivityManagerService.17
            @Override // java.util.Comparator
            public int compare(MemItem memItem, MemItem memItem2) {
                boolean z2 = z;
                long j = z2 ? memItem.pss : memItem.mRss;
                long j2 = z2 ? memItem2.pss : memItem2.mRss;
                if (j < j2) {
                    return 1;
                }
                return j > j2 ? -1 : 0;
            }
        });
    }

    static final void dumpMemItems(PrintWriter printWriter, String str, String str2, ArrayList<MemItem> arrayList, boolean z, boolean z2, boolean z3, boolean z4) {
        if (z && !z2) {
            sortMemItems(arrayList, z3);
        }
        for (int i = 0; i < arrayList.size(); i++) {
            MemItem memItem = arrayList.get(i);
            if (z2) {
                if (memItem.isProc) {
                    printWriter.print("proc,");
                    printWriter.print(str2);
                    printWriter.print(",");
                    printWriter.print(memItem.shortLabel);
                    printWriter.print(",");
                    printWriter.print(memItem.id);
                    printWriter.print(",");
                    printWriter.print(z3 ? memItem.pss : memItem.mRss);
                    printWriter.print(",");
                    printWriter.print(z4 ? Long.valueOf(memItem.swapPss) : "N/A");
                    printWriter.println(memItem.hasActivities ? ",a" : ",e");
                } else {
                    printWriter.print(str2);
                    printWriter.print(",");
                    printWriter.print(memItem.shortLabel);
                    printWriter.print(",");
                    printWriter.print(z3 ? memItem.pss : memItem.mRss);
                    printWriter.print(",");
                    printWriter.println(z4 ? Long.valueOf(memItem.swapPss) : "N/A");
                }
            } else if (z3 && z4) {
                printWriter.printf("%s%s: %-60s (%s in swap)\n", str, stringifyKBSize(memItem.pss), memItem.label, stringifyKBSize(memItem.swapPss));
            } else {
                Object[] objArr = new Object[4];
                objArr[0] = str;
                objArr[1] = stringifyKBSize(z3 ? memItem.pss : memItem.mRss);
                objArr[2] = memItem.label;
                objArr[3] = memItem.userId != 0 ? " (user " + memItem.userId + ")" : "";
                printWriter.printf("%s%s: %s%s\n", objArr);
            }
            if (memItem.subitems != null) {
                dumpMemItems(printWriter, str + "    ", memItem.shortLabel, memItem.subitems, true, z2, z3, z4);
            }
        }
    }

    static final void dumpMemItems(ProtoOutputStream protoOutputStream, long j, String str, ArrayList<MemItem> arrayList, boolean z, boolean z2, boolean z3) {
        if (z) {
            sortMemItems(arrayList, z2);
        }
        for (int i = 0; i < arrayList.size(); i++) {
            MemItem memItem = arrayList.get(i);
            long start = protoOutputStream.start(j);
            protoOutputStream.write(1138166333441L, str);
            protoOutputStream.write(1138166333442L, memItem.shortLabel);
            protoOutputStream.write(1133871366148L, memItem.isProc);
            protoOutputStream.write(1120986464259L, memItem.id);
            protoOutputStream.write(1133871366149L, memItem.hasActivities);
            protoOutputStream.write(1112396529670L, memItem.pss);
            protoOutputStream.write(1112396529673L, memItem.mRss);
            if (z3) {
                protoOutputStream.write(1112396529671L, memItem.swapPss);
            }
            ArrayList<MemItem> arrayList2 = memItem.subitems;
            if (arrayList2 != null) {
                dumpMemItems(protoOutputStream, 2246267895816L, memItem.shortLabel, arrayList2, true, z2, z3);
            }
            protoOutputStream.end(start);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static final void appendMemBucket(StringBuilder sb, long j, String str, boolean z) {
        int lastIndexOf = str.lastIndexOf(46);
        int i = 0;
        int i2 = lastIndexOf >= 0 ? lastIndexOf + 1 : 0;
        int length = str.length();
        while (true) {
            long[] jArr = DUMP_MEM_BUCKETS;
            if (i < jArr.length) {
                long j2 = jArr[i];
                if (j2 >= j) {
                    sb.append(j2 / 1024);
                    sb.append(z ? "MB." : "MB ");
                    sb.append((CharSequence) str, i2, length);
                    return;
                }
                i++;
            } else {
                sb.append(j / 1024);
                sb.append(z ? "MB." : "MB ");
                sb.append((CharSequence) str, i2, length);
                return;
            }
        }
    }

    private final void dumpApplicationMemoryUsageHeader(PrintWriter printWriter, long j, long j2, boolean z, boolean z2) {
        if (z2) {
            printWriter.print("version,");
            printWriter.println(1);
        }
        if (z || z2) {
            printWriter.print("time,");
            printWriter.print(j);
            printWriter.print(",");
            printWriter.println(j2);
            return;
        }
        printWriter.println("Applications Memory Usage (in Kilobytes):");
        printWriter.println("Uptime: " + j + " Realtime: " + j2);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static final long[] getKsmInfo() {
        int[] iArr = {8224};
        Process.readProcFile("/sys/kernel/mm/ksm/pages_shared", iArr, null, r3, null);
        long[] jArr = {0};
        Process.readProcFile("/sys/kernel/mm/ksm/pages_sharing", iArr, null, jArr, null);
        jArr[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_unshared", iArr, null, jArr, null);
        jArr[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_volatile", iArr, null, jArr, null);
        return new long[]{(jArr[0] * 4096) / 1024, (jArr[0] * 4096) / 1024, (jArr[0] * 4096) / 1024, (jArr[0] * 4096) / 1024};
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static String stringifySize(long j, int i) {
        Locale locale = Locale.US;
        if (i == 1) {
            return String.format(locale, "%,13d", Long.valueOf(j));
        }
        if (i == 1024) {
            return String.format(locale, "%,9dK", Long.valueOf(j / 1024));
        }
        if (i == 1048576) {
            return String.format(locale, "%,5dM", Long.valueOf((j / 1024) / 1024));
        }
        if (i == 1073741824) {
            return String.format(locale, "%,1dG", Long.valueOf(((j / 1024) / 1024) / 1024));
        }
        throw new IllegalArgumentException("Invalid size order");
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static String stringifyKBSize(long j) {
        return stringifySize(j * 1024, 1024);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static class MemoryUsageDumpOptions {
        boolean dumpDalvik;
        boolean dumpDetails;
        boolean dumpFullDetails;
        boolean dumpProto;
        boolean dumpSummaryOnly;
        boolean dumpSwapPss;
        boolean dumpUnreachable;
        boolean isCheckinRequest;
        boolean isCompact;
        boolean localOnly;
        boolean oomOnly;
        boolean packages;

        private MemoryUsageDumpOptions() {
        }
    }

    @NeverCompile
    final void dumpApplicationMemoryUsage(FileDescriptor fileDescriptor, PrintWriter printWriter, String str, String[] strArr, boolean z, PrintWriter printWriter2, boolean z2) {
        String str2;
        MemoryUsageDumpOptions memoryUsageDumpOptions = new MemoryUsageDumpOptions();
        memoryUsageDumpOptions.dumpDetails = false;
        memoryUsageDumpOptions.dumpFullDetails = false;
        memoryUsageDumpOptions.dumpDalvik = false;
        memoryUsageDumpOptions.dumpSummaryOnly = false;
        memoryUsageDumpOptions.dumpUnreachable = false;
        memoryUsageDumpOptions.oomOnly = false;
        memoryUsageDumpOptions.isCompact = false;
        memoryUsageDumpOptions.localOnly = false;
        memoryUsageDumpOptions.packages = false;
        memoryUsageDumpOptions.isCheckinRequest = false;
        memoryUsageDumpOptions.dumpSwapPss = false;
        memoryUsageDumpOptions.dumpProto = z2;
        int i = 0;
        while (i < strArr.length && (str2 = strArr[i]) != null && str2.length() > 0 && str2.charAt(0) == '-') {
            i++;
            if ("-a".equals(str2)) {
                memoryUsageDumpOptions.dumpDetails = true;
                memoryUsageDumpOptions.dumpFullDetails = true;
                memoryUsageDumpOptions.dumpDalvik = true;
                memoryUsageDumpOptions.dumpSwapPss = true;
            } else if ("-d".equals(str2)) {
                memoryUsageDumpOptions.dumpDalvik = true;
            } else if ("-c".equals(str2)) {
                memoryUsageDumpOptions.isCompact = true;
            } else if ("-s".equals(str2)) {
                memoryUsageDumpOptions.dumpDetails = true;
                memoryUsageDumpOptions.dumpSummaryOnly = true;
            } else if ("-S".equals(str2)) {
                memoryUsageDumpOptions.dumpSwapPss = true;
            } else if ("--unreachable".equals(str2)) {
                memoryUsageDumpOptions.dumpUnreachable = true;
            } else if ("--oom".equals(str2)) {
                memoryUsageDumpOptions.oomOnly = true;
            } else if ("--local".equals(str2)) {
                memoryUsageDumpOptions.localOnly = true;
            } else if ("--package".equals(str2)) {
                memoryUsageDumpOptions.packages = true;
            } else if ("--checkin".equals(str2)) {
                memoryUsageDumpOptions.isCheckinRequest = true;
            } else if ("--proto".equals(str2)) {
                memoryUsageDumpOptions.dumpProto = true;
            } else {
                if ("-h".equals(str2)) {
                    printWriter.println("meminfo dump options: [-a] [-d] [-c] [-s] [--oom] [process]");
                    printWriter.println("  -a: include all available information for each process.");
                    printWriter.println("  -d: include dalvik details.");
                    printWriter.println("  -c: dump in a compact machine-parseable representation.");
                    printWriter.println("  -s: dump only summary of application memory usage.");
                    printWriter.println("  -S: dump also SwapPss.");
                    printWriter.println("  --oom: only show processes organized by oom adj.");
                    printWriter.println("  --local: only collect details locally, don't call process.");
                    printWriter.println("  --package: interpret process arg as package, dumping all");
                    printWriter.println("             processes that have loaded that package.");
                    printWriter.println("  --checkin: dump data for a checkin");
                    printWriter.println("  --proto: dump data to proto");
                    printWriter.println("If [process] is specified it can be the name or ");
                    printWriter.println("pid of a specific process to dump.");
                    return;
                }
                printWriter.println("Unknown argument: " + str2 + "; use -h for help");
            }
        }
        String[] strArr2 = new String[strArr.length - i];
        System.arraycopy(strArr, i, strArr2, 0, strArr.length - i);
        ArrayList<ProcessRecord> collectProcesses = collectProcesses(printWriter, i, memoryUsageDumpOptions.packages, strArr);
        if (memoryUsageDumpOptions.dumpProto) {
            dumpApplicationMemoryUsage(fileDescriptor, memoryUsageDumpOptions, strArr2, z, collectProcesses);
        } else {
            dumpApplicationMemoryUsage(fileDescriptor, printWriter, str, memoryUsageDumpOptions, strArr2, z, collectProcesses, printWriter2);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:39:0x009e, code lost:
    
        if (android.os.Debug.getMemoryInfo(r9, r1) == false) goto L31;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:105:0x02d2  */
    /* JADX WARN: Removed duplicated region for block: B:113:0x0403 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:207:0x03cc  */
    /* JADX WARN: Removed duplicated region for block: B:239:0x06da A[LOOP:7: B:238:0x06d8->B:239:0x06da, LOOP_END] */
    /* JADX WARN: Type inference failed for: r25v1 */
    /* JADX WARN: Type inference failed for: r25v2 */
    /* JADX WARN: Type inference failed for: r25v3 */
    @NeverCompile
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final void dumpApplicationMemoryUsage(FileDescriptor fileDescriptor, PrintWriter printWriter, String str, final MemoryUsageDumpOptions memoryUsageDumpOptions, final String[] strArr, final boolean z, ArrayList<ProcessRecord> arrayList, PrintWriter printWriter2) {
        ?? r25;
        MemoryUsageDumpOptions memoryUsageDumpOptions2;
        char c;
        long[] jArr;
        char c2;
        char c3;
        ArrayList arrayList2;
        PrintWriter printWriter3;
        int i;
        int i2;
        IApplicationThread thread;
        int i3;
        int pid;
        long[] jArr2;
        int setAdjWithServices;
        boolean hasActivities;
        SparseArray sparseArray;
        long[] jArr3;
        long[] jArr4;
        ArrayList arrayList3;
        long[] jArr5;
        long[] jArr6;
        long[] jArr7;
        long[] jArr8;
        int i4;
        SparseArray sparseArray2;
        long[] jArr9;
        long[] jArr10;
        int i5;
        long otherPrivate;
        long j;
        long j2;
        long j3;
        boolean z2;
        int i6;
        long j4;
        long[] jArr11;
        Debug.MemoryInfo memoryInfo;
        int i7;
        char c4;
        ActivityManagerGlobalLock activityManagerGlobalLock;
        Debug.MemoryInfo memoryInfo2;
        TransferPipe transferPipe;
        final int i8;
        Debug.MemoryInfo memoryInfo3;
        int i9;
        long[] jArr12;
        MemoryUsageDumpOptions memoryUsageDumpOptions3;
        ArrayList arrayList4;
        PrintWriter printWriter4 = printWriter;
        MemoryUsageDumpOptions memoryUsageDumpOptions4 = memoryUsageDumpOptions;
        ArrayList<ProcessRecord> arrayList5 = arrayList;
        this.mActivityManagerServiceExt.hookDumpApplicationMemoryUsage();
        long uptimeMillis = SystemClock.uptimeMillis();
        long elapsedRealtime = SystemClock.elapsedRealtime();
        long[] jArr13 = new long[3];
        if (arrayList5 == null) {
            String str2 = "N/A";
            if (strArr.length > 0) {
                str2 = strArr[0];
                if (str2.charAt(0) != '-') {
                    final ArrayList arrayList6 = new ArrayList();
                    updateCpuStatsNow();
                    try {
                        i8 = Integer.parseInt(strArr[0]);
                    } catch (NumberFormatException unused) {
                        i8 = -1;
                    }
                    this.mAppProfiler.forAllCpuStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda1
                        @Override // java.util.function.Consumer
                        public final void accept(Object obj) {
                            ActivityManagerService.lambda$dumpApplicationMemoryUsage$14(i8, strArr, arrayList6, (ProcessCpuTracker.Stats) obj);
                        }
                    });
                    if (arrayList6.size() > 0) {
                        char c5 = 2;
                        dumpApplicationMemoryUsageHeader(printWriter, uptimeMillis, elapsedRealtime, memoryUsageDumpOptions4.isCheckinRequest, memoryUsageDumpOptions4.isCompact);
                        int size = arrayList6.size() - 1;
                        Debug.MemoryInfo memoryInfo4 = null;
                        while (size >= 0) {
                            ProcessCpuTracker.Stats stats = (ProcessCpuTracker.Stats) arrayList6.get(size);
                            int i10 = stats.pid;
                            if (memoryInfo4 == null) {
                                memoryInfo4 = new Debug.MemoryInfo();
                            }
                            if (!memoryUsageDumpOptions4.dumpDetails && (z || memoryUsageDumpOptions4.oomOnly)) {
                                long pss = Debug.getPss(i10, jArr13, null);
                                if (pss != 0) {
                                    memoryInfo4.nativePss = (int) pss;
                                    memoryInfo4.nativePrivateDirty = (int) jArr13[0];
                                    memoryInfo4.nativeRss = (int) jArr13[c5];
                                    if (!memoryUsageDumpOptions4.isCheckinRequest && memoryUsageDumpOptions4.dumpDetails) {
                                        printWriter4.println("\n** MEMINFO in pid " + i10 + " [" + stats.baseName + "] **");
                                    }
                                    arrayList4 = arrayList6;
                                    memoryInfo3 = memoryInfo4;
                                    jArr12 = jArr13;
                                    i9 = size;
                                    ActivityThread.dumpMemInfoTable(printWriter, memoryInfo3, memoryUsageDumpOptions4.isCheckinRequest, memoryUsageDumpOptions4.dumpFullDetails, memoryUsageDumpOptions4.dumpDalvik, memoryUsageDumpOptions4.dumpSummaryOnly, i10, stats.baseName, 0L, 0L, 0L, 0L, 0L, 0L);
                                    memoryUsageDumpOptions3 = memoryUsageDumpOptions;
                                    if (memoryUsageDumpOptions3.isCheckinRequest) {
                                        printWriter.println();
                                    }
                                }
                                memoryInfo3 = memoryInfo4;
                                i9 = size;
                                jArr12 = jArr13;
                                memoryUsageDumpOptions3 = memoryUsageDumpOptions4;
                                arrayList4 = arrayList6;
                            }
                            size = i9 - 1;
                            memoryUsageDumpOptions4 = memoryUsageDumpOptions3;
                            arrayList6 = arrayList4;
                            memoryInfo4 = memoryInfo3;
                            jArr13 = jArr12;
                            c5 = 2;
                            printWriter4 = printWriter;
                        }
                        return;
                    }
                }
            }
            printWriter.println("No process found for: " + str2);
            return;
        }
        long[] jArr14 = jArr13;
        MemoryUsageDumpOptions memoryUsageDumpOptions5 = memoryUsageDumpOptions4;
        PrintWriter printWriter5 = printWriter4;
        if (!z && !memoryUsageDumpOptions5.oomOnly && (arrayList.size() == 1 || memoryUsageDumpOptions5.isCheckinRequest || memoryUsageDumpOptions5.packages)) {
            memoryUsageDumpOptions5.dumpDetails = true;
        }
        int size2 = arrayList.size();
        boolean z3 = (memoryUsageDumpOptions5.isCheckinRequest || size2 <= 1 || memoryUsageDumpOptions5.packages) ? false : true;
        if (z3) {
            updateCpuStatsNow();
        }
        dumpApplicationMemoryUsageHeader(printWriter, uptimeMillis, elapsedRealtime, memoryUsageDumpOptions5.isCheckinRequest, memoryUsageDumpOptions5.isCompact);
        ArrayList arrayList7 = new ArrayList();
        SparseArray sparseArray3 = new SparseArray();
        final long[] jArr15 = new long[15];
        boolean z4 = memoryUsageDumpOptions5.dumpDalvik;
        long[] jArr16 = z4 ? new long[15] : EmptyArray.LONG;
        long[] jArr17 = z4 ? new long[15] : EmptyArray.LONG;
        long[] jArr18 = z4 ? new long[15] : EmptyArray.LONG;
        final long[] jArr19 = new long[17];
        long[] jArr20 = new long[17];
        final long[] jArr21 = new long[17];
        long[] jArr22 = new long[4];
        String[] strArr2 = DUMP_MEM_OOM_LABEL;
        int length = strArr2.length;
        final long[] jArr23 = jArr18;
        final long[] jArr24 = new long[length];
        long[] jArr25 = new long[strArr2.length];
        long[] jArr26 = new long[strArr2.length];
        final ArrayList<MemItem>[] arrayListArr = new ArrayList[strArr2.length];
        long j5 = 0;
        boolean z5 = false;
        int i11 = size2 - 1;
        Debug.MemoryInfo memoryInfo5 = null;
        while (true) {
            int i12 = length;
            if (i11 < 0) {
                final SparseArray sparseArray4 = sparseArray3;
                final long[] jArr27 = jArr22;
                final long[] jArr28 = jArr17;
                final ArrayList arrayList8 = arrayList7;
                final long[] jArr29 = jArr20;
                final long[] jArr30 = jArr25;
                final long[] jArr31 = jArr14;
                final long[] jArr32 = jArr26;
                if (z3) {
                    final Debug.MemoryInfo[] memoryInfoArr = new Debug.MemoryInfo[1];
                    final long[] jArr33 = jArr16;
                    this.mAppProfiler.forAllCpuStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda3
                        @Override // java.util.function.Consumer
                        public final void accept(Object obj) {
                            ActivityManagerService.lambda$dumpApplicationMemoryUsage$16(sparseArray4, memoryInfoArr, z, memoryUsageDumpOptions, jArr31, jArr27, jArr15, arrayList8, jArr33, jArr28, jArr23, jArr19, jArr29, jArr21, jArr24, jArr30, arrayListArr, jArr32, (ProcessCpuTracker.Stats) obj);
                        }
                    });
                    ArrayList arrayList9 = new ArrayList();
                    arrayList9.add(new MemItem("Native", "Native", jArr15[0], jArr15[1], jArr15[2], -1));
                    arrayList9.add(new MemItem("Dalvik", "Dalvik", jArr15[3], jArr15[4], jArr15[5], -2));
                    arrayList9.add(new MemItem("Unknown", "Unknown", jArr15[6], jArr15[7], jArr15[8], -3));
                    for (int i13 = 0; i13 < 17; i13++) {
                        String otherLabel = Debug.MemoryInfo.getOtherLabel(i13);
                        arrayList9.add(new MemItem(otherLabel, otherLabel, jArr19[i13], jArr29[i13], jArr21[i13], i13));
                    }
                    if (jArr16.length > 0) {
                        Iterator it = arrayList9.iterator();
                        while (it.hasNext()) {
                            MemItem memItem = (MemItem) it.next();
                            int i14 = memItem.id;
                            if (i14 == -2) {
                                i = 0;
                                i2 = 3;
                            } else if (i14 == 0) {
                                i = 4;
                                i2 = 9;
                            } else {
                                if (i14 == 10) {
                                    i = 10;
                                    i2 = 12;
                                } else if (i14 == 12) {
                                    i = 13;
                                    i2 = 14;
                                }
                                memItem.subitems = new ArrayList<>();
                                while (i <= i2) {
                                    String otherLabel2 = Debug.MemoryInfo.getOtherLabel(i + 17);
                                    memItem.subitems.add(new MemItem(otherLabel2, otherLabel2, jArr16[i], jArr28[i], jArr23[i], i));
                                    i++;
                                }
                            }
                            memItem.subitems = new ArrayList<>();
                            while (i <= i2) {
                            }
                        }
                    }
                    ArrayList arrayList10 = new ArrayList();
                    for (int i15 = 0; i15 < i12; i15++) {
                        long j6 = jArr24[i15];
                        if (j6 != 0) {
                            String str3 = memoryUsageDumpOptions.isCompact ? DUMP_MEM_OOM_COMPACT_LABEL[i15] : DUMP_MEM_OOM_LABEL[i15];
                            MemItem memItem2 = new MemItem(str3, str3, j6, jArr30[i15], jArr32[i15], DUMP_MEM_OOM_ADJ[i15]);
                            memItem2.subitems = arrayListArr[i15];
                            arrayList10.add(memItem2);
                        }
                    }
                    if (!memoryUsageDumpOptions.isCompact) {
                        printWriter.println();
                    }
                    if (z || memoryUsageDumpOptions.oomOnly || memoryUsageDumpOptions.isCompact) {
                        r25 = 1;
                        memoryUsageDumpOptions2 = memoryUsageDumpOptions;
                        c = 2;
                        jArr = jArr15;
                        c2 = '\n';
                        c3 = 14;
                        arrayList2 = arrayList8;
                        printWriter3 = printWriter;
                    } else {
                        printWriter.println();
                        printWriter.println("Total RSS by process:");
                        c = 2;
                        r25 = 1;
                        c2 = '\n';
                        c3 = 14;
                        printWriter3 = printWriter;
                        jArr = jArr15;
                        arrayList2 = arrayList8;
                        memoryUsageDumpOptions2 = memoryUsageDumpOptions;
                        dumpMemItems(printWriter, "  ", "proc", arrayList8, true, memoryUsageDumpOptions.isCompact, false, false);
                        printWriter.println();
                    }
                    if (!memoryUsageDumpOptions2.isCompact) {
                        printWriter3.println("Total RSS by OOM adjustment:");
                    }
                    dumpMemItems(printWriter, "  ", "oom", arrayList10, false, memoryUsageDumpOptions2.isCompact, false, false);
                    if (!z && !memoryUsageDumpOptions2.oomOnly) {
                        PrintWriter printWriter6 = printWriter2 != null ? printWriter2 : printWriter3;
                        if (!memoryUsageDumpOptions2.isCompact) {
                            printWriter6.println();
                            printWriter6.println("Total RSS by category:");
                        }
                        dumpMemItems(printWriter6, "  ", "cat", arrayList9, true, memoryUsageDumpOptions2.isCompact, false, false);
                    }
                    memoryUsageDumpOptions2.dumpSwapPss = (memoryUsageDumpOptions2.dumpSwapPss && z5 && jArr[c2] != 0) ? r25 : false;
                    if (!z && !memoryUsageDumpOptions2.oomOnly && !memoryUsageDumpOptions2.isCompact) {
                        printWriter.println();
                        printWriter3.println("Total PSS by process:");
                        dumpMemItems(printWriter, "  ", "proc", arrayList2, true, memoryUsageDumpOptions2.isCompact, true, memoryUsageDumpOptions2.dumpSwapPss);
                        printWriter.println();
                    }
                    if (!memoryUsageDumpOptions2.isCompact) {
                        printWriter3.println("Total PSS by OOM adjustment:");
                    }
                    dumpMemItems(printWriter, "  ", "oom", arrayList10, false, memoryUsageDumpOptions2.isCompact, true, memoryUsageDumpOptions2.dumpSwapPss);
                    if (!z && !memoryUsageDumpOptions2.oomOnly) {
                        PrintWriter printWriter7 = printWriter2 != null ? printWriter2 : printWriter3;
                        if (!memoryUsageDumpOptions2.isCompact) {
                            printWriter7.println();
                            printWriter7.println("Total PSS by category:");
                        }
                        dumpMemItems(printWriter7, "  ", "cat", arrayList9, true, memoryUsageDumpOptions2.isCompact, true, memoryUsageDumpOptions2.dumpSwapPss);
                    }
                    if (!memoryUsageDumpOptions2.isCompact) {
                        printWriter.println();
                    }
                    MemInfoReader memInfoReader = new MemInfoReader();
                    memInfoReader.readMemInfo();
                    if (jArr[12] > 0) {
                        synchronized (this.mProcessStats.mLock) {
                            long cachedSizeKb = memInfoReader.getCachedSizeKb();
                            long freeSizeKb = memInfoReader.getFreeSizeKb();
                            long zramTotalSizeKb = memInfoReader.getZramTotalSizeKb();
                            long kernelUsedSizeKb = memInfoReader.getKernelUsedSizeKb();
                            EventLogTags.writeAmMeminfo(cachedSizeKb * 1024, freeSizeKb * 1024, zramTotalSizeKb * 1024, kernelUsedSizeKb * 1024, jArr[12] * 1024);
                            this.mProcessStats.addSysMemUsageLocked(cachedSizeKb, freeSizeKb, zramTotalSizeKb, kernelUsedSizeKb, jArr[12]);
                        }
                    }
                    if (!z) {
                        if (!memoryUsageDumpOptions2.isCompact) {
                            printWriter3.print("Total RAM: ");
                            printWriter3.print(stringifyKBSize(memInfoReader.getTotalSizeKb()));
                            printWriter3.print(" (status ");
                            this.mAppProfiler.dumpLastMemoryLevelLocked(printWriter3);
                            printWriter3.print(" Free RAM: ");
                            printWriter3.print(stringifyKBSize(j5 + memInfoReader.getCachedSizeKb() + memInfoReader.getFreeSizeKb()));
                            printWriter3.print(" (");
                            printWriter3.print(stringifyKBSize(j5));
                            printWriter3.print(" cached pss + ");
                            printWriter3.print(stringifyKBSize(memInfoReader.getCachedSizeKb()));
                            printWriter3.print(" cached kernel + ");
                            printWriter3.print(stringifyKBSize(memInfoReader.getFreeSizeKb()));
                            printWriter3.println(" free)");
                        } else {
                            printWriter3.print("ram,");
                            printWriter3.print(memInfoReader.getTotalSizeKb());
                            printWriter3.print(",");
                            printWriter3.print(j5 + memInfoReader.getCachedSizeKb() + memInfoReader.getFreeSizeKb());
                            printWriter3.print(",");
                            printWriter3.println(jArr[9] - j5);
                        }
                    }
                    long kernelUsedSizeKb2 = memInfoReader.getKernelUsedSizeKb();
                    long ionHeapsSizeKb = Debug.getIonHeapsSizeKb();
                    long ionPoolsSizeKb = Debug.getIonPoolsSizeKb();
                    long dmabufMappedSizeKb = Debug.getDmabufMappedSizeKb();
                    if (ionHeapsSizeKb >= 0 && ionPoolsSizeKb >= 0) {
                        long j7 = ionHeapsSizeKb - dmabufMappedSizeKb;
                        printWriter3.print("      ION: ");
                        printWriter3.print(stringifyKBSize(ionHeapsSizeKb + ionPoolsSizeKb));
                        printWriter3.print(" (");
                        printWriter3.print(stringifyKBSize(dmabufMappedSizeKb));
                        printWriter3.print(" mapped + ");
                        printWriter3.print(stringifyKBSize(j7));
                        printWriter3.print(" unmapped + ");
                        printWriter3.print(stringifyKBSize(ionPoolsSizeKb));
                        printWriter3.println(" pools)");
                        kernelUsedSizeKb2 += j7;
                        long j8 = jArr[9] - jArr[13];
                        jArr[9] = j8;
                        jArr[9] = j8 + dmabufMappedSizeKb;
                    } else {
                        long dmabufTotalExportedKb = Debug.getDmabufTotalExportedKb();
                        if (dmabufTotalExportedKb >= 0) {
                            long j9 = dmabufTotalExportedKb - dmabufMappedSizeKb;
                            printWriter3.print("DMA-BUF: ");
                            printWriter3.print(stringifyKBSize(dmabufTotalExportedKb));
                            printWriter3.print(" (");
                            printWriter3.print(stringifyKBSize(dmabufMappedSizeKb));
                            printWriter3.print(" mapped + ");
                            printWriter3.print(stringifyKBSize(j9));
                            printWriter3.println(" unmapped)");
                            kernelUsedSizeKb2 += j9;
                            long j10 = jArr[9] - jArr[13];
                            jArr[9] = j10;
                            jArr[9] = j10 + dmabufMappedSizeKb;
                        }
                        long dmabufHeapTotalExportedKb = Debug.getDmabufHeapTotalExportedKb();
                        if (dmabufHeapTotalExportedKb >= 0) {
                            printWriter3.print("DMA-BUF Heaps: ");
                            printWriter3.println(stringifyKBSize(dmabufHeapTotalExportedKb));
                        }
                        long dmabufHeapPoolsSizeKb = Debug.getDmabufHeapPoolsSizeKb();
                        if (dmabufHeapPoolsSizeKb >= 0) {
                            printWriter3.print("DMA-BUF Heaps pool: ");
                            printWriter3.println(stringifyKBSize(dmabufHeapPoolsSizeKb));
                        }
                    }
                    long gpuTotalUsageKb = Debug.getGpuTotalUsageKb();
                    if (gpuTotalUsageKb >= 0) {
                        long gpuPrivateMemoryKb = Debug.getGpuPrivateMemoryKb();
                        if (gpuPrivateMemoryKb >= 0) {
                            printWriter3.print("      GPU: ");
                            printWriter3.print(stringifyKBSize(gpuTotalUsageKb));
                            printWriter3.print(" (");
                            printWriter3.print(stringifyKBSize(gpuTotalUsageKb - gpuPrivateMemoryKb));
                            printWriter3.print(" dmabuf + ");
                            printWriter3.print(stringifyKBSize(gpuPrivateMemoryKb));
                            printWriter3.println(" private)");
                            jArr[9] = jArr[9] - jArr[c3];
                            kernelUsedSizeKb2 += gpuPrivateMemoryKb;
                        } else {
                            printWriter3.print("      GPU: ");
                            printWriter3.println(stringifyKBSize(gpuTotalUsageKb));
                        }
                    }
                    long totalSizeKb = ((((memInfoReader.getTotalSizeKb() - (jArr[9] - jArr[c2])) - memInfoReader.getFreeSizeKb()) - memInfoReader.getCachedSizeKb()) - kernelUsedSizeKb2) - memInfoReader.getZramTotalSizeKb();
                    if (!memoryUsageDumpOptions2.isCompact) {
                        printWriter3.print(" Used RAM: ");
                        printWriter3.print(stringifyKBSize((jArr[9] - j5) + kernelUsedSizeKb2));
                        printWriter3.print(" (");
                        printWriter3.print(stringifyKBSize(jArr[9] - j5));
                        printWriter3.print(" used pss + ");
                        printWriter3.print(stringifyKBSize(kernelUsedSizeKb2));
                        printWriter3.print(" kernel)\n");
                        printWriter3.print(" Lost RAM: ");
                        printWriter3.println(stringifyKBSize(totalSizeKb));
                    } else {
                        printWriter3.print("lostram,");
                        printWriter3.println(totalSizeKb);
                    }
                    if (z) {
                        return;
                    }
                    if (memInfoReader.getZramTotalSizeKb() != 0) {
                        if (!memoryUsageDumpOptions2.isCompact) {
                            printWriter3.print("     ZRAM: ");
                            printWriter3.print(stringifyKBSize(memInfoReader.getZramTotalSizeKb()));
                            printWriter3.print(" physical used for ");
                            printWriter3.print(stringifyKBSize(memInfoReader.getSwapTotalSizeKb() - memInfoReader.getSwapFreeSizeKb()));
                            printWriter3.print(" in swap (");
                            printWriter3.print(stringifyKBSize(memInfoReader.getSwapTotalSizeKb()));
                            printWriter3.println(" total swap)");
                        } else {
                            printWriter3.print("zram,");
                            printWriter3.print(memInfoReader.getZramTotalSizeKb());
                            printWriter3.print(",");
                            printWriter3.print(memInfoReader.getSwapTotalSizeKb());
                            printWriter3.print(",");
                            printWriter3.println(memInfoReader.getSwapFreeSizeKb());
                        }
                    }
                    long[] ksmInfo = getKsmInfo();
                    if (!memoryUsageDumpOptions2.isCompact) {
                        if (ksmInfo[r25] != 0 || ksmInfo[0] != 0 || ksmInfo[c] != 0 || ksmInfo[3] != 0) {
                            printWriter3.print("      KSM: ");
                            printWriter3.print(stringifyKBSize(ksmInfo[r25]));
                            printWriter3.print(" saved from shared ");
                            printWriter3.print(stringifyKBSize(ksmInfo[0]));
                            printWriter3.print("           ");
                            printWriter3.print(stringifyKBSize(ksmInfo[c]));
                            printWriter3.print(" unshared; ");
                            printWriter3.print(stringifyKBSize(ksmInfo[3]));
                            printWriter3.println(" volatile");
                        }
                        printWriter3.print("   Tuning: ");
                        printWriter3.print(ActivityManager.staticGetMemoryClass());
                        printWriter3.print(" (large ");
                        printWriter3.print(ActivityManager.staticGetLargeMemoryClass());
                        printWriter3.print("), oom ");
                        printWriter3.print(stringifySize(this.mProcessList.getMemLevel(999), 1024));
                        printWriter3.print(", restore limit ");
                        printWriter3.print(stringifyKBSize(this.mProcessList.getCachedRestoreThresholdKb()));
                        if (ActivityManager.isLowRamDeviceStatic()) {
                            printWriter3.print(" (low-ram)");
                        }
                        if (ActivityManager.isHighEndGfx()) {
                            printWriter3.print(" (high-end-gfx)");
                        }
                        printWriter.println();
                        return;
                    }
                    printWriter3.print("ksm,");
                    printWriter3.print(ksmInfo[r25]);
                    printWriter3.print(",");
                    printWriter3.print(ksmInfo[0]);
                    printWriter3.print(",");
                    printWriter3.print(ksmInfo[c]);
                    printWriter3.print(",");
                    printWriter3.println(ksmInfo[3]);
                    printWriter3.print("tuning,");
                    printWriter3.print(ActivityManager.staticGetMemoryClass());
                    printWriter3.print(',');
                    printWriter3.print(ActivityManager.staticGetLargeMemoryClass());
                    printWriter3.print(',');
                    printWriter3.print(this.mProcessList.getMemLevel(999) / 1024);
                    if (ActivityManager.isLowRamDeviceStatic()) {
                        printWriter3.print(",low-ram");
                    }
                    if (ActivityManager.isHighEndGfx()) {
                        printWriter3.print(",high-end-gfx");
                    }
                    printWriter.println();
                    return;
                }
                return;
            }
            final ProcessRecord processRecord = arrayList5.get(i11);
            ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock2) {
                try {
                    thread = processRecord.getThread();
                    i3 = i11;
                    pid = processRecord.getPid();
                    jArr2 = jArr26;
                    setAdjWithServices = processRecord.mState.getSetAdjWithServices();
                    hasActivities = processRecord.hasActivities();
                } finally {
                }
            }
            resetPriorityAfterProcLockedSection();
            if (thread != null) {
                if (memoryInfo5 == null) {
                    memoryInfo5 = new Debug.MemoryInfo();
                }
                Debug.MemoryInfo memoryInfo6 = memoryInfo5;
                if (memoryUsageDumpOptions5.dumpDetails || (!z && !memoryUsageDumpOptions5.oomOnly)) {
                    sparseArray2 = sparseArray3;
                    jArr4 = jArr17;
                    jArr9 = jArr20;
                    jArr10 = jArr14;
                    i5 = setAdjWithServices;
                    long currentThreadTimeMillis = SystemClock.currentThreadTimeMillis();
                    if (Debug.getMemoryInfo(pid, memoryInfo6)) {
                        long currentThreadTimeMillis2 = SystemClock.currentThreadTimeMillis();
                        boolean z6 = memoryInfo6.hasSwappedOutPss;
                        long otherPrivate2 = memoryInfo6.getOtherPrivate(14);
                        jArr3 = jArr22;
                        otherPrivate = memoryInfo6.getOtherPrivate(15);
                        j = otherPrivate2;
                        j2 = currentThreadTimeMillis;
                        j3 = currentThreadTimeMillis2;
                        z2 = z6;
                        i6 = 4;
                        if (!memoryUsageDumpOptions5.isCheckinRequest && memoryUsageDumpOptions5.dumpDetails) {
                            printWriter5.println("\n** MEMINFO in pid " + pid + " [" + processRecord.processName + "] **");
                        }
                        if (memoryUsageDumpOptions5.dumpDetails) {
                            j4 = j;
                            jArr11 = jArr16;
                            jArr7 = jArr10;
                            arrayList3 = arrayList7;
                            memoryInfo = memoryInfo6;
                            jArr6 = jArr25;
                            jArr5 = jArr9;
                            i7 = i5;
                            jArr8 = jArr2;
                            c4 = 3;
                        } else if (memoryUsageDumpOptions5.localOnly) {
                            jArr5 = jArr9;
                            jArr7 = jArr10;
                            jArr6 = jArr25;
                            c4 = 3;
                            jArr11 = jArr16;
                            memoryInfo = memoryInfo6;
                            j4 = j;
                            arrayList3 = arrayList7;
                            i7 = i5;
                            jArr8 = jArr2;
                            ActivityThread.dumpMemInfoTable(printWriter, memoryInfo, memoryUsageDumpOptions5.isCheckinRequest, memoryUsageDumpOptions5.dumpFullDetails, memoryUsageDumpOptions5.dumpDalvik, memoryUsageDumpOptions5.dumpSummaryOnly, pid, processRecord.processName, 0L, 0L, 0L, 0L, 0L, 0L);
                            if (memoryUsageDumpOptions5.isCheckinRequest) {
                                printWriter.println();
                            }
                        } else {
                            j4 = j;
                            jArr11 = jArr16;
                            jArr7 = jArr10;
                            arrayList3 = arrayList7;
                            memoryInfo = memoryInfo6;
                            PrintWriter printWriter8 = printWriter5;
                            jArr6 = jArr25;
                            MemoryUsageDumpOptions memoryUsageDumpOptions6 = memoryUsageDumpOptions5;
                            jArr5 = jArr9;
                            i7 = i5;
                            jArr8 = jArr2;
                            c4 = 3;
                            printWriter.flush();
                            try {
                                TransferPipe transferPipe2 = new TransferPipe();
                                try {
                                    try {
                                        thread.dumpMemInfo(transferPipe2.getWriteFd(), memoryInfo, memoryUsageDumpOptions6.isCheckinRequest, memoryUsageDumpOptions6.dumpFullDetails, memoryUsageDumpOptions6.dumpDalvik, memoryUsageDumpOptions6.dumpSummaryOnly, memoryUsageDumpOptions6.dumpUnreachable, strArr);
                                        this.mActivityManagerServiceExt.updateDumpUid(processRecord.uid, true, 2);
                                        transferPipe = transferPipe2;
                                    } catch (Throwable th) {
                                        th = th;
                                        transferPipe = transferPipe2;
                                    }
                                    try {
                                        transferPipe.go(fileDescriptor, memoryUsageDumpOptions6.dumpUnreachable ? 30000L : 5000L);
                                        try {
                                            transferPipe.kill();
                                        } catch (RemoteException e) {
                                            e = e;
                                            if (!memoryUsageDumpOptions6.isCheckinRequest) {
                                                printWriter8.println("Got RemoteException! " + e);
                                                printWriter.flush();
                                            }
                                            final long totalPss = memoryInfo.getTotalPss();
                                            final long totalUss = memoryInfo.getTotalUss();
                                            final long totalRss = memoryInfo.getTotalRss();
                                            long totalSwappedOutPss = memoryInfo.getTotalSwappedOutPss();
                                            activityManagerGlobalLock = this.mProcLock;
                                            boostPriorityForProcLockedSection();
                                            synchronized (activityManagerGlobalLock) {
                                            }
                                        } catch (IOException e2) {
                                            e = e2;
                                            if (!memoryUsageDumpOptions6.isCheckinRequest) {
                                                printWriter8.println("Got IoException! " + e);
                                                printWriter.flush();
                                            }
                                            final long totalPss2 = memoryInfo.getTotalPss();
                                            final long totalUss2 = memoryInfo.getTotalUss();
                                            final long totalRss2 = memoryInfo.getTotalRss();
                                            long totalSwappedOutPss2 = memoryInfo.getTotalSwappedOutPss();
                                            activityManagerGlobalLock = this.mProcLock;
                                            boostPriorityForProcLockedSection();
                                            synchronized (activityManagerGlobalLock) {
                                            }
                                        }
                                    } catch (Throwable th2) {
                                        th = th2;
                                        transferPipe.kill();
                                        throw th;
                                        break;
                                    }
                                } catch (Throwable th3) {
                                    th = th3;
                                    transferPipe = transferPipe2;
                                }
                            } catch (RemoteException e3) {
                                e = e3;
                            } catch (IOException e4) {
                                e = e4;
                            }
                        }
                        final long totalPss22 = memoryInfo.getTotalPss();
                        final long totalUss22 = memoryInfo.getTotalUss();
                        final long totalRss22 = memoryInfo.getTotalRss();
                        long totalSwappedOutPss22 = memoryInfo.getTotalSwappedOutPss();
                        activityManagerGlobalLock = this.mProcLock;
                        boostPriorityForProcLockedSection();
                        synchronized (activityManagerGlobalLock) {
                            try {
                                if (processRecord.getThread() != null && i7 == processRecord.mState.getSetAdjWithServices()) {
                                    processRecord.mProfile.addPss(totalPss22, totalUss22, totalRss22, true, i6, j3 - j2);
                                    final int i16 = i6;
                                    final long j11 = j3;
                                    final long j12 = j2;
                                    processRecord.getPkgList().forEachPackageProcessStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda2
                                        @Override // java.util.function.Consumer
                                        public final void accept(Object obj) {
                                            ActivityManagerService.lambda$dumpApplicationMemoryUsage$15(ProcessRecord.this, totalPss22, totalUss22, totalRss22, i16, j11, j12, (ProcessStats.ProcessStateHolder) obj);
                                        }
                                    });
                                }
                            } finally {
                            }
                        }
                        resetPriorityAfterProcLockedSection();
                        if (memoryUsageDumpOptions.isCheckinRequest) {
                            sparseArray = sparseArray2;
                            i4 = i12;
                            jArr16 = jArr11;
                            memoryInfo2 = memoryInfo;
                        } else {
                            jArr15[9] = jArr15[9] + totalPss22;
                            jArr15[10] = jArr15[10] + totalSwappedOutPss22;
                            jArr15[11] = jArr15[11] + totalRss22;
                            jArr15[13] = jArr15[13] + j4;
                            jArr15[14] = jArr15[14] + otherPrivate;
                            StringBuilder sb = new StringBuilder();
                            sb.append(processRecord.processName);
                            sb.append(" (pid ");
                            sb.append(pid);
                            sb.append(hasActivities ? " / activities)" : ")");
                            MemItem memItem3 = new MemItem(sb.toString(), processRecord.processName, totalPss22, totalSwappedOutPss22, totalRss22, pid, processRecord.userId, hasActivities);
                            arrayList3.add(memItem3);
                            sparseArray = sparseArray2;
                            sparseArray.put(pid, memItem3);
                            memoryInfo2 = memoryInfo;
                            jArr15[0] = jArr15[0] + memoryInfo2.nativePss;
                            jArr15[1] = jArr15[1] + memoryInfo2.nativeSwappedOutPss;
                            jArr15[2] = jArr15[2] + memoryInfo2.nativeRss;
                            jArr15[c4] = jArr15[c4] + memoryInfo2.dalvikPss;
                            jArr15[4] = jArr15[4] + memoryInfo2.dalvikSwappedOutPss;
                            jArr15[5] = jArr15[5] + memoryInfo2.dalvikRss;
                            jArr16 = jArr11;
                            for (int i17 = 0; i17 < jArr16.length; i17++) {
                                int i18 = i17 + 17;
                                jArr16[i17] = jArr16[i17] + memoryInfo2.getOtherPss(i18);
                                jArr4[i17] = jArr4[i17] + memoryInfo2.getOtherSwappedOutPss(i18);
                                jArr23[i17] = jArr23[i17] + memoryInfo2.getOtherRss(i18);
                            }
                            jArr15[6] = jArr15[6] + memoryInfo2.otherPss;
                            jArr15[8] = jArr15[8] + memoryInfo2.otherRss;
                            jArr15[7] = jArr15[7] + memoryInfo2.otherSwappedOutPss;
                            for (int i19 = 0; i19 < 17; i19++) {
                                long otherPss = memoryInfo2.getOtherPss(i19);
                                jArr19[i19] = jArr19[i19] + otherPss;
                                jArr15[6] = jArr15[6] - otherPss;
                                long otherSwappedOutPss = memoryInfo2.getOtherSwappedOutPss(i19);
                                jArr5[i19] = jArr5[i19] + otherSwappedOutPss;
                                jArr15[7] = jArr15[7] - otherSwappedOutPss;
                                long otherRss = memoryInfo2.getOtherRss(i19);
                                jArr21[i19] = jArr21[i19] + otherRss;
                                jArr15[8] = jArr15[8] - otherRss;
                            }
                            if (i7 >= 900) {
                                j5 += totalPss22;
                            }
                            i4 = i12;
                            for (int i20 = 0; i20 < i4; i20++) {
                                if (i20 != i4 - 1) {
                                    int[] iArr = DUMP_MEM_OOM_ADJ;
                                    if (i7 < iArr[i20] || i7 >= iArr[i20 + 1]) {
                                    }
                                }
                                jArr24[i20] = jArr24[i20] + totalPss22;
                                jArr6[i20] = jArr6[i20] + totalSwappedOutPss22;
                                if (arrayListArr[i20] == null) {
                                    arrayListArr[i20] = new ArrayList<>();
                                }
                                arrayListArr[i20].add(memItem3);
                                jArr8[i20] = jArr8[i20] + totalRss22;
                            }
                        }
                        memoryInfo5 = memoryInfo2;
                        z5 = z2;
                        i11 = i3 - 1;
                        printWriter5 = printWriter;
                        arrayList5 = arrayList;
                        length = i4;
                        sparseArray3 = sparseArray;
                        jArr26 = jArr8;
                        jArr17 = jArr4;
                        jArr20 = jArr5;
                        jArr14 = jArr7;
                        jArr25 = jArr6;
                        arrayList7 = arrayList3;
                        jArr22 = jArr3;
                        memoryUsageDumpOptions5 = memoryUsageDumpOptions;
                    }
                    jArr3 = jArr22;
                    jArr7 = jArr10;
                    arrayList3 = arrayList7;
                    memoryInfo5 = memoryInfo6;
                    jArr6 = jArr25;
                    jArr5 = jArr9;
                    sparseArray = sparseArray2;
                } else {
                    long currentThreadTimeMillis3 = SystemClock.currentThreadTimeMillis();
                    jArr4 = jArr17;
                    jArr9 = jArr20;
                    jArr10 = jArr14;
                    i5 = setAdjWithServices;
                    long pss2 = Debug.getPss(pid, jArr10, jArr22);
                    if (pss2 == 0) {
                        sparseArray2 = sparseArray3;
                        jArr3 = jArr22;
                        jArr7 = jArr10;
                        arrayList3 = arrayList7;
                        memoryInfo5 = memoryInfo6;
                        jArr6 = jArr25;
                        jArr5 = jArr9;
                        sparseArray = sparseArray2;
                    } else {
                        memoryInfo6.dalvikPss = (int) pss2;
                        long currentThreadTimeMillis4 = SystemClock.currentThreadTimeMillis();
                        memoryInfo6.dalvikPrivateDirty = (int) jArr10[0];
                        sparseArray2 = sparseArray3;
                        memoryInfo6.dalvikRss = (int) jArr10[2];
                        jArr3 = jArr22;
                        j2 = currentThreadTimeMillis3;
                        j3 = currentThreadTimeMillis4;
                        j = jArr22[1];
                        otherPrivate = jArr22[2];
                        z2 = z5;
                        i6 = 3;
                        if (!memoryUsageDumpOptions5.isCheckinRequest) {
                            printWriter5.println("\n** MEMINFO in pid " + pid + " [" + processRecord.processName + "] **");
                        }
                        if (memoryUsageDumpOptions5.dumpDetails) {
                        }
                        final long totalPss222 = memoryInfo.getTotalPss();
                        final long totalUss222 = memoryInfo.getTotalUss();
                        final long totalRss222 = memoryInfo.getTotalRss();
                        long totalSwappedOutPss222 = memoryInfo.getTotalSwappedOutPss();
                        activityManagerGlobalLock = this.mProcLock;
                        boostPriorityForProcLockedSection();
                        synchronized (activityManagerGlobalLock) {
                        }
                    }
                }
            } else {
                sparseArray = sparseArray3;
                jArr3 = jArr22;
                jArr4 = jArr17;
                arrayList3 = arrayList7;
                jArr5 = jArr20;
                jArr6 = jArr25;
                jArr7 = jArr14;
            }
            i4 = i12;
            jArr8 = jArr2;
            i11 = i3 - 1;
            printWriter5 = printWriter;
            arrayList5 = arrayList;
            length = i4;
            sparseArray3 = sparseArray;
            jArr26 = jArr8;
            jArr17 = jArr4;
            jArr20 = jArr5;
            jArr14 = jArr7;
            jArr25 = jArr6;
            arrayList7 = arrayList3;
            jArr22 = jArr3;
            memoryUsageDumpOptions5 = memoryUsageDumpOptions;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$dumpApplicationMemoryUsage$14(int i, String[] strArr, ArrayList arrayList, ProcessCpuTracker.Stats stats) {
        String str;
        if (stats.pid == i || ((str = stats.baseName) != null && str.equals(strArr[0]))) {
            arrayList.add(stats);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$dumpApplicationMemoryUsage$15(ProcessRecord processRecord, long j, long j2, long j3, int i, long j4, long j5, ProcessStats.ProcessStateHolder processStateHolder) {
        FrameworkStatsLog.write(18, processRecord.info.uid, processStateHolder.state.getName(), processStateHolder.state.getPackage(), j, j2, j3, i, j4 - j5, processStateHolder.appVersion, processRecord.mProfile.getCurrentHostingComponentTypes(), processRecord.mProfile.getHistoricalHostingComponentTypes());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$dumpApplicationMemoryUsage$16(SparseArray sparseArray, Debug.MemoryInfo[] memoryInfoArr, boolean z, MemoryUsageDumpOptions memoryUsageDumpOptions, long[] jArr, long[] jArr2, long[] jArr3, ArrayList arrayList, long[] jArr4, long[] jArr5, long[] jArr6, long[] jArr7, long[] jArr8, long[] jArr9, long[] jArr10, long[] jArr11, ArrayList[] arrayListArr, long[] jArr12, ProcessCpuTracker.Stats stats) {
        long j;
        long j2;
        if (stats.vsize <= 0 || sparseArray.indexOfKey(stats.pid) >= 0) {
            return;
        }
        if (memoryInfoArr[0] == null) {
            memoryInfoArr[0] = new Debug.MemoryInfo();
        }
        Debug.MemoryInfo memoryInfo = memoryInfoArr[0];
        if (!z && !memoryUsageDumpOptions.oomOnly) {
            if (!Debug.getMemoryInfo(stats.pid, memoryInfo)) {
                return;
            }
            j = memoryInfo.getOtherPrivate(14);
            j2 = memoryInfo.getOtherPrivate(15);
        } else {
            long pss = Debug.getPss(stats.pid, jArr, jArr2);
            if (pss == 0) {
                return;
            }
            memoryInfo.nativePss = (int) pss;
            memoryInfo.nativePrivateDirty = (int) jArr[0];
            memoryInfo.nativeRss = (int) jArr[2];
            j = jArr2[1];
            j2 = jArr2[2];
        }
        long totalPss = memoryInfo.getTotalPss();
        long totalSwappedOutPss = memoryInfo.getTotalSwappedOutPss();
        long totalRss = memoryInfo.getTotalRss();
        jArr3[9] = jArr3[9] + totalPss;
        jArr3[10] = jArr3[10] + totalSwappedOutPss;
        jArr3[11] = jArr3[11] + totalRss;
        jArr3[12] = jArr3[12] + totalPss;
        jArr3[13] = jArr3[13] + j;
        jArr3[14] = jArr3[14] + j2;
        MemItem memItem = new MemItem(stats.name + " (pid " + stats.pid + ")", stats.name, totalPss, memoryInfo.getSummaryTotalSwapPss(), totalRss, stats.pid, UserHandle.getUserId(stats.uid), false);
        arrayList.add(memItem);
        jArr3[0] = jArr3[0] + ((long) memoryInfo.nativePss);
        jArr3[1] = jArr3[1] + ((long) memoryInfo.nativeSwappedOutPss);
        jArr3[2] = jArr3[2] + ((long) memoryInfo.nativeRss);
        jArr3[3] = jArr3[3] + ((long) memoryInfo.dalvikPss);
        jArr3[4] = jArr3[4] + memoryInfo.dalvikSwappedOutPss;
        jArr3[5] = jArr3[5] + memoryInfo.dalvikRss;
        for (int i = 0; i < jArr4.length; i++) {
            int i2 = i + 17;
            jArr4[i] = jArr4[i] + memoryInfo.getOtherPss(i2);
            jArr5[i] = jArr5[i] + memoryInfo.getOtherSwappedOutPss(i2);
            jArr6[i] = jArr6[i] + memoryInfo.getOtherRss(i2);
        }
        jArr3[6] = jArr3[6] + memoryInfo.otherPss;
        jArr3[7] = jArr3[7] + memoryInfo.otherSwappedOutPss;
        jArr3[8] = jArr3[8] + memoryInfo.otherRss;
        for (int i3 = 0; i3 < 17; i3++) {
            long otherPss = memoryInfo.getOtherPss(i3);
            jArr7[i3] = jArr7[i3] + otherPss;
            jArr3[6] = jArr3[6] - otherPss;
            long otherSwappedOutPss = memoryInfo.getOtherSwappedOutPss(i3);
            jArr8[i3] = jArr8[i3] + otherSwappedOutPss;
            jArr3[7] = jArr3[7] - otherSwappedOutPss;
            long otherRss = memoryInfo.getOtherRss(i3);
            jArr9[i3] = jArr9[i3] + otherRss;
            jArr3[8] = jArr3[8] - otherRss;
        }
        jArr10[0] = jArr10[0] + totalPss;
        jArr11[0] = jArr11[0] + totalSwappedOutPss;
        if (arrayListArr[0] == null) {
            arrayListArr[0] = new ArrayList();
        }
        arrayListArr[0].add(memItem);
        jArr12[0] = jArr12[0] + totalRss;
    }

    /* JADX WARN: Removed duplicated region for block: B:176:0x0386  */
    /* JADX WARN: Removed duplicated region for block: B:207:0x06a2 A[LOOP:7: B:206:0x06a0->B:207:0x06a2, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:91:0x0250  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x03c3 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    @NeverCompile
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final void dumpApplicationMemoryUsage(FileDescriptor fileDescriptor, final MemoryUsageDumpOptions memoryUsageDumpOptions, final String[] strArr, final boolean z, ArrayList<ProcessRecord> arrayList) {
        int i;
        ProtoOutputStream protoOutputStream;
        ActivityManagerService activityManagerService;
        long j;
        int i2;
        int i3;
        IApplicationThread thread;
        int pid;
        long[] jArr;
        int setAdjWithServices;
        boolean hasActivities;
        int i4;
        long[] jArr2;
        boolean z2;
        long j2;
        long j3;
        int i5;
        long[] jArr3;
        SparseArray sparseArray;
        ArrayList arrayList2;
        int i6;
        long[] jArr4;
        long[] jArr5;
        long[] jArr6;
        long[] jArr7;
        int i7;
        long[] jArr8;
        ProtoOutputStream protoOutputStream2;
        ProtoOutputStream protoOutputStream3;
        ActivityManagerGlobalLock activityManagerGlobalLock;
        int i8;
        long[] jArr9;
        final int i9;
        ActivityManagerService activityManagerService2 = this;
        MemoryUsageDumpOptions memoryUsageDumpOptions2 = memoryUsageDumpOptions;
        ArrayList<ProcessRecord> arrayList3 = arrayList;
        long uptimeMillis = SystemClock.uptimeMillis();
        long elapsedRealtime = SystemClock.elapsedRealtime();
        long[] jArr10 = new long[3];
        if (arrayList3 == null) {
            if (strArr.length > 0 && strArr[0].charAt(0) != '-') {
                final ArrayList arrayList4 = new ArrayList();
                updateCpuStatsNow();
                try {
                    i9 = Integer.parseInt(strArr[0]);
                } catch (NumberFormatException unused) {
                    i9 = -1;
                }
                activityManagerService2.mAppProfiler.forAllCpuStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda27
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.lambda$dumpApplicationMemoryUsage$17(i9, strArr, arrayList4, (ProcessCpuTracker.Stats) obj);
                    }
                });
                if (arrayList4.size() > 0) {
                    ProtoOutputStream protoOutputStream4 = new ProtoOutputStream(fileDescriptor);
                    protoOutputStream4.write(1112396529665L, uptimeMillis);
                    protoOutputStream4.write(1112396529666L, elapsedRealtime);
                    Debug.MemoryInfo memoryInfo = null;
                    for (int size = arrayList4.size() - 1; size >= 0; size--) {
                        ProcessCpuTracker.Stats stats = (ProcessCpuTracker.Stats) arrayList4.get(size);
                        int i10 = stats.pid;
                        if (memoryInfo == null) {
                            memoryInfo = new Debug.MemoryInfo();
                        }
                        if (memoryUsageDumpOptions2.dumpDetails || (!z && !memoryUsageDumpOptions2.oomOnly)) {
                            if (!Debug.getMemoryInfo(i10, memoryInfo)) {
                            }
                            long start = protoOutputStream4.start(2246267895811L);
                            protoOutputStream4.write(1120986464257L, i10);
                            protoOutputStream4.write(1138166333442L, stats.baseName);
                            ActivityThread.dumpMemInfoTable(protoOutputStream4, memoryInfo, memoryUsageDumpOptions2.dumpDalvik, memoryUsageDumpOptions2.dumpSummaryOnly, 0L, 0L, 0L, 0L, 0L, 0L);
                            protoOutputStream4.end(start);
                        } else {
                            long pss = Debug.getPss(i10, jArr10, null);
                            if (pss != 0) {
                                memoryInfo.nativePss = (int) pss;
                                memoryInfo.nativePrivateDirty = (int) jArr10[0];
                                memoryInfo.nativeRss = (int) jArr10[2];
                                long start2 = protoOutputStream4.start(2246267895811L);
                                protoOutputStream4.write(1120986464257L, i10);
                                protoOutputStream4.write(1138166333442L, stats.baseName);
                                ActivityThread.dumpMemInfoTable(protoOutputStream4, memoryInfo, memoryUsageDumpOptions2.dumpDalvik, memoryUsageDumpOptions2.dumpSummaryOnly, 0L, 0L, 0L, 0L, 0L, 0L);
                                protoOutputStream4.end(start2);
                            }
                        }
                    }
                    protoOutputStream4.flush();
                    return;
                }
            }
            Log.d("ActivityManager", "No process found for: " + strArr[0]);
            return;
        }
        if (z || memoryUsageDumpOptions2.oomOnly) {
            i = 1;
        } else {
            i = 1;
            if (arrayList.size() == 1 || memoryUsageDumpOptions2.isCheckinRequest || memoryUsageDumpOptions2.packages) {
                memoryUsageDumpOptions2.dumpDetails = true;
            }
        }
        int size2 = arrayList.size();
        boolean z3 = size2 > i && !memoryUsageDumpOptions2.packages;
        if (z3) {
            updateCpuStatsNow();
        }
        ProtoOutputStream protoOutputStream5 = new ProtoOutputStream(fileDescriptor);
        protoOutputStream5.write(1112396529665L, uptimeMillis);
        protoOutputStream5.write(1112396529666L, elapsedRealtime);
        ArrayList arrayList5 = new ArrayList();
        SparseArray sparseArray2 = new SparseArray();
        long[] jArr11 = new long[15];
        boolean z4 = memoryUsageDumpOptions2.dumpDalvik;
        long[] jArr12 = z4 ? new long[15] : EmptyArray.LONG;
        final long[] jArr13 = z4 ? new long[15] : EmptyArray.LONG;
        final long[] jArr14 = z4 ? new long[15] : EmptyArray.LONG;
        long[] jArr15 = new long[17];
        final long[] jArr16 = new long[17];
        String[] strArr2 = DUMP_MEM_OOM_LABEL;
        boolean z5 = z3;
        int length = strArr2.length;
        final long[] jArr17 = new long[length];
        long[] jArr18 = new long[strArr2.length];
        long[] jArr19 = new long[17];
        long[] jArr20 = new long[strArr2.length];
        final ArrayList<MemItem>[] arrayListArr = new ArrayList[strArr2.length];
        int i11 = size2 - 1;
        long j4 = 0;
        boolean z6 = false;
        Debug.MemoryInfo memoryInfo2 = null;
        while (true) {
            int i12 = length;
            if (i11 >= 0) {
                final ProcessRecord processRecord = arrayList3.get(i11);
                long[] jArr21 = jArr20;
                ActivityManagerGlobalLock activityManagerGlobalLock2 = activityManagerService2.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock2) {
                    try {
                        thread = processRecord.getThread();
                        pid = processRecord.getPid();
                        jArr = jArr15;
                        setAdjWithServices = processRecord.mState.getSetAdjWithServices();
                        hasActivities = processRecord.hasActivities();
                    } finally {
                    }
                }
                resetPriorityAfterProcLockedSection();
                if (thread == null) {
                    jArr2 = jArr18;
                } else {
                    if (memoryInfo2 == null) {
                        memoryInfo2 = new Debug.MemoryInfo();
                    }
                    if (memoryUsageDumpOptions2.dumpDetails || (!z && !memoryUsageDumpOptions2.oomOnly)) {
                        i4 = setAdjWithServices;
                        jArr2 = jArr18;
                        long currentThreadTimeMillis = SystemClock.currentThreadTimeMillis();
                        if (Debug.getMemoryInfo(pid, memoryInfo2)) {
                            long currentThreadTimeMillis2 = SystemClock.currentThreadTimeMillis();
                            z2 = memoryInfo2.hasSwappedOutPss;
                            j2 = currentThreadTimeMillis;
                            j3 = currentThreadTimeMillis2;
                            i5 = 4;
                            if (memoryUsageDumpOptions2.dumpDetails) {
                                jArr3 = jArr12;
                                sparseArray = sparseArray2;
                                arrayList2 = arrayList5;
                                i6 = i11;
                                jArr4 = jArr10;
                                jArr5 = jArr19;
                                jArr6 = jArr21;
                                jArr7 = jArr;
                                i7 = i4;
                                jArr8 = jArr11;
                                protoOutputStream2 = protoOutputStream5;
                            } else if (memoryUsageDumpOptions2.localOnly) {
                                long start3 = protoOutputStream5.start(2246267895812L);
                                jArr3 = jArr12;
                                long start4 = protoOutputStream5.start(1146756268033L);
                                sparseArray = sparseArray2;
                                protoOutputStream5.write(1120986464257L, pid);
                                i6 = i11;
                                protoOutputStream5.write(1138166333442L, processRecord.processName);
                                ActivityThread.dumpMemInfoTable(protoOutputStream5, memoryInfo2, memoryUsageDumpOptions2.dumpDalvik, memoryUsageDumpOptions2.dumpSummaryOnly, 0L, 0L, 0L, 0L, 0L, 0L);
                                protoOutputStream5.end(start4);
                                protoOutputStream5.end(start3);
                                jArr4 = jArr10;
                                arrayList2 = arrayList5;
                                jArr5 = jArr19;
                                jArr6 = jArr21;
                                jArr7 = jArr;
                                jArr8 = jArr11;
                                protoOutputStream2 = protoOutputStream5;
                                i7 = i4;
                            } else {
                                jArr3 = jArr12;
                                long[] jArr22 = jArr11;
                                sparseArray = sparseArray2;
                                ArrayList arrayList6 = arrayList5;
                                i6 = i11;
                                try {
                                    ByteTransferPipe byteTransferPipe = new ByteTransferPipe();
                                    try {
                                        jArr5 = jArr19;
                                        jArr6 = jArr21;
                                        jArr7 = jArr;
                                        i7 = i4;
                                        jArr4 = jArr10;
                                        jArr8 = jArr22;
                                        protoOutputStream2 = protoOutputStream5;
                                        arrayList2 = arrayList6;
                                    } catch (Throwable th) {
                                        th = th;
                                        jArr4 = jArr10;
                                        arrayList2 = arrayList6;
                                        jArr5 = jArr19;
                                        jArr6 = jArr21;
                                        jArr7 = jArr;
                                        jArr8 = jArr22;
                                        protoOutputStream2 = protoOutputStream5;
                                        i7 = i4;
                                    }
                                    try {
                                        thread.dumpMemInfoProto(byteTransferPipe.getWriteFd(), memoryInfo2, memoryUsageDumpOptions2.dumpFullDetails, memoryUsageDumpOptions2.dumpDalvik, memoryUsageDumpOptions2.dumpSummaryOnly, memoryUsageDumpOptions2.dumpUnreachable, strArr);
                                        protoOutputStream2.write(2246267895812L, byteTransferPipe.get());
                                        try {
                                            byteTransferPipe.kill();
                                        } catch (RemoteException e) {
                                            e = e;
                                            Log.e("ActivityManager", "Got RemoteException!", e);
                                            final long totalPss = memoryInfo2.getTotalPss();
                                            final long totalUss = memoryInfo2.getTotalUss();
                                            final long totalRss = memoryInfo2.getTotalRss();
                                            long totalSwappedOutPss = memoryInfo2.getTotalSwappedOutPss();
                                            protoOutputStream3 = protoOutputStream2;
                                            activityManagerGlobalLock = activityManagerService2.mProcLock;
                                            boostPriorityForProcLockedSection();
                                            synchronized (activityManagerGlobalLock) {
                                            }
                                        } catch (IOException e2) {
                                            e = e2;
                                            Log.e("ActivityManager", "Got IOException!", e);
                                            final long totalPss2 = memoryInfo2.getTotalPss();
                                            final long totalUss2 = memoryInfo2.getTotalUss();
                                            final long totalRss2 = memoryInfo2.getTotalRss();
                                            long totalSwappedOutPss2 = memoryInfo2.getTotalSwappedOutPss();
                                            protoOutputStream3 = protoOutputStream2;
                                            activityManagerGlobalLock = activityManagerService2.mProcLock;
                                            boostPriorityForProcLockedSection();
                                            synchronized (activityManagerGlobalLock) {
                                            }
                                        }
                                    } catch (Throwable th2) {
                                        th = th2;
                                        byteTransferPipe.kill();
                                        throw th;
                                        break;
                                    }
                                } catch (RemoteException e3) {
                                    e = e3;
                                    jArr4 = jArr10;
                                    arrayList2 = arrayList6;
                                    jArr5 = jArr19;
                                    jArr6 = jArr21;
                                    jArr7 = jArr;
                                    jArr8 = jArr22;
                                    protoOutputStream2 = protoOutputStream5;
                                    i7 = i4;
                                } catch (IOException e4) {
                                    e = e4;
                                    jArr4 = jArr10;
                                    arrayList2 = arrayList6;
                                    jArr5 = jArr19;
                                    jArr6 = jArr21;
                                    jArr7 = jArr;
                                    jArr8 = jArr22;
                                    protoOutputStream2 = protoOutputStream5;
                                    i7 = i4;
                                }
                            }
                            final long totalPss22 = memoryInfo2.getTotalPss();
                            final long totalUss22 = memoryInfo2.getTotalUss();
                            final long totalRss22 = memoryInfo2.getTotalRss();
                            long totalSwappedOutPss22 = memoryInfo2.getTotalSwappedOutPss();
                            protoOutputStream3 = protoOutputStream2;
                            activityManagerGlobalLock = activityManagerService2.mProcLock;
                            boostPriorityForProcLockedSection();
                            synchronized (activityManagerGlobalLock) {
                                try {
                                    if (processRecord.getThread() != null && i7 == processRecord.mState.getSetAdjWithServices()) {
                                        processRecord.mProfile.addPss(totalPss22, totalUss22, totalRss22, true, i5, j3 - j2);
                                        final int i13 = i5;
                                        final long j5 = j3;
                                        final long j6 = j2;
                                        processRecord.getPkgList().forEachPackageProcessStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda28
                                            @Override // java.util.function.Consumer
                                            public final void accept(Object obj) {
                                                ActivityManagerService.lambda$dumpApplicationMemoryUsage$18(ProcessRecord.this, totalPss22, totalUss22, totalRss22, i13, j5, j6, (ProcessStats.ProcessStateHolder) obj);
                                            }
                                        });
                                    }
                                } finally {
                                }
                            }
                            resetPriorityAfterProcLockedSection();
                            if (memoryUsageDumpOptions2.isCheckinRequest) {
                                i8 = i12;
                                jArr9 = jArr3;
                                j4 = j4;
                            } else {
                                jArr8[9] = jArr8[9] + totalPss22;
                                jArr8[10] = jArr8[10] + totalSwappedOutPss22;
                                jArr8[11] = jArr8[11] + totalRss22;
                                StringBuilder sb = new StringBuilder();
                                sb.append(processRecord.processName);
                                sb.append(" (pid ");
                                sb.append(pid);
                                sb.append(hasActivities ? " / activities)" : ")");
                                MemItem memItem = new MemItem(sb.toString(), processRecord.processName, totalPss22, totalSwappedOutPss22, totalRss22, pid, processRecord.userId, hasActivities);
                                arrayList2.add(memItem);
                                sparseArray.put(pid, memItem);
                                jArr8[0] = jArr8[0] + memoryInfo2.nativePss;
                                jArr8[1] = jArr8[1] + memoryInfo2.nativeSwappedOutPss;
                                jArr8[2] = jArr8[2] + memoryInfo2.nativeRss;
                                jArr8[3] = jArr8[3] + memoryInfo2.dalvikPss;
                                jArr8[4] = jArr8[4] + memoryInfo2.dalvikSwappedOutPss;
                                jArr8[5] = jArr8[5] + memoryInfo2.dalvikRss;
                                int i14 = 0;
                                jArr9 = jArr3;
                                while (i14 < jArr9.length) {
                                    int i15 = i14 + 17;
                                    jArr9[i14] = jArr9[i14] + memoryInfo2.getOtherPss(i15);
                                    jArr13[i14] = jArr13[i14] + memoryInfo2.getOtherSwappedOutPss(i15);
                                    jArr14[i14] = jArr14[i14] + memoryInfo2.getOtherRss(i15);
                                    i14++;
                                    totalRss22 = totalRss22;
                                }
                                long j7 = totalRss22;
                                jArr8[6] = jArr8[6] + memoryInfo2.otherPss;
                                jArr8[8] = jArr8[8] + memoryInfo2.otherRss;
                                jArr8[7] = jArr8[7] + memoryInfo2.otherSwappedOutPss;
                                for (int i16 = 0; i16 < 17; i16++) {
                                    long otherPss = memoryInfo2.getOtherPss(i16);
                                    jArr7[i16] = jArr7[i16] + otherPss;
                                    jArr8[6] = jArr8[6] - otherPss;
                                    long otherSwappedOutPss = memoryInfo2.getOtherSwappedOutPss(i16);
                                    jArr5[i16] = jArr5[i16] + otherSwappedOutPss;
                                    jArr8[7] = jArr8[7] - otherSwappedOutPss;
                                    long otherRss = memoryInfo2.getOtherRss(i16);
                                    jArr16[i16] = jArr16[i16] + otherRss;
                                    jArr8[8] = jArr8[8] - otherRss;
                                }
                                long j8 = j4;
                                if (i7 >= 900) {
                                    j4 = j8 + totalPss22;
                                }
                                i8 = i12;
                                for (int i17 = 0; i17 < i8; i17++) {
                                    if (i17 != i8 - 1) {
                                        int[] iArr = DUMP_MEM_OOM_ADJ;
                                        if (i7 < iArr[i17] || i7 >= iArr[i17 + 1]) {
                                        }
                                    }
                                    jArr17[i17] = jArr17[i17] + totalPss22;
                                    jArr2[i17] = jArr2[i17] + totalSwappedOutPss22;
                                    if (arrayListArr[i17] == null) {
                                        arrayListArr[i17] = new ArrayList<>();
                                    }
                                    arrayListArr[i17].add(memItem);
                                    jArr6[i17] = jArr6[i17] + j7;
                                }
                            }
                            z6 = z2;
                        }
                    } else {
                        long currentThreadTimeMillis3 = SystemClock.currentThreadTimeMillis();
                        i4 = setAdjWithServices;
                        jArr2 = jArr18;
                        long pss2 = Debug.getPss(pid, jArr10, null);
                        if (pss2 != 0) {
                            memoryInfo2.dalvikPss = (int) pss2;
                            long currentThreadTimeMillis4 = SystemClock.currentThreadTimeMillis();
                            memoryInfo2.dalvikPrivateDirty = (int) jArr10[0];
                            memoryInfo2.dalvikRss = (int) jArr10[2];
                            z2 = z6;
                            j2 = currentThreadTimeMillis3;
                            j3 = currentThreadTimeMillis4;
                            i5 = 3;
                            if (memoryUsageDumpOptions2.dumpDetails) {
                            }
                            final long totalPss222 = memoryInfo2.getTotalPss();
                            final long totalUss222 = memoryInfo2.getTotalUss();
                            final long totalRss222 = memoryInfo2.getTotalRss();
                            long totalSwappedOutPss222 = memoryInfo2.getTotalSwappedOutPss();
                            protoOutputStream3 = protoOutputStream2;
                            activityManagerGlobalLock = activityManagerService2.mProcLock;
                            boostPriorityForProcLockedSection();
                            synchronized (activityManagerGlobalLock) {
                            }
                        }
                    }
                    i11 = i6 - 1;
                    activityManagerService2 = this;
                    arrayList3 = arrayList;
                    length = i8;
                    jArr12 = jArr9;
                    protoOutputStream5 = protoOutputStream3;
                    jArr18 = jArr2;
                    jArr15 = jArr7;
                    jArr19 = jArr5;
                    jArr20 = jArr6;
                    jArr10 = jArr4;
                    jArr11 = jArr8;
                    sparseArray2 = sparseArray;
                    arrayList5 = arrayList2;
                    memoryUsageDumpOptions2 = memoryUsageDumpOptions;
                }
                jArr9 = jArr12;
                sparseArray = sparseArray2;
                protoOutputStream3 = protoOutputStream5;
                arrayList2 = arrayList5;
                i6 = i11;
                jArr4 = jArr10;
                jArr5 = jArr19;
                i8 = i12;
                jArr6 = jArr21;
                jArr7 = jArr;
                jArr8 = jArr11;
                i11 = i6 - 1;
                activityManagerService2 = this;
                arrayList3 = arrayList;
                length = i8;
                jArr12 = jArr9;
                protoOutputStream5 = protoOutputStream3;
                jArr18 = jArr2;
                jArr15 = jArr7;
                jArr19 = jArr5;
                jArr20 = jArr6;
                jArr10 = jArr4;
                jArr11 = jArr8;
                sparseArray2 = sparseArray;
                arrayList5 = arrayList2;
                memoryUsageDumpOptions2 = memoryUsageDumpOptions;
            } else {
                final long[] jArr23 = jArr20;
                final long[] jArr24 = jArr15;
                final long[] jArr25 = jArr18;
                final long[] jArr26 = jArr12;
                final long[] jArr27 = jArr11;
                final SparseArray sparseArray3 = sparseArray2;
                ProtoOutputStream protoOutputStream6 = protoOutputStream5;
                final ArrayList arrayList7 = arrayList5;
                final long[] jArr28 = jArr10;
                final long[] jArr29 = jArr19;
                long j9 = j4;
                if (z5) {
                    final Debug.MemoryInfo[] memoryInfoArr = new Debug.MemoryInfo[1];
                    boolean z7 = z6;
                    this.mAppProfiler.forAllCpuStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda29
                        @Override // java.util.function.Consumer
                        public final void accept(Object obj) {
                            ActivityManagerService.lambda$dumpApplicationMemoryUsage$19(sparseArray3, memoryInfoArr, z, memoryUsageDumpOptions, jArr28, jArr27, arrayList7, jArr26, jArr13, jArr14, jArr24, jArr29, jArr16, jArr17, jArr25, arrayListArr, jArr23, (ProcessCpuTracker.Stats) obj);
                        }
                    });
                    ArrayList arrayList8 = new ArrayList();
                    arrayList8.add(new MemItem("Native", "Native", jArr27[0], jArr27[1], jArr27[2], -1));
                    arrayList8.add(new MemItem("Dalvik", "Dalvik", jArr27[3], jArr27[4], jArr27[5], -2));
                    arrayList8.add(new MemItem("Unknown", "Unknown", jArr27[6], jArr27[7], jArr27[8], -3));
                    for (int i18 = 0; i18 < 17; i18++) {
                        String otherLabel = Debug.MemoryInfo.getOtherLabel(i18);
                        arrayList8.add(new MemItem(otherLabel, otherLabel, jArr24[i18], jArr29[i18], jArr16[i18], i18));
                    }
                    if (jArr26.length > 0) {
                        Iterator it = arrayList8.iterator();
                        while (it.hasNext()) {
                            MemItem memItem2 = (MemItem) it.next();
                            int i19 = memItem2.id;
                            if (i19 == -2) {
                                i2 = 0;
                                i3 = 3;
                            } else if (i19 == 0) {
                                i3 = 9;
                                i2 = 4;
                            } else {
                                if (i19 == 10) {
                                    i2 = 10;
                                    i3 = 12;
                                } else if (i19 == 12) {
                                    i2 = 13;
                                    i3 = 14;
                                }
                                memItem2.subitems = new ArrayList<>();
                                while (i2 <= i3) {
                                    String otherLabel2 = Debug.MemoryInfo.getOtherLabel(i2 + 17);
                                    memItem2.subitems.add(new MemItem(otherLabel2, otherLabel2, jArr26[i2], jArr13[i2], jArr14[i2], i2));
                                    i2++;
                                }
                            }
                            memItem2.subitems = new ArrayList<>();
                            while (i2 <= i3) {
                            }
                        }
                    }
                    ArrayList arrayList9 = new ArrayList();
                    for (int i20 = 0; i20 < i12; i20++) {
                        long j10 = jArr17[i20];
                        if (j10 != 0) {
                            String str = memoryUsageDumpOptions.isCompact ? DUMP_MEM_OOM_COMPACT_LABEL[i20] : DUMP_MEM_OOM_LABEL[i20];
                            MemItem memItem3 = new MemItem(str, str, j10, jArr25[i20], jArr23[i20], DUMP_MEM_OOM_ADJ[i20]);
                            memItem3.subitems = arrayListArr[i20];
                            arrayList9.add(memItem3);
                        }
                    }
                    if (!memoryUsageDumpOptions.oomOnly) {
                        dumpMemItems(protoOutputStream6, 2246267895837L, "proc", arrayList7, true, false, false);
                    }
                    dumpMemItems(protoOutputStream6, 2246267895838L, "oom", arrayList9, false, false, false);
                    if (!z && !memoryUsageDumpOptions.oomOnly) {
                        dumpMemItems(protoOutputStream6, 2246267895839L, "cat", arrayList8, true, false, false);
                    }
                    boolean z8 = memoryUsageDumpOptions.dumpSwapPss && z7 && jArr27[10] != 0;
                    memoryUsageDumpOptions.dumpSwapPss = z8;
                    if (!memoryUsageDumpOptions.oomOnly) {
                        dumpMemItems(protoOutputStream6, 2246267895813L, "proc", arrayList7, true, true, z8);
                    }
                    dumpMemItems(protoOutputStream6, 2246267895814L, "oom", arrayList9, false, true, memoryUsageDumpOptions.dumpSwapPss);
                    if (!z && !memoryUsageDumpOptions.oomOnly) {
                        dumpMemItems(protoOutputStream6, 2246267895815L, "cat", arrayList8, true, true, memoryUsageDumpOptions.dumpSwapPss);
                    }
                    MemInfoReader memInfoReader = new MemInfoReader();
                    memInfoReader.readMemInfo();
                    if (jArr27[12] > 0) {
                        activityManagerService = this;
                        synchronized (activityManagerService.mProcessStats.mLock) {
                            long cachedSizeKb = memInfoReader.getCachedSizeKb();
                            long freeSizeKb = memInfoReader.getFreeSizeKb();
                            long zramTotalSizeKb = memInfoReader.getZramTotalSizeKb();
                            long kernelUsedSizeKb = memInfoReader.getKernelUsedSizeKb();
                            EventLogTags.writeAmMeminfo(cachedSizeKb * 1024, freeSizeKb * 1024, zramTotalSizeKb * 1024, kernelUsedSizeKb * 1024, jArr27[12] * 1024);
                            activityManagerService.mProcessStats.addSysMemUsageLocked(cachedSizeKb, freeSizeKb, zramTotalSizeKb, kernelUsedSizeKb, jArr27[12]);
                        }
                    } else {
                        activityManagerService = this;
                    }
                    if (z) {
                        protoOutputStream = protoOutputStream6;
                        j = j9;
                    } else {
                        protoOutputStream = protoOutputStream6;
                        protoOutputStream.write(1112396529672L, memInfoReader.getTotalSizeKb());
                        protoOutputStream.write(1159641169929L, activityManagerService.mAppProfiler.getLastMemoryLevelLocked());
                        j = j9;
                        protoOutputStream.write(1112396529674L, j);
                        protoOutputStream.write(1112396529675L, memInfoReader.getCachedSizeKb());
                        protoOutputStream.write(1112396529676L, memInfoReader.getFreeSizeKb());
                    }
                    long totalSizeKb = ((((memInfoReader.getTotalSizeKb() - (jArr27[9] - jArr27[10])) - memInfoReader.getFreeSizeKb()) - memInfoReader.getCachedSizeKb()) - memInfoReader.getKernelUsedSizeKb()) - memInfoReader.getZramTotalSizeKb();
                    protoOutputStream.write(1112396529677L, jArr27[9] - j);
                    protoOutputStream.write(1112396529678L, memInfoReader.getKernelUsedSizeKb());
                    protoOutputStream.write(1112396529679L, totalSizeKb);
                    if (!z) {
                        if (memInfoReader.getZramTotalSizeKb() != 0) {
                            protoOutputStream.write(1112396529680L, memInfoReader.getZramTotalSizeKb());
                            protoOutputStream.write(1112396529681L, memInfoReader.getSwapTotalSizeKb() - memInfoReader.getSwapFreeSizeKb());
                            protoOutputStream.write(1112396529682L, memInfoReader.getSwapTotalSizeKb());
                        }
                        long[] ksmInfo = getKsmInfo();
                        protoOutputStream.write(1112396529683L, ksmInfo[1]);
                        protoOutputStream.write(1112396529684L, ksmInfo[0]);
                        protoOutputStream.write(1112396529685L, ksmInfo[2]);
                        protoOutputStream.write(1112396529686L, ksmInfo[3]);
                        protoOutputStream.write(1120986464279L, ActivityManager.staticGetMemoryClass());
                        protoOutputStream.write(1120986464280L, ActivityManager.staticGetLargeMemoryClass());
                        protoOutputStream.write(1112396529689L, activityManagerService.mProcessList.getMemLevel(999) / 1024);
                        protoOutputStream.write(1112396529690L, activityManagerService.mProcessList.getCachedRestoreThresholdKb());
                        protoOutputStream.write(1133871366171L, ActivityManager.isLowRamDeviceStatic());
                        protoOutputStream.write(1133871366172L, ActivityManager.isHighEndGfx());
                    }
                } else {
                    protoOutputStream = protoOutputStream6;
                }
                protoOutputStream.flush();
                return;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$dumpApplicationMemoryUsage$17(int i, String[] strArr, ArrayList arrayList, ProcessCpuTracker.Stats stats) {
        String str;
        if (stats.pid == i || ((str = stats.baseName) != null && str.equals(strArr[0]))) {
            arrayList.add(stats);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$dumpApplicationMemoryUsage$18(ProcessRecord processRecord, long j, long j2, long j3, int i, long j4, long j5, ProcessStats.ProcessStateHolder processStateHolder) {
        FrameworkStatsLog.write(18, processRecord.info.uid, processStateHolder.state.getName(), processStateHolder.state.getPackage(), j, j2, j3, i, j4 - j5, processStateHolder.appVersion, processRecord.mProfile.getCurrentHostingComponentTypes(), processRecord.mProfile.getHistoricalHostingComponentTypes());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$dumpApplicationMemoryUsage$19(SparseArray sparseArray, Debug.MemoryInfo[] memoryInfoArr, boolean z, MemoryUsageDumpOptions memoryUsageDumpOptions, long[] jArr, long[] jArr2, ArrayList arrayList, long[] jArr3, long[] jArr4, long[] jArr5, long[] jArr6, long[] jArr7, long[] jArr8, long[] jArr9, long[] jArr10, ArrayList[] arrayListArr, long[] jArr11, ProcessCpuTracker.Stats stats) {
        if (stats.vsize <= 0 || sparseArray.indexOfKey(stats.pid) >= 0) {
            return;
        }
        if (memoryInfoArr[0] == null) {
            memoryInfoArr[0] = new Debug.MemoryInfo();
        }
        Debug.MemoryInfo memoryInfo = memoryInfoArr[0];
        if (!z && !memoryUsageDumpOptions.oomOnly) {
            if (!Debug.getMemoryInfo(stats.pid, memoryInfo)) {
                return;
            }
        } else {
            long pss = Debug.getPss(stats.pid, jArr, null);
            if (pss == 0) {
                return;
            }
            memoryInfo.nativePss = (int) pss;
            memoryInfo.nativePrivateDirty = (int) jArr[0];
            memoryInfo.nativeRss = (int) jArr[2];
        }
        long totalPss = memoryInfo.getTotalPss();
        long totalSwappedOutPss = memoryInfo.getTotalSwappedOutPss();
        long totalRss = memoryInfo.getTotalRss();
        jArr2[9] = jArr2[9] + totalPss;
        jArr2[10] = jArr2[10] + totalSwappedOutPss;
        jArr2[11] = jArr2[11] + totalRss;
        jArr2[12] = jArr2[12] + totalPss;
        MemItem memItem = new MemItem(stats.name + " (pid " + stats.pid + ")", stats.name, totalPss, memoryInfo.getSummaryTotalSwapPss(), totalRss, stats.pid, UserHandle.getUserId(stats.uid), false);
        arrayList.add(memItem);
        jArr2[0] = jArr2[0] + ((long) memoryInfo.nativePss);
        jArr2[1] = jArr2[1] + ((long) memoryInfo.nativeSwappedOutPss);
        jArr2[2] = jArr2[2] + ((long) memoryInfo.nativeRss);
        jArr2[3] = jArr2[3] + ((long) memoryInfo.dalvikPss);
        jArr2[4] = jArr2[4] + memoryInfo.dalvikSwappedOutPss;
        jArr2[5] = jArr2[5] + memoryInfo.dalvikRss;
        for (int i = 0; i < jArr3.length; i++) {
            int i2 = i + 17;
            jArr3[i] = jArr3[i] + memoryInfo.getOtherPss(i2);
            jArr4[i] = jArr4[i] + memoryInfo.getOtherSwappedOutPss(i2);
            jArr5[i] = jArr5[i] + memoryInfo.getOtherRss(i2);
        }
        jArr2[6] = jArr2[6] + memoryInfo.otherPss;
        jArr2[7] = jArr2[7] + memoryInfo.otherSwappedOutPss;
        jArr2[8] = jArr2[8] + memoryInfo.otherRss;
        for (int i3 = 0; i3 < 17; i3++) {
            long otherPss = memoryInfo.getOtherPss(i3);
            jArr6[i3] = jArr6[i3] + otherPss;
            jArr2[6] = jArr2[6] - otherPss;
            long otherSwappedOutPss = memoryInfo.getOtherSwappedOutPss(i3);
            jArr7[i3] = jArr7[i3] + otherSwappedOutPss;
            jArr2[7] = jArr2[7] - otherSwappedOutPss;
            long otherRss = memoryInfo.getOtherRss(i3);
            jArr8[i3] = jArr8[i3] + otherRss;
            jArr2[8] = jArr2[8] - otherRss;
        }
        jArr9[0] = jArr9[0] + totalPss;
        jArr10[0] = jArr10[0] + totalSwappedOutPss;
        if (arrayListArr[0] == null) {
            arrayListArr[0] = new ArrayList();
        }
        arrayListArr[0].add(memItem);
        jArr11[0] = jArr11[0] + totalRss;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static void appendBasicMemEntry(StringBuilder sb, int i, int i2, long j, long j2, String str) {
        sb.append("  ");
        sb.append(ProcessList.makeOomAdjString(i, false));
        sb.append(' ');
        sb.append(ProcessList.makeProcStateString(i2));
        sb.append(' ');
        ProcessList.appendRamKb(sb, j);
        sb.append(": ");
        sb.append(str);
        if (j2 > 0) {
            sb.append(" (");
            sb.append(stringifyKBSize(j2));
            sb.append(" memtrack)");
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static void appendMemInfo(StringBuilder sb, ProcessMemInfo processMemInfo) {
        appendBasicMemEntry(sb, processMemInfo.oomAdj, processMemInfo.procState, processMemInfo.pss, processMemInfo.memtrack, processMemInfo.name);
        sb.append(" (pid ");
        sb.append(processMemInfo.pid);
        sb.append(") ");
        sb.append(processMemInfo.adjType);
        sb.append('\n');
        if (processMemInfo.adjReason != null) {
            sb.append("                      ");
            sb.append(processMemInfo.adjReason);
            sb.append('\n');
        }
    }

    private static boolean scanArgs(String[] strArr, String str) {
        if (strArr != null) {
            for (String str2 : strArr) {
                if (str.equals(str2)) {
                    return true;
                }
            }
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:16:0x005d  */
    /* JADX WARN: Removed duplicated region for block: B:19:0x0075  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0074 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void filterNonExportedComponents(final Intent intent, int i, final int i2, List list, PlatformCompat platformCompat, String str, String str2) {
        boolean isChangeEnabledByUid;
        if (list == null || intent.getPackage() != null || intent.getComponent() != null || ActivityManager.canAccessUnexportedComponents(i)) {
            return;
        }
        final IUnsafeIntentStrictModeCallback iUnsafeIntentStrictModeCallback = this.mStrictModeCallbacks.get(i2);
        for (int size = list.size() - 1; size >= 0; size--) {
            if (list.get(size) instanceof ResolveInfo) {
                ResolveInfo resolveInfo = (ResolveInfo) list.get(size);
                if (resolveInfo.getComponentInfo().exported) {
                    continue;
                } else {
                    resolveInfo.getComponentInfo().getComponentName().flattenToShortString();
                    if (iUnsafeIntentStrictModeCallback != null) {
                        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda21
                            @Override // java.lang.Runnable
                            public final void run() {
                                ActivityManagerService.this.lambda$filterNonExportedComponents$20(iUnsafeIntentStrictModeCallback, intent, i2);
                            }
                        });
                    }
                    isChangeEnabledByUid = platformCompat.isChangeEnabledByUid(IMPLICIT_INTENTS_ONLY_MATCH_EXPORTED_COMPONENTS, i);
                    ActivityManagerUtils.logUnsafeIntentEvent(2, i, intent, str2, isChangeEnabledByUid);
                    if (isChangeEnabledByUid) {
                        return;
                    }
                    list.remove(size);
                }
            } else {
                if (list.get(size) instanceof BroadcastFilter) {
                    if (((BroadcastFilter) list.get(size)).exported) {
                        continue;
                    }
                    if (iUnsafeIntentStrictModeCallback != null) {
                    }
                    isChangeEnabledByUid = platformCompat.isChangeEnabledByUid(IMPLICIT_INTENTS_ONLY_MATCH_EXPORTED_COMPONENTS, i);
                    ActivityManagerUtils.logUnsafeIntentEvent(2, i, intent, str2, isChangeEnabledByUid);
                    if (isChangeEnabledByUid) {
                    }
                } else {
                    continue;
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$filterNonExportedComponents$20(IUnsafeIntentStrictModeCallback iUnsafeIntentStrictModeCallback, Intent intent, int i) {
        try {
            iUnsafeIntentStrictModeCallback.onImplicitIntentMatchedInternalComponent(intent.cloneFilter());
        } catch (RemoteException unused) {
            this.mStrictModeCallbacks.remove(i);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final boolean cleanUpApplicationRecordLocked(final ProcessRecord processRecord, int i, boolean z, boolean z2, int i2, boolean z3, boolean z4) {
        boolean z5;
        boolean onCleanupApplicationRecordLSP;
        boolean allowRestartBeforeCleanUpApplicationRecord = this.mActivityManagerServiceExt.setAllowRestartBeforeCleanUpApplicationRecord(z2, processRecord);
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            if (i2 >= 0) {
                try {
                    removeLruProcessLocked(processRecord);
                    ProcessList.remove(i);
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            ProcessStatsService processStatsService = this.mProcessStats;
            if (!z4 && !processRecord.isolated) {
                z5 = false;
                onCleanupApplicationRecordLSP = processRecord.onCleanupApplicationRecordLSP(processStatsService, allowRestartBeforeCleanUpApplicationRecord, z5);
                this.mOomAdjuster.mCachedAppOptimizer.onCleanupApplicationRecordLocked(processRecord);
            }
            z5 = true;
            onCleanupApplicationRecordLSP = processRecord.onCleanupApplicationRecordLSP(processStatsService, allowRestartBeforeCleanUpApplicationRecord, z5);
            this.mOomAdjuster.mCachedAppOptimizer.onCleanupApplicationRecordLocked(processRecord);
        }
        resetPriorityAfterProcLockedSection();
        boolean restartAfterCleanUpApplicationRecord = this.mActivityManagerServiceExt.setRestartAfterCleanUpApplicationRecord(onCleanupApplicationRecordLSP, processRecord);
        this.mAppProfiler.onCleanupApplicationRecordLocked(processRecord);
        for (BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.onApplicationCleanupLocked(processRecord);
        }
        clearProcessForegroundLocked(processRecord);
        this.mServices.killServicesLocked(processRecord, allowRestartBeforeCleanUpApplicationRecord);
        this.mPhantomProcessList.onAppDied(i);
        BackupRecord backupRecord = this.mBackupTargets.get(processRecord.userId);
        if (backupRecord != null && i == backupRecord.app.getPid()) {
            if (ActivityManagerDebugConfig.DEBUG_BACKUP || ActivityTaskManagerDebugConfig.DEBUG_CLEANUP) {
                Slog.d(TAG_CLEANUP, "App " + backupRecord.appInfo + " died during backup");
            }
            this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.18
                @Override // java.lang.Runnable
                public void run() {
                    try {
                        IBackupManager asInterface = IBackupManager.Stub.asInterface(ServiceManager.getService(HostingRecord.HOSTING_TYPE_BACKUP));
                        ProcessRecord processRecord2 = processRecord;
                        asInterface.agentDisconnectedForUser(processRecord2.userId, processRecord2.info.packageName);
                    } catch (RemoteException unused) {
                    }
                }
            });
        }
        this.mProcessList.scheduleDispatchProcessDiedLocked(i, processRecord.info.uid);
        boolean handlePrecedingAppDiedLocked = this.mProcessList.handlePrecedingAppDiedLocked(processRecord);
        ProcessRecord processRecord2 = processRecord.mPredecessor;
        if (processRecord2 != null) {
            processRecord2.mSuccessor = null;
            processRecord2.mSuccessorStartRunnable = null;
            processRecord.mPredecessor = null;
        }
        if (z) {
            return false;
        }
        if (!processRecord.isPersistent() || processRecord.isolated) {
            if (ActivityManagerDebugConfig.DEBUG_PROCESSES || ActivityTaskManagerDebugConfig.DEBUG_CLEANUP) {
                Slog.v(TAG_CLEANUP, "Removing non-persistent process during cleanup: " + processRecord);
            }
            if (!z3) {
                this.mProcessList.removeProcessNameLocked(processRecord.processName, processRecord.uid, processRecord);
            }
            this.mAtmInternal.clearHeavyWeightProcessIfEquals(processRecord.getWindowProcessController());
        } else if (!processRecord.isRemoved() && this.mPersistentStartingProcesses.indexOf(processRecord) < 0) {
            this.mPersistentStartingProcesses.add(processRecord);
            restartAfterCleanUpApplicationRecord = true;
        }
        if ((ActivityManagerDebugConfig.DEBUG_PROCESSES || ActivityTaskManagerDebugConfig.DEBUG_CLEANUP) && this.mProcessesOnHold.contains(processRecord)) {
            Slog.v(TAG_CLEANUP, "Clean-up removing on hold: " + processRecord);
        }
        this.mProcessesOnHold.remove(processRecord);
        this.mAtmInternal.onCleanUpApplicationRecord(processRecord.getWindowProcessController());
        this.mProcessList.noteProcessDiedLocked(processRecord);
        if (this.mActivityManagerServiceExt.setRestartBeforeRestartProc(restartAfterCleanUpApplicationRecord, processRecord) && handlePrecedingAppDiedLocked && !processRecord.isolated) {
            if (i2 < 0) {
                ProcessList.remove(i);
            }
            this.mHandler.removeMessages(57, processRecord);
            this.mProcessList.addProcessNameLocked(processRecord);
            processRecord.setPendingStart(false);
            this.mProcessList.startProcessLocked(processRecord, new HostingRecord(HostingRecord.HOSTING_TYPE_RESTART, processRecord.processName), 0);
            this.mActivityManagerServiceExt.hookCleanUpApplicationRecordAfterRestartProc(processRecord);
            return true;
        }
        if (i > 0 && i != MY_PID) {
            removePidLocked(i, processRecord);
            this.mHandler.removeMessages(20, processRecord);
            this.mBatteryStatsService.noteProcessFinish(processRecord.processName, processRecord.info.uid);
            if (processRecord.isolated) {
                this.mBatteryStatsService.removeIsolatedUid(processRecord.uid, processRecord.info.uid);
                this.mActivityManagerServiceExt.removeIsolatedUid(processRecord.uid, processRecord.info.uid, processRecord.info.packageName);
            }
            processRecord.setPid(0);
        }
        return false;
    }

    public List<ActivityManager.RunningServiceInfo> getServices(int i, int i2) {
        List<ActivityManager.RunningServiceInfo> runningServiceInfoLocked;
        enforceNotIsolatedCaller("getServices");
        int callingUid = Binder.getCallingUid();
        boolean z = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean isGetTasksAllowed = this.mAtmInternal.isGetTasksAllowed("getServices", Binder.getCallingPid(), callingUid);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                runningServiceInfoLocked = this.mServices.getRunningServiceInfoLocked(i, i2, callingUid, isGetTasksAllowed, z);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return runningServiceInfoLocked;
    }

    public PendingIntent getRunningServiceControlPanel(ComponentName componentName) {
        PendingIntent runningServiceControlPanelLocked;
        enforceNotIsolatedCaller("getRunningServiceControlPanel");
        int callingUid = Binder.getCallingUid();
        int userId = UserHandle.getUserId(callingUid);
        if (componentName == null || getPackageManagerInternal().filterAppAccess(componentName.getPackageName(), callingUid, userId)) {
            return null;
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                runningServiceControlPanelLocked = this.mServices.getRunningServiceControlPanelLocked(componentName);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return runningServiceControlPanelLocked;
    }

    public void logFgsApiBegin(int i, int i2, int i3) {
        enforceCallingPermission("android.permission.LOG_FOREGROUND_RESOURCE_USE", "logFgsApiBegin");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.logFgsApiBeginLocked(i, i2, i3);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void logFgsApiEnd(int i, int i2, int i3) {
        enforceCallingPermission("android.permission.LOG_FOREGROUND_RESOURCE_USE", "logFgsApiEnd");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.logFgsApiEndLocked(i, i2, i3);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void logFgsApiStateChanged(int i, int i2, int i3, int i4) {
        enforceCallingPermission("android.permission.LOG_FOREGROUND_RESOURCE_USE", "logFgsApiEvent");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.logFgsApiStateChangedLocked(i, i3, i4, i2);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public ComponentName startService(IApplicationThread iApplicationThread, Intent intent, String str, boolean z, String str2, String str3, int i) throws TransactionTooLargeException {
        return startService(iApplicationThread, intent, str, z, str2, str3, i, false, -1, null, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public ComponentName startService(IApplicationThread iApplicationThread, Intent intent, String str, boolean z, String str2, String str3, int i, boolean z2, int i2, String str4, String str5) throws TransactionTooLargeException {
        enforceNotIsolatedCaller("startService");
        enforceAllowedToStartOrBindServiceIfSdkSandbox(intent);
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        if (str2 == null) {
            throw new IllegalArgumentException("callingPackage cannot be null");
        }
        if (z2 && str5 == null) {
            throw new IllegalArgumentException("No instance name provided for SDK sandbox process");
        }
        validateServiceInstanceName(str5);
        if (ActivityManagerDebugConfig.DEBUG_SERVICE) {
            Slog.v(TAG_SERVICE, "*** startService: " + intent + " type=" + str + " fg=" + z);
        }
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            if (Trace.isTagEnabled(64L)) {
                Trace.traceBegin(64L, "startService: intent=" + intent + ", caller=" + str2 + ", fgRequired=" + z);
            }
            boostPriorityForLockedSection();
        } catch (Throwable th) {
            th = th;
        }
        try {
            try {
                synchronized (this) {
                    try {
                        this.mCallingPid = callingPid;
                        ComponentName startServiceLocked = this.mServices.startServiceLocked(iApplicationThread, intent, str, callingPid, callingUid, z, str2, str3, i, z2, i2, str4, str5);
                        resetPriorityAfterLockedSection();
                        Trace.traceEnd(64L);
                        Binder.restoreCallingIdentity(clearCallingIdentity);
                        return startServiceLocked;
                    } catch (Throwable th2) {
                        th = th2;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Throwable th4) {
            th = th4;
            Trace.traceEnd(64L);
            Binder.restoreCallingIdentity(clearCallingIdentity);
            throw th;
        }
    }

    private void validateServiceInstanceName(String str) {
        if (str != null && !str.matches("[a-zA-Z0-9_.]+")) {
            throw new IllegalArgumentException("Illegal instanceName");
        }
    }

    public int stopService(IApplicationThread iApplicationThread, Intent intent, String str, int i) {
        return stopService(iApplicationThread, intent, str, i, false, -1, null, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int stopService(IApplicationThread iApplicationThread, Intent intent, String str, int i, boolean z, int i2, String str2, String str3) {
        int stopServiceLocked;
        enforceNotIsolatedCaller("stopService");
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        try {
            if (Trace.isTagEnabled(64L)) {
                Trace.traceBegin(64L, "stopService: " + intent);
            }
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    stopServiceLocked = this.mServices.stopServiceLocked(iApplicationThread, intent, str, i, z, i2, str2, str3);
                } finally {
                }
            }
            resetPriorityAfterLockedSection();
            return stopServiceLocked;
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public IBinder peekService(Intent intent, String str, String str2) {
        IBinder peekServiceLocked;
        enforceNotIsolatedCaller("peekService");
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        if (str2 == null) {
            throw new IllegalArgumentException("callingPackage cannot be null");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                peekServiceLocked = this.mServices.peekServiceLocked(intent, str, str2);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return peekServiceLocked;
    }

    public boolean stopServiceToken(ComponentName componentName, IBinder iBinder, int i) {
        boolean stopServiceTokenLocked;
        String str;
        try {
            if (Trace.isTagEnabled(64L)) {
                StringBuilder sb = new StringBuilder();
                sb.append("stopServiceToken: ");
                if (componentName != null) {
                    str = componentName.toShortString();
                } else {
                    str = "from " + Binder.getCallingPid();
                }
                sb.append(str);
                Trace.traceBegin(64L, sb.toString());
            }
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    stopServiceTokenLocked = this.mServices.stopServiceTokenLocked(componentName, iBinder, i);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            return stopServiceTokenLocked;
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public void setServiceForeground(ComponentName componentName, IBinder iBinder, int i, Notification notification, int i2, int i3) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.setServiceForegroundLocked(componentName, iBinder, i, notification, i2, i3);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public int getForegroundServiceType(ComponentName componentName, IBinder iBinder) {
        int foregroundServiceTypeLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                foregroundServiceTypeLocked = this.mServices.getForegroundServiceTypeLocked(componentName, iBinder);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return foregroundServiceTypeLocked;
    }

    public boolean shouldServiceTimeOut(ComponentName componentName, IBinder iBinder) {
        boolean shouldServiceTimeOutLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                shouldServiceTimeOutLocked = this.mServices.shouldServiceTimeOutLocked(componentName, iBinder);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return shouldServiceTimeOutLocked;
    }

    public int handleIncomingUser(int i, int i2, int i3, boolean z, boolean z2, String str, String str2) {
        return this.mUserController.handleIncomingUser(i, i2, i3, z, z2 ? 2 : 0, str, str2);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* JADX WARN: Code restructure failed: missing block: B:22:0x0068, code lost:
    
        if ((r6.flags & 8) != 0) goto L22;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean isSingleton(String str, ApplicationInfo applicationInfo, String str2, int i) {
        boolean z = true;
        if (UserHandle.getAppId(applicationInfo.uid) >= 10000) {
            if ((i & 1073741824) != 0) {
                if (ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS", applicationInfo.uid) != 0) {
                    String str3 = "Permission Denial: Component " + new ComponentName(applicationInfo.packageName, str2).flattenToShortString() + " requests FLAG_SINGLE_USER, but app does not hold android.permission.INTERACT_ACROSS_USERS";
                    Slog.w("ActivityManager", str3);
                    throw new SecurityException(str3);
                }
            }
            z = false;
        } else if (!"system".equals(str)) {
            if ((i & 1073741824) != 0) {
                if (!UserHandle.isSameApp(applicationInfo.uid, 1001)) {
                }
            }
            z = false;
        }
        if (ActivityManagerDebugConfig.DEBUG_MU) {
            Slog.v(TAG_MU, "isSingleton(" + str + ", " + applicationInfo + ", " + str2 + ", 0x" + Integer.toHexString(i) + ") = " + z);
        }
        return z;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean isValidSingletonCall(int i, int i2) {
        int appId = UserHandle.getAppId(i2);
        return UserHandle.isSameApp(i, i2) || appId == 1000 || appId == 1001 || ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", i2) == 0;
    }

    public int bindService(IApplicationThread iApplicationThread, IBinder iBinder, Intent intent, String str, IServiceConnection iServiceConnection, long j, String str2, int i) throws TransactionTooLargeException {
        return bindServiceInstance(iApplicationThread, iBinder, intent, str, iServiceConnection, j, null, str2, i);
    }

    public int bindServiceInstance(IApplicationThread iApplicationThread, IBinder iBinder, Intent intent, String str, IServiceConnection iServiceConnection, long j, String str2, String str3, int i) throws TransactionTooLargeException {
        return bindServiceInstance(iApplicationThread, iBinder, intent, str, iServiceConnection, j, str2, false, -1, null, null, str3, i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int bindServiceInstance(IApplicationThread iApplicationThread, IBinder iBinder, Intent intent, String str, IServiceConnection iServiceConnection, long j, String str2, boolean z, int i, String str3, IApplicationThread iApplicationThread2, String str4, int i2) throws TransactionTooLargeException {
        long j2;
        enforceNotIsolatedCaller("bindService");
        enforceAllowedToStartOrBindServiceIfSdkSandbox(intent);
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        if (str4 == null) {
            throw new IllegalArgumentException("callingPackage cannot be null");
        }
        if (z && str2 == null) {
            throw new IllegalArgumentException("No instance name provided for isolated process");
        }
        validateServiceInstanceName(str2);
        try {
            if (Trace.isTagEnabled(64L)) {
                ComponentName component = intent.getComponent();
                StringBuilder sb = new StringBuilder();
                sb.append("bindService:");
                sb.append(component != null ? component.toShortString() : intent.getAction());
                Trace.traceBegin(64L, sb.toString());
            }
            boostPriorityForLockedSection();
            try {
                synchronized (this) {
                    try {
                        int bindServiceLocked = this.mServices.bindServiceLocked(iApplicationThread, iBinder, intent, str, iServiceConnection, j, str2, z, i, str3, iApplicationThread2, str4, i2);
                        resetPriorityAfterLockedSection();
                        Trace.traceEnd(64L);
                        return bindServiceLocked;
                    } catch (Throwable th) {
                        th = th;
                        j2 = 64;
                        try {
                            resetPriorityAfterLockedSection();
                            throw th;
                        } catch (Throwable th2) {
                            th = th2;
                            Trace.traceEnd(j2);
                            throw th;
                        }
                    }
                }
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Throwable th4) {
            th = th4;
            j2 = 64;
        }
    }

    public void updateServiceGroup(IServiceConnection iServiceConnection, int i, int i2) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.updateServiceGroupLocked(iServiceConnection, i, i2);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean unbindService(IServiceConnection iServiceConnection) {
        boolean unbindServiceLocked;
        try {
            if (Trace.isTagEnabled(64L)) {
                Trace.traceBegin(64L, "unbindService");
            }
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    unbindServiceLocked = this.mServices.unbindServiceLocked(iServiceConnection);
                } finally {
                }
            }
            resetPriorityAfterLockedSection();
            return unbindServiceLocked;
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public void publishService(IBinder iBinder, Intent intent, IBinder iBinder2) {
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!(iBinder instanceof ServiceRecord)) {
                    throw new IllegalArgumentException("Invalid service token");
                }
                this.mServices.publishServiceLocked((ServiceRecord) iBinder, intent, iBinder2);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void unbindFinished(IBinder iBinder, Intent intent, boolean z) {
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.unbindFinishedLocked((ServiceRecord) iBinder, intent, z);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void serviceDoneExecuting(IBinder iBinder, int i, int i2, int i3) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!(iBinder instanceof ServiceRecord)) {
                    Slog.e("ActivityManager", "serviceDoneExecuting: Invalid service token=" + iBinder);
                    throw new IllegalArgumentException("Invalid service token");
                }
                this.mServices.serviceDoneExecutingLocked((ServiceRecord) iBinder, i, i2, i3, false);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX WARN: Removed duplicated region for block: B:43:0x0148 A[Catch: all -> 0x00e9, TryCatch #2 {all -> 0x00e9, blocks: (B:35:0x00db, B:36:0x010d, B:40:0x0117, B:41:0x012a, B:43:0x0148, B:44:0x015e, B:47:0x0163, B:51:0x0173, B:52:0x0176, B:54:0x0183, B:55:0x0189, B:57:0x018f, B:58:0x0195, B:60:0x01ab, B:62:0x01af, B:64:0x01c5, B:67:0x01d4, B:75:0x01c9, B:77:0x01cd, B:80:0x0121, B:87:0x00ed), top: B:34:0x00db, inners: #3 }] */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0163 A[Catch: all -> 0x00e9, TRY_ENTER, TryCatch #2 {all -> 0x00e9, blocks: (B:35:0x00db, B:36:0x010d, B:40:0x0117, B:41:0x012a, B:43:0x0148, B:44:0x015e, B:47:0x0163, B:51:0x0173, B:52:0x0176, B:54:0x0183, B:55:0x0189, B:57:0x018f, B:58:0x0195, B:60:0x01ab, B:62:0x01af, B:64:0x01c5, B:67:0x01d4, B:75:0x01c9, B:77:0x01cd, B:80:0x0121, B:87:0x00ed), top: B:34:0x00db, inners: #3 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean bindBackupAgent(String str, int i, int i2, int i3) {
        ApplicationInfo applicationInfo;
        ComponentName componentName;
        ProcessRecord startProcessLocked;
        int i4;
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v("ActivityManager", "bindBackupAgent: app=" + str + " mode=" + i + " targetUserId=" + i2 + " callingUid = " + Binder.getCallingUid() + " uid = " + Process.myUid());
        }
        enforceCallingPermission("android.permission.CONFIRM_FULL_BACKUP", "bindBackupAgent");
        int i5 = "android".equals(str) || getPackageManagerInternal().getSystemUiServiceComponent().getPackageName().equals(str) ? 0 : i2;
        IPackageManager packageManager = AppGlobals.getPackageManager();
        try {
            applicationInfo = packageManager.getApplicationInfo(str, 1024L, i5);
        } catch (RemoteException unused) {
            applicationInfo = null;
        }
        ApplicationInfo applicationInfo2 = applicationInfo;
        if (applicationInfo2 == null) {
            Slog.w("ActivityManager", "Unable to bind backup agent for " + str);
            return false;
        }
        if (applicationInfo2.backupAgentName != null) {
            ComponentName componentName2 = new ComponentName(applicationInfo2.packageName, applicationInfo2.backupAgentName);
            try {
                i4 = packageManager.getComponentEnabledSetting(componentName2, i5);
            } catch (RemoteException unused2) {
                i4 = 0;
            }
            if (i4 == 2 || i4 == 3 || i4 == 4) {
                Slog.w("ActivityManager", "Unable to bind backup agent for " + componentName2 + ", the backup agent component is disabled.");
                return false;
            }
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                try {
                    this.mPackageManagerInt.setPackageStoppedState(applicationInfo2.packageName, false, UserHandle.getUserId(applicationInfo2.uid));
                } catch (IllegalArgumentException e) {
                    Slog.w("ActivityManager", "Failed trying to unstop package " + applicationInfo2.packageName + ": " + e);
                }
                BackupRecord backupRecord = new BackupRecord(applicationInfo2, i, i2, i3);
                if (i != 0 && i != 2) {
                    componentName = new ComponentName("android", "FullBackupAgent");
                    startProcessLocked = startProcessLocked(applicationInfo2.processName, applicationInfo2, false, 0, new HostingRecord(HostingRecord.HOSTING_TYPE_BACKUP, componentName), 4, false, false);
                    if (startProcessLocked != null) {
                        Slog.e("ActivityManager", "Unable to start backup agent process " + backupRecord);
                        resetPriorityAfterLockedSection();
                        return false;
                    }
                    this.mActivityManagerServiceExt.hookBindBackupAgentAfterStartProc(startProcessLocked, applicationInfo2);
                    if (UserHandle.isApp(applicationInfo2.uid) && i == 1) {
                        startProcessLocked.setInFullBackup(true);
                    }
                    backupRecord.app = startProcessLocked;
                    BackupRecord backupRecord2 = this.mBackupTargets.get(i2);
                    int i6 = backupRecord2 != null ? backupRecord2.appInfo.uid : -1;
                    int i7 = startProcessLocked.isInFullBackup() ? backupRecord.appInfo.uid : -1;
                    this.mBackupTargets.put(i2, backupRecord);
                    startProcessLocked.mProfile.addHostingComponentType(4);
                    updateOomAdjLocked(startProcessLocked, 15);
                    IApplicationThread thread = startProcessLocked.getThread();
                    if (thread != null) {
                        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                            Slog.v(TAG_BACKUP, "Agent proc already running: " + startProcessLocked);
                        }
                        try {
                            thread.scheduleCreateBackupAgent(applicationInfo2, i, i2, i3);
                        } catch (RemoteException unused3) {
                        }
                    } else if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                        Slog.v(TAG_BACKUP, "Agent proc not running, waiting for attach");
                    }
                    resetPriorityAfterLockedSection();
                    JobSchedulerInternal jobSchedulerInternal = (JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class);
                    if (i6 != -1) {
                        jobSchedulerInternal.removeBackingUpUid(i6);
                    }
                    if (i7 == -1) {
                        return true;
                    }
                    jobSchedulerInternal.addBackingUpUid(i7);
                    return true;
                }
                componentName = new ComponentName(applicationInfo2.packageName, applicationInfo2.backupAgentName);
                startProcessLocked = startProcessLocked(applicationInfo2.processName, applicationInfo2, false, 0, new HostingRecord(HostingRecord.HOSTING_TYPE_BACKUP, componentName), 4, false, false);
                if (startProcessLocked != null) {
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void clearPendingBackup(int i) {
        ProcessRecord processRecord;
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG_BACKUP, "clearPendingBackup: userId = " + i + " callingUid = " + Binder.getCallingUid() + " uid = " + Process.myUid());
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                int indexOfKey = this.mBackupTargets.indexOfKey(i);
                if (indexOfKey >= 0) {
                    BackupRecord valueAt = this.mBackupTargets.valueAt(indexOfKey);
                    if (valueAt != null && (processRecord = valueAt.app) != null) {
                        processRecord.mProfile.clearHostingComponentType(4);
                    }
                    this.mBackupTargets.removeAt(indexOfKey);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        ((JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class)).clearAllBackingUpUids();
    }

    public void backupAgentCreated(String str, IBinder iBinder, int i) {
        int callingUid = Binder.getCallingUid();
        enforceCallingPackage(str, callingUid);
        int handleIncomingUser = this.mUserController.handleIncomingUser(Binder.getCallingPid(), callingUid, i, false, 2, "backupAgentCreated", null);
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG_BACKUP, "backupAgentCreated: " + str + " = " + iBinder + " callingUserId = " + UserHandle.getCallingUserId() + " userId = " + handleIncomingUser + " callingUid = " + callingUid + " uid = " + Process.myUid());
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                BackupRecord backupRecord = this.mBackupTargets.get(handleIncomingUser);
                if (!str.equals(backupRecord == null ? null : backupRecord.appInfo.packageName)) {
                    Slog.e("ActivityManager", "Backup agent created for " + str + " but not requested!");
                    resetPriorityAfterLockedSection();
                    return;
                }
                resetPriorityAfterLockedSection();
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    try {
                        IBackupManager.Stub.asInterface(ServiceManager.getService(HostingRecord.HOSTING_TYPE_BACKUP)).agentConnectedForUser(handleIncomingUser, str, iBinder);
                    } catch (RemoteException unused) {
                    } catch (Exception e) {
                        Slog.w("ActivityManager", "Exception trying to deliver BackupAgent binding: ");
                        e.printStackTrace();
                    }
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void unbindBackupAgent(ApplicationInfo applicationInfo) {
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG_BACKUP, "unbindBackupAgent: " + applicationInfo + " appInfo.uid = " + applicationInfo.uid + " callingUid = " + Binder.getCallingUid() + " uid = " + Process.myUid());
        }
        enforceCallingPermission("android.permission.CONFIRM_FULL_BACKUP", "unbindBackupAgent");
        if (applicationInfo == null) {
            Slog.w("ActivityManager", "unbind backup agent for null app");
            return;
        }
        int userId = UserHandle.getUserId(applicationInfo.uid);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mActivityManagerServiceExt.hookUnbindBackupAgent(applicationInfo);
                BackupRecord backupRecord = this.mBackupTargets.get(userId);
                String str = backupRecord == null ? null : backupRecord.appInfo.packageName;
                try {
                    if (str == null) {
                        Slog.w("ActivityManager", "Unbinding backup agent with no active backup");
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    if (!str.equals(applicationInfo.packageName)) {
                        Slog.e("ActivityManager", "Unbind of " + applicationInfo + " but is not the current backup target");
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    ProcessRecord processRecord = backupRecord.app;
                    updateOomAdjLocked(processRecord, 15);
                    processRecord.setInFullBackup(false);
                    processRecord.mProfile.clearHostingComponentType(4);
                    int i = backupRecord.appInfo.uid;
                    IApplicationThread thread = processRecord.getThread();
                    if (thread != null) {
                        try {
                            thread.scheduleDestroyBackupAgent(applicationInfo, userId);
                        } catch (Exception e) {
                            Slog.e("ActivityManager", "Exception when unbinding backup agent:");
                            e.printStackTrace();
                        }
                    }
                    resetPriorityAfterLockedSection();
                    if (i != -1) {
                        ((JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class)).removeBackingUpUid(i);
                    }
                } finally {
                    this.mBackupTargets.delete(userId);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    private boolean isInstantApp(ProcessRecord processRecord, String str, int i) {
        if (UserHandle.getAppId(i) < 10000) {
            return false;
        }
        if (processRecord != null) {
            return processRecord.info.isInstantApp();
        }
        IPackageManager packageManager = AppGlobals.getPackageManager();
        if (str == null) {
            try {
                String[] packagesForUid = packageManager.getPackagesForUid(i);
                if (packagesForUid == null || packagesForUid.length == 0) {
                    throw new IllegalArgumentException("Unable to determine caller package name");
                }
                str = packagesForUid[0];
            } catch (RemoteException e) {
                Slog.e("ActivityManager", "Error looking up if " + str + " is an instant app.", e);
                return true;
            }
        }
        this.mAppOpsService.checkPackage(i, str);
        return packageManager.isInstantApp(str, UserHandle.getUserId(i));
    }

    @Deprecated
    public Intent registerReceiver(IApplicationThread iApplicationThread, String str, IIntentReceiver iIntentReceiver, IntentFilter intentFilter, String str2, int i, int i2) {
        return registerReceiverWithFeature(iApplicationThread, str, null, null, iIntentReceiver, intentFilter, str2, i, i2);
    }

    /* JADX WARN: Code restructure failed: missing block: B:134:0x0228, code lost:
    
        if (r59 == null) goto L123;
     */
    /* JADX WARN: Code restructure failed: missing block: B:135:0x022a, code lost:
    
        if (r5 != false) goto L123;
     */
    /* JADX WARN: Code restructure failed: missing block: B:136:0x022c, code lost:
    
        r54.mActivityManagerServiceExt.hookBeforeCheckExportState(r56, r3, r60, r9);
     */
    /* JADX WARN: Code restructure failed: missing block: B:137:0x0231, code lost:
    
        if (r59 != null) goto L126;
     */
    /* JADX WARN: Code restructure failed: missing block: B:138:0x0233, code lost:
    
        if (r5 != false) goto L126;
     */
    /* JADX WARN: Code restructure failed: missing block: B:140:0x025d, code lost:
    
        r1 = r1 | 2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:142:0x0260, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:143:0x0264, code lost:
    
        if ((r1 & 2) == 0) goto L142;
     */
    /* JADX WARN: Code restructure failed: missing block: B:144:0x0266, code lost:
    
        r22 = true;
     */
    /* JADX WARN: Code restructure failed: missing block: B:145:0x026b, code lost:
    
        if (r0 == null) goto L158;
     */
    /* JADX WARN: Code restructure failed: missing block: B:146:0x026d, code lost:
    
        r1 = r54.mContext.getContentResolver();
        r2 = r0.size();
        r5 = null;
        r9 = 0;
        r12 = r12;
     */
    /* JADX WARN: Code restructure failed: missing block: B:147:0x0279, code lost:
    
        if (r9 >= r2) goto L296;
     */
    /* JADX WARN: Code restructure failed: missing block: B:148:0x027b, code lost:
    
        r12 = (com.android.server.am.ActivityManagerService.StickyBroadcast) r0.get(r9);
        r13 = r12.intent;
     */
    /* JADX WARN: Code restructure failed: missing block: B:149:0x0283, code lost:
    
        if (r18 == false) goto L151;
     */
    /* JADX WARN: Code restructure failed: missing block: B:151:0x028d, code lost:
    
        if ((r13.getFlags() & android.hardware.audio.common.V2_0.AudioDevice.OUT_AUX_LINE) != 0) goto L151;
     */
    /* JADX WARN: Code restructure failed: missing block: B:154:0x02a2, code lost:
    
        r9 = r9 + 1;
        r12 = r12;
     */
    /* JADX WARN: Code restructure failed: missing block: B:156:0x0296, code lost:
    
        if (r60.match(r1, r13, true, "ActivityManager") < 0) goto L299;
     */
    /* JADX WARN: Code restructure failed: missing block: B:157:0x0298, code lost:
    
        if (r5 != null) goto L155;
     */
    /* JADX WARN: Code restructure failed: missing block: B:158:0x029a, code lost:
    
        r5 = new java.util.ArrayList();
     */
    /* JADX WARN: Code restructure failed: missing block: B:159:0x029f, code lost:
    
        r5.add(r12);
     */
    /* JADX WARN: Code restructure failed: missing block: B:163:0x02a5, code lost:
    
        r0 = r5;
        r12 = r12;
     */
    /* JADX WARN: Code restructure failed: missing block: B:164:0x02a8, code lost:
    
        if (r0 == null) goto L161;
     */
    /* JADX WARN: Code restructure failed: missing block: B:165:0x02aa, code lost:
    
        r14 = ((com.android.server.am.ActivityManagerService.StickyBroadcast) r0.get(0)).intent;
     */
    /* JADX WARN: Code restructure failed: missing block: B:167:0x02b8, code lost:
    
        if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_BROADCAST == false) goto L165;
     */
    /* JADX WARN: Code restructure failed: missing block: B:168:0x02ba, code lost:
    
        android.util.Slog.v(com.android.server.am.ActivityManagerService.TAG_BROADCAST, "Register receiver " + r60 + ": " + r14);
     */
    /* JADX WARN: Code restructure failed: missing block: B:169:0x02d8, code lost:
    
        if (r59 != null) goto L167;
     */
    /* JADX WARN: Code restructure failed: missing block: B:170:0x02da, code lost:
    
        return r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:172:0x02e1, code lost:
    
        if (r11 == android.os.Process.myPid()) goto L174;
     */
    /* JADX WARN: Code restructure failed: missing block: B:174:0x02e9, code lost:
    
        if (r60.hasAction("com.android.server.net.action.SNOOZE_WARNING") != false) goto L173;
     */
    /* JADX WARN: Code restructure failed: missing block: B:176:0x02f1, code lost:
    
        if (r60.hasAction("com.android.server.net.action.SNOOZE_RAPID") == false) goto L174;
     */
    /* JADX WARN: Code restructure failed: missing block: B:177:0x02f3, code lost:
    
        r9 = 0;
        android.util.EventLog.writeEvent(1397638484, "177931370", java.lang.Integer.valueOf(r12), "");
     */
    /* JADX WARN: Code restructure failed: missing block: B:178:0x030d, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:180:0x0310, code lost:
    
        monitor-enter(r54);
     */
    /* JADX WARN: Code restructure failed: missing block: B:182:0x0311, code lost:
    
        r1 = r3.getThread();
     */
    /* JADX WARN: Code restructure failed: missing block: B:183:0x0315, code lost:
    
        if (r1 == null) goto L247;
     */
    /* JADX WARN: Code restructure failed: missing block: B:185:0x031f, code lost:
    
        if (r1.asBinder() == r55.asBinder()) goto L182;
     */
    /* JADX WARN: Code restructure failed: missing block: B:187:0x0323, code lost:
    
        r1 = r54.mRegisteredReceivers.get(r59.asBinder());
     */
    /* JADX WARN: Code restructure failed: missing block: B:189:0x032f, code lost:
    
        if (r1 != null) goto L204;
     */
    /* JADX WARN: Code restructure failed: missing block: B:191:0x0333, code lost:
    
        r13 = r9;
        r12 = r56;
     */
    /* JADX WARN: Code restructure failed: missing block: B:192:0x0340, code lost:
    
        r10 = new com.android.server.am.ReceiverList(r54, r3, r11, r12, r15, r59);
        r1 = r10.app;
     */
    /* JADX WARN: Code restructure failed: missing block: B:193:0x0345, code lost:
    
        if (r1 == null) goto L272;
     */
    /* JADX WARN: Code restructure failed: missing block: B:194:0x0347, code lost:
    
        r1 = r1.mReceivers.numberOfReceivers();
        r2 = r54.mActivityManagerServiceExt;
     */
    /* JADX WARN: Code restructure failed: missing block: B:195:0x0353, code lost:
    
        if (com.android.server.am.ActivityManagerService.MY_PID != r10.pid) goto L191;
     */
    /* JADX WARN: Code restructure failed: missing block: B:196:0x0355, code lost:
    
        r5 = 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:197:0x0358, code lost:
    
        r2.debugReceiverIssue(r5, r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:198:0x035b, code lost:
    
        if (r1 >= 1000) goto L195;
     */
    /* JADX WARN: Code restructure failed: missing block: B:199:0x035d, code lost:
    
        r10.app.mReceivers.addReceiver(r10);
     */
    /* JADX WARN: Code restructure failed: missing block: B:200:0x0398, code lost:
    
        r54.mRegisteredReceivers.put(r59.asBinder(), r10);
        r1 = r10;
        r12 = r12;
     */
    /* JADX WARN: Code restructure failed: missing block: B:202:0x03b8, code lost:
    
        r4 = r12;
        r5 = r13;
        r23 = r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:203:0x03d1, code lost:
    
        r2 = new com.android.server.am.BroadcastFilter(r60, r1, r56, r57, r58, r61, r12, r15, r18, r19, r22);
     */
    /* JADX WARN: Code restructure failed: missing block: B:204:0x03da, code lost:
    
        if (r1.containsFilter(r60) == false) goto L216;
     */
    /* JADX WARN: Code restructure failed: missing block: B:205:0x03dc, code lost:
    
        android.util.Slog.w("ActivityManager", "Receiver with filter " + r60 + " already registered for pid " + r1.pid + ", callerPackage is " + r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:206:0x0422, code lost:
    
        if (r0 == null) goto L232;
     */
    /* JADX WARN: Code restructure failed: missing block: B:207:0x0424, code lost:
    
        r1 = new java.util.ArrayList();
        r1.add(r2);
        r2 = r0.size();
        r15 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:208:0x0431, code lost:
    
        if (r5 >= r2) goto L300;
     */
    /* JADX WARN: Code restructure failed: missing block: B:209:0x0433, code lost:
    
        r6 = (com.android.server.am.ActivityManagerService.StickyBroadcast) r0.get(r5);
        r7 = ((com.android.server.am.ActivityManagerService.StickyBroadcast) r0.get(r5)).originalCallingUid;
     */
    /* JADX WARN: Code restructure failed: missing block: B:210:0x0441, code lost:
    
        if (r15 != null) goto L302;
     */
    /* JADX WARN: Code restructure failed: missing block: B:211:0x0443, code lost:
    
        if (r22 != false) goto L229;
     */
    /* JADX WARN: Code restructure failed: missing block: B:212:0x0445, code lost:
    
        if (r7 == r12) goto L229;
     */
    /* JADX WARN: Code restructure failed: missing block: B:214:0x044b, code lost:
    
        if (android.app.ActivityManager.canAccessUnexportedComponents(r7) == false) goto L303;
     */
    /* JADX WARN: Code restructure failed: missing block: B:216:0x0450, code lost:
    
        r9 = broadcastQueueForIntent(r6.intent);
        r9.enqueueBroadcastLocked(new com.android.server.am.BroadcastRecord(r9, r6.intent, null, null, null, -1, -1, false, null, null, null, null, -1, android.app.BroadcastOptions.makeWithDeferUntilActive(r6.deferUntilActive), r1, null, null, 0, null, null, false, true, true, -1, r7, android.app.BackgroundStartPrivileges.NONE, false, null, r6.originalCallingAppProcessState));
        r5 = r5 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:217:0x044d, code lost:
    
        r15 = r6.intent;
     */
    /* JADX WARN: Code restructure failed: missing block: B:221:0x04a5, code lost:
    
        r14 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:222:0x04a9, code lost:
    
        monitor-exit(r54);
     */
    /* JADX WARN: Code restructure failed: missing block: B:223:0x04aa, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:224:0x04ad, code lost:
    
        return r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:225:0x04a7, code lost:
    
        r14 = r23;
     */
    /* JADX WARN: Code restructure failed: missing block: B:226:0x0405, code lost:
    
        r1.add(r2);
     */
    /* JADX WARN: Code restructure failed: missing block: B:227:0x040c, code lost:
    
        if (r2.debugCheck() != false) goto L219;
     */
    /* JADX WARN: Code restructure failed: missing block: B:228:0x040e, code lost:
    
        android.util.Slog.w("ActivityManager", "==> For Dynamic broadcast");
     */
    /* JADX WARN: Code restructure failed: missing block: B:229:0x0415, code lost:
    
        r54.mReceiverResolver.addFilter(getPackageManagerInternal().snapshot(), r2);
     */
    /* JADX WARN: Code restructure failed: missing block: B:231:0x038d, code lost:
    
        throw new java.lang.IllegalStateException("Too many receivers, total of " + r1 + ", registered for pid: " + r10.pid + ", callerPackage: " + r12);
     */
    /* JADX WARN: Code restructure failed: missing block: B:232:0x0357, code lost:
    
        r5 = r13;
     */
    /* JADX WARN: Code restructure failed: missing block: B:234:0x038e, code lost:
    
        r59.asBinder().linkToDeath(r10, r13);
     */
    /* JADX WARN: Code restructure failed: missing block: B:236:0x0396, code lost:
    
        r10.linkedToDeath = true;
     */
    /* JADX WARN: Code restructure failed: missing block: B:239:0x03a4, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:240:0x03a7, code lost:
    
        return r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:242:0x03a8, code lost:
    
        r12 = r56;
        r13 = r9;
     */
    /* JADX WARN: Code restructure failed: missing block: B:244:0x03ac, code lost:
    
        if (r1.uid != r12) goto L241;
     */
    /* JADX WARN: Code restructure failed: missing block: B:246:0x03b0, code lost:
    
        if (r1.pid != r11) goto L239;
     */
    /* JADX WARN: Code restructure failed: missing block: B:247:0x03b2, code lost:
    
        r12 = r12;
     */
    /* JADX WARN: Code restructure failed: missing block: B:248:0x03b4, code lost:
    
        if (r1.userId != r15) goto L236;
     */
    /* JADX WARN: Code restructure failed: missing block: B:251:0x04d8, code lost:
    
        throw new java.lang.IllegalArgumentException("Receiver requested to register for user " + r15 + " was previously registered for user " + r1.userId + " callerPackage is " + r12);
     */
    /* JADX WARN: Code restructure failed: missing block: B:253:0x0502, code lost:
    
        throw new java.lang.IllegalArgumentException("Receiver requested to register for pid " + r11 + " was previously registered for pid " + r1.pid + " callerPackage is " + r12);
     */
    /* JADX WARN: Code restructure failed: missing block: B:255:0x052d, code lost:
    
        throw new java.lang.IllegalArgumentException("Receiver requested to register for uid " + r12 + " was previously registered for uid " + r1.uid + " callerPackage is " + r12);
     */
    /* JADX WARN: Code restructure failed: missing block: B:256:0x052e, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:258:0x053b, code lost:
    
        monitor-exit(r54);
     */
    /* JADX WARN: Code restructure failed: missing block: B:259:0x053c, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:260:0x053f, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:262:0x0536, code lost:
    
        monitor-exit(r54);
     */
    /* JADX WARN: Code restructure failed: missing block: B:263:0x0537, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:264:0x053a, code lost:
    
        return null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:265:0x0531, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:268:0x0540, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:269:0x030c, code lost:
    
        r9 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:270:0x02b5, code lost:
    
        r14 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:271:0x02a7, code lost:
    
        r0 = null;
        r12 = r12;
     */
    /* JADX WARN: Code restructure failed: missing block: B:272:0x0269, code lost:
    
        r22 = false;
     */
    /* JADX WARN: Code restructure failed: missing block: B:273:0x0236, code lost:
    
        if (r9 == false) goto L131;
     */
    /* JADX WARN: Code restructure failed: missing block: B:274:0x0238, code lost:
    
        if (r5 == false) goto L129;
     */
    /* JADX WARN: Code restructure failed: missing block: B:277:0x0251, code lost:
    
        throw new java.lang.SecurityException(r56 + ": One of RECEIVER_EXPORTED or RECEIVER_NOT_EXPORTED should be specified when a receiver isn't being registered exclusively for system broadcasts");
     */
    /* JADX WARN: Code restructure failed: missing block: B:278:0x0252, code lost:
    
        if (r9 != false) goto L138;
     */
    /* JADX WARN: Code restructure failed: missing block: B:280:0x0256, code lost:
    
        if ((r1 & 4) != 0) goto L138;
     */
    /* JADX WARN: Code restructure failed: missing block: B:283:0x025b, code lost:
    
        if ((r1 & 4) == 0) goto L137;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:35:0x00bb A[Catch: all -> 0x0542, TryCatch #3 {all -> 0x0542, blocks: (B:9:0x001c, B:11:0x0023, B:12:0x003c, B:17:0x0043, B:19:0x004b, B:21:0x0055, B:24:0x005e, B:25:0x007c, B:26:0x007d, B:28:0x00ab, B:35:0x00bb, B:37:0x00c2, B:39:0x00ce, B:41:0x00d6, B:43:0x00de, B:45:0x00e6, B:47:0x00ef, B:50:0x00f2, B:52:0x00f6, B:54:0x011c, B:61:0x011f, B:63:0x0125, B:65:0x012d, B:67:0x0131, B:68:0x0136, B:70:0x013c, B:71:0x014b, B:72:0x015b, B:74:0x0161, B:76:0x016c, B:78:0x0178, B:81:0x0182, B:82:0x018a, B:92:0x0197, B:98:0x01a3, B:102:0x01b1, B:104:0x01bb, B:106:0x01c5, B:109:0x01cc, B:110:0x01e6, B:111:0x01e7, B:112:0x01ee, B:113:0x01ef, B:116:0x01f6, B:118:0x01fa, B:121:0x01ff, B:122:0x0206, B:123:0x0207, B:125:0x0212, B:131:0x021e, B:132:0x0225, B:136:0x022c, B:140:0x025d, B:141:0x025f, B:276:0x023b, B:277:0x0251, B:279:0x0254, B:282:0x0259), top: B:8:0x001c, outer: #5, inners: #4 }] */
    /* JADX WARN: Type inference failed for: r12v16 */
    /* JADX WARN: Type inference failed for: r4v0 */
    /* JADX WARN: Type inference failed for: r4v2 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public Intent registerReceiverWithFeature(IApplicationThread iApplicationThread, String str, String str2, String str3, IIntentReceiver iIntentReceiver, IntentFilter intentFilter, String str4, int i, int i2) {
        String str5;
        ArrayList arrayList;
        ArrayList<StickyBroadcast> arrayList2;
        boolean z;
        int i3;
        int i4 = i2;
        try {
            enforceNotIsolatedCaller("registerReceiver");
            int i5 = i4 & 1;
            str5 = 1;
            boolean z2 = i5 != 0;
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    try {
                        ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                        if (recordForAppLOSP == null) {
                            Slog.w("ActivityManager", "registerReceiverWithFeature: no app for " + iApplicationThread);
                            resetPriorityAfterLockedSection();
                            return null;
                        }
                        if (recordForAppLOSP.info.uid != 1000 && !recordForAppLOSP.getPkgList().containsKey(str) && !"android".equals(str)) {
                            throw new SecurityException("Given caller package " + str + " is not running in process " + recordForAppLOSP);
                        }
                        int i6 = recordForAppLOSP.info.uid;
                        int pid = recordForAppLOSP.getPid();
                        boolean isInstantApp = isInstantApp(recordForAppLOSP, str, i6);
                        int handleIncomingUser = this.mUserController.handleIncomingUser(pid, i6, i, true, 2, "registerReceiver", str);
                        if (UserHandle.isCore(i6)) {
                            int priority = intentFilter.getPriority();
                            if (priority < 1000 && priority > -1000) {
                                z = false;
                                if (!z) {
                                    int countActions = intentFilter.countActions();
                                    while (i3 < countActions) {
                                        String action = intentFilter.getAction(i3);
                                        i3 = (action.startsWith("android.intent.action.USER_") || action.startsWith("android.intent.action.PACKAGE_") || action.startsWith("android.intent.action.UID_") || action.startsWith("android.intent.action.EXTERNAL_") || action.startsWith("android.bluetooth.")) ? 0 : i3 + 1;
                                        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                                            Slog.wtf("ActivityManager", "System internals registering for " + intentFilter.toLongString() + " with app priority; this will race with apps!", new Throwable());
                                        }
                                        if (priority == 0) {
                                            intentFilter.setPriority(1000);
                                        }
                                    }
                                }
                            }
                            z = true;
                            if (!z) {
                            }
                        }
                        if (!UserHandle.isCore(i6) && !recordForAppLOSP.info.isSystemApp() && this.mEnableModernQueue) {
                            intentFilter.mIntentFilterExt.limitPriority();
                        }
                        Iterator<String> actionsIterator = intentFilter.actionsIterator();
                        if (actionsIterator == null) {
                            ArrayList arrayList3 = new ArrayList(1);
                            arrayList = null;
                            arrayList3.add(null);
                            actionsIterator = arrayList3.iterator();
                        } else {
                            arrayList = null;
                        }
                        Iterator<String> it = actionsIterator;
                        int[] iArr = {-1, UserHandle.getUserId(i6)};
                        boolean z3 = 1;
                        ArrayList arrayList4 = arrayList;
                        while (it.hasNext()) {
                            String next = it.next();
                            ArrayList arrayList5 = arrayList4;
                            for (int i7 = 0; i7 < 2; i7++) {
                                ArrayMap<String, ArrayList<StickyBroadcast>> arrayMap = this.mStickyBroadcasts.get(iArr[i7]);
                                if (arrayMap != null && (arrayList2 = arrayMap.get(next)) != null) {
                                    ArrayList arrayList6 = arrayList5 == null ? new ArrayList() : arrayList5;
                                    arrayList6.addAll(arrayList2);
                                    arrayList5 = arrayList6;
                                }
                            }
                            if (z3 != 0) {
                                try {
                                    z3 = (AppGlobals.getPackageManager().isProtectedBroadcast(next) ? 1 : 0) & z3;
                                } catch (RemoteException e) {
                                    Slog.w("ActivityManager", "Remote exception", e);
                                    z3 = 0;
                                }
                            }
                            arrayList4 = arrayList5;
                            z3 = z3;
                        }
                        if (Process.isSdkSandboxUid(Binder.getCallingUid())) {
                            SdkSandboxManagerLocal sdkSandboxManagerLocal = (SdkSandboxManagerLocal) LocalManagerRegistry.getManager(SdkSandboxManagerLocal.class);
                            if (sdkSandboxManagerLocal == null) {
                                throw new IllegalStateException("SdkSandboxManagerLocal not found when checking whether SDK sandbox uid can register to broadcast receivers.");
                            }
                            if (!sdkSandboxManagerLocal.canRegisterBroadcastReceiver(intentFilter, i4, z3)) {
                                throw new SecurityException("SDK sandbox not allowed to register receiver with the given IntentFilter: " + intentFilter.toLongString());
                            }
                        }
                        boolean z4 = (i4 & 6) != 0;
                        if ((i4 & 2) != 0 && (i4 & 4) != 0) {
                            throw new IllegalArgumentException("Receiver can't specify both RECEIVER_EXPORTED and RECEIVER_NOT_EXPORTEDflag");
                        }
                        boolean isChangeEnabled = CompatChanges.isChangeEnabled(DYNAMIC_RECEIVER_EXPLICIT_EXPORT_REQUIRED, i6);
                        if (((i5 == 0 || (i4 & 4) == 0) ? false : true) && isChangeEnabled) {
                            throw new IllegalArgumentException("Receiver can't specify both RECEIVER_VISIBLE_TO_INSTANT_APPS and RECEIVER_NOT_EXPORTED flag");
                        }
                    } catch (SecurityException e2) {
                        e = e2;
                        this.mActivityManagerServiceExt.collectExceptionStatistics(e, str5);
                        throw e;
                    }
                } catch (Throwable th) {
                    th = th;
                    while (true) {
                        try {
                            break;
                        } catch (Throwable th2) {
                            th = th2;
                        }
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } catch (SecurityException e3) {
            e = e3;
            str5 = str;
        }
    }

    public void unregisterReceiver(IIntentReceiver iIntentReceiver) {
        boolean z;
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slog.v(TAG_BROADCAST, "Unregister receiver: " + iIntentReceiver);
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ReceiverList receiverList = this.mRegisteredReceivers.get(iIntentReceiver.asBinder());
                    if (receiverList != null) {
                        BroadcastRecord broadcastRecord = receiverList.curBroadcast;
                        z = broadcastRecord != null && broadcastRecord.queue.finishReceiverLocked(receiverList.app, broadcastRecord.resultCode, broadcastRecord.resultData, broadcastRecord.resultExtras, broadcastRecord.resultAbort, false);
                        ProcessRecord processRecord = receiverList.app;
                        if (processRecord != null) {
                            processRecord.mReceivers.removeReceiver(receiverList);
                        }
                        removeReceiverLocked(receiverList);
                        if (receiverList.linkedToDeath) {
                            receiverList.linkedToDeath = false;
                            receiverList.receiver.asBinder().unlinkToDeath(receiverList, 0);
                        }
                    } else {
                        z = false;
                    }
                    if (!z) {
                        resetPriorityAfterLockedSection();
                    } else {
                        trimApplicationsLocked(false, 2);
                        resetPriorityAfterLockedSection();
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void removeReceiverLocked(ReceiverList receiverList) {
        this.mRegisteredReceivers.remove(receiverList.receiver.asBinder());
        for (int size = receiverList.size() - 1; size >= 0; size--) {
            this.mReceiverResolver.removeFilter(receiverList.get(size));
        }
    }

    private final void sendPackageBroadcastLocked(int i, String[] strArr, int i2) {
        this.mProcessList.sendPackageBroadcastLocked(i, strArr, i2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public List<ResolveInfo> collectReceiverComponents(Intent intent, String str, int i, int[] iArr, int[] iArr2) {
        List<ResolveInfo> list;
        ActivityManagerService activityManagerService = this;
        int adjustQueryReceiverPmFlags = activityManagerService.mActivityManagerServiceExt.adjustQueryReceiverPmFlags(268436480);
        int length = iArr.length;
        List<ResolveInfo> list2 = null;
        int i2 = 0;
        boolean z = false;
        HashSet hashSet = null;
        while (i2 < length) {
            int i3 = iArr[i2];
            if (i == 2000 && activityManagerService.mUserController.hasUserRestriction("no_debugging_features", i3)) {
                list = list2;
            } else {
                List<ResolveInfo> queryIntentReceivers = activityManagerService.mPackageManagerInt.queryIntentReceivers(intent, str, adjustQueryReceiverPmFlags, i, i3, true);
                if (i3 != 0 && queryIntentReceivers != null) {
                    int i4 = 0;
                    while (i4 < queryIntentReceivers.size()) {
                        if ((queryIntentReceivers.get(i4).activityInfo.flags & AudioFormat.APTX) != 0) {
                            queryIntentReceivers.remove(i4);
                            i4--;
                        }
                        i4++;
                    }
                }
                if (queryIntentReceivers != null) {
                    int size = queryIntentReceivers.size() - 1;
                    while (size >= 0) {
                        int i5 = size;
                        List<ResolveInfo> list3 = queryIntentReceivers;
                        int i6 = i3;
                        List<ResolveInfo> list4 = list2;
                        ComponentAliasResolver.Resolution<ResolveInfo> resolveReceiver = activityManagerService.mComponentAliasResolver.resolveReceiver(intent, queryIntentReceivers.get(size), str, adjustQueryReceiverPmFlags, i3, i, true);
                        if (resolveReceiver == null) {
                            list3.remove(i5);
                        } else if (resolveReceiver.isAlias()) {
                            list3.set(i5, resolveReceiver.getTarget());
                        }
                        size = i5 - 1;
                        list2 = list4;
                        queryIntentReceivers = list3;
                        i3 = i6;
                        activityManagerService = this;
                    }
                }
                List<ResolveInfo> list5 = queryIntentReceivers;
                list = list2;
                list2 = (list5 == null || list5.size() != 0) ? list5 : null;
                if (list == null) {
                    i2++;
                    activityManagerService = this;
                } else if (list2 != null) {
                    if (!z) {
                        for (int i7 = 0; i7 < list.size(); i7++) {
                            ResolveInfo resolveInfo = list.get(i7);
                            if ((resolveInfo.activityInfo.flags & 1073741824) != 0) {
                                ActivityInfo activityInfo = resolveInfo.activityInfo;
                                ComponentName componentName = new ComponentName(activityInfo.packageName, activityInfo.name);
                                if (hashSet == null) {
                                    hashSet = new HashSet();
                                }
                                HashSet hashSet2 = hashSet;
                                hashSet2.add(componentName);
                                hashSet = hashSet2;
                            }
                        }
                        z = true;
                    }
                    for (int i8 = 0; i8 < list2.size(); i8++) {
                        ResolveInfo resolveInfo2 = list2.get(i8);
                        if ((resolveInfo2.activityInfo.flags & 1073741824) != 0) {
                            ActivityInfo activityInfo2 = resolveInfo2.activityInfo;
                            ComponentName componentName2 = new ComponentName(activityInfo2.packageName, activityInfo2.name);
                            HashSet hashSet3 = hashSet == null ? new HashSet() : hashSet;
                            if (!hashSet3.contains(componentName2)) {
                                hashSet3.add(componentName2);
                                list.add(resolveInfo2);
                            }
                            hashSet = hashSet3;
                        } else {
                            list.add(resolveInfo2);
                        }
                    }
                }
            }
            list2 = list;
            i2++;
            activityManagerService = this;
        }
        List<ResolveInfo> list6 = list2;
        if (list6 != null && iArr2 != null) {
            for (int size2 = list6.size() - 1; size2 >= 0; size2--) {
                int appId = UserHandle.getAppId(list6.get(size2).activityInfo.applicationInfo.uid);
                if (appId >= 10000 && Arrays.binarySearch(iArr2, appId) < 0) {
                    list6.remove(size2);
                }
            }
        }
        return list6;
    }

    private void checkBroadcastFromSystem(Intent intent, ProcessRecord processRecord, String str, int i, boolean z, List list) {
        if ((intent.getFlags() & AudioDevice.OUT_SPEAKER_SAFE) != 0) {
            return;
        }
        String action = intent.getAction();
        if (z || "android.intent.action.CLOSE_SYSTEM_DIALOGS".equals(action) || "com.android.intent.action.DISMISS_KEYBOARD_SHORTCUTS".equals(action) || "android.intent.action.MEDIA_BUTTON".equals(action) || "android.intent.action.MEDIA_SCANNER_SCAN_FILE".equals(action) || "com.android.intent.action.SHOW_KEYBOARD_SHORTCUTS".equals(action) || "android.intent.action.MASTER_CLEAR".equals(action) || "android.intent.action.FACTORY_RESET".equals(action) || "android.appwidget.action.APPWIDGET_CONFIGURE".equals(action) || "android.appwidget.action.APPWIDGET_UPDATE".equals(action) || "com.android.omadm.service.CONFIGURATION_UPDATE".equals(action) || "android.text.style.SUGGESTION_PICKED".equals(action) || "android.media.action.OPEN_AUDIO_EFFECT_CONTROL_SESSION".equals(action) || "android.media.action.CLOSE_AUDIO_EFFECT_CONTROL_SESSION".equals(action)) {
            return;
        }
        if (intent.getPackage() != null || intent.getComponent() != null) {
            if (list == null || list.size() == 0) {
                return;
            }
            boolean z2 = true;
            for (int size = list.size() - 1; size >= 0; size--) {
                Object obj = list.get(size);
                if (obj instanceof ResolveInfo) {
                    ActivityInfo activityInfo = ((ResolveInfo) obj).activityInfo;
                    if (activityInfo.exported && activityInfo.permission == null) {
                        z2 = false;
                        break;
                    }
                } else {
                    BroadcastFilter broadcastFilter = (BroadcastFilter) obj;
                    if (broadcastFilter.exported && broadcastFilter.requiredPermission == null) {
                        z2 = false;
                        break;
                    }
                }
            }
            if (z2) {
                return;
            }
        }
        if (processRecord != null) {
            if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                Log.w("ActivityManager", "Sending non-protected broadcast " + action + " from system " + processRecord.toShortString() + " pkg " + str);
                return;
            }
            return;
        }
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Log.w("ActivityManager", "Sending non-protected broadcast " + action + " from system uid " + UserHandle.formatUid(i) + " pkg " + str);
        }
    }

    void enforceBroadcastOptionPermissionsInternal(Bundle bundle, int i) {
        enforceBroadcastOptionPermissionsInternal(BroadcastOptions.fromBundleNullable(bundle), i);
    }

    void enforceBroadcastOptionPermissionsInternal(BroadcastOptions broadcastOptions, int i) {
        if (broadcastOptions == null || i == 1000) {
            return;
        }
        if (broadcastOptions.isAlarmBroadcast()) {
            if (ActivityManagerDebugConfig.DEBUG_BROADCAST_LIGHT) {
                Slog.w("ActivityManager", "Non-system caller " + i + " may not flag broadcast as alarm");
            }
            throw new SecurityException("Non-system callers may not flag broadcasts as alarm");
        }
        if (broadcastOptions.isInteractive()) {
            enforceCallingPermission("android.permission.BROADCAST_OPTION_INTERACTIVE", "setInteractive");
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final int broadcastIntentLocked(ProcessRecord processRecord, String str, String str2, Intent intent, String str3, IIntentReceiver iIntentReceiver, int i, String str4, Bundle bundle, String[] strArr, String[] strArr2, String[] strArr3, int i2, Bundle bundle2, boolean z, boolean z2, int i3, int i4, int i5, int i6, int i7) {
        return broadcastIntentLocked(processRecord, str, str2, intent, str3, null, iIntentReceiver, i, str4, bundle, strArr, strArr2, strArr3, i2, bundle2, z, z2, i3, i4, i5, i6, i7, BackgroundStartPrivileges.NONE, null, null);
    }

    @GuardedBy({"this"})
    final int broadcastIntentLocked(ProcessRecord processRecord, String str, String str2, Intent intent, String str3, ProcessRecord processRecord2, IIntentReceiver iIntentReceiver, int i, String str4, Bundle bundle, String[] strArr, String[] strArr2, String[] strArr3, int i2, Bundle bundle2, boolean z, boolean z2, int i3, int i4, int i5, int i6, int i7, BackgroundStartPrivileges backgroundStartPrivileges, int[] iArr, BiFunction<Integer, Bundle, Bundle> biFunction) {
        int traceBegin = BroadcastQueue.traceBegin("broadcastIntentLockedTraced");
        int broadcastIntentLockedTraced = broadcastIntentLockedTraced(processRecord, str, str2, intent, str3, processRecord2, iIntentReceiver, i, str4, bundle, strArr, strArr2, strArr3, i2, BroadcastOptions.fromBundleNullable(bundle2), z, z2, i3, i4, i5, i6, i7, backgroundStartPrivileges, iArr, biFunction);
        BroadcastQueue.traceEnd(traceBegin);
        return broadcastIntentLockedTraced;
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Code restructure failed: missing block: B:490:0x0752, code lost:
    
        if (r7.equals("android.intent.action.PACKAGES_SUSPENDED") == false) goto L294;
     */
    /* JADX WARN: Failed to find 'out' block for switch in B:141:0x0599. Please report as an issue. */
    /* JADX WARN: Failed to find 'out' block for switch in B:417:0x0776. Please report as an issue. */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:103:0x0374  */
    /* JADX WARN: Removed duplicated region for block: B:110:0x038c  */
    /* JADX WARN: Removed duplicated region for block: B:129:0x0443 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:130:0x0445  */
    /* JADX WARN: Removed duplicated region for block: B:147:0x09c0  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x00c8  */
    /* JADX WARN: Removed duplicated region for block: B:269:0x0d81  */
    /* JADX WARN: Removed duplicated region for block: B:273:0x0d89  */
    /* JADX WARN: Removed duplicated region for block: B:289:0x0dbf A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:291:0x0dc3  */
    /* JADX WARN: Removed duplicated region for block: B:293:0x0dcb  */
    /* JADX WARN: Removed duplicated region for block: B:296:0x0de5 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:300:0x0dd9 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0102  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x016f  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0191  */
    /* JADX WARN: Removed duplicated region for block: B:577:0x0351  */
    /* JADX WARN: Removed duplicated region for block: B:65:0x022e  */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v12, types: [boolean] */
    /* JADX WARN: Type inference failed for: r0v19 */
    /* JADX WARN: Type inference failed for: r15v1 */
    /* JADX WARN: Type inference failed for: r15v11 */
    /* JADX WARN: Type inference failed for: r15v2, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r1v24 */
    /* JADX WARN: Type inference failed for: r1v25, types: [boolean] */
    /* JADX WARN: Type inference failed for: r1v48 */
    /* JADX WARN: Type inference failed for: r3v35, types: [java.lang.StringBuilder] */
    /* JADX WARN: Type inference failed for: r3v45 */
    /* JADX WARN: Type inference failed for: r3v46, types: [int] */
    /* JADX WARN: Type inference failed for: r3v88 */
    /* JADX WARN: Type inference failed for: r71v0, types: [com.android.server.am.ActivityManagerService] */
    @GuardedBy({"this"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    final int broadcastIntentLockedTraced(ProcessRecord processRecord, String str, String str2, Intent intent, String str3, ProcessRecord processRecord2, IIntentReceiver iIntentReceiver, int i, String str4, Bundle bundle, String[] strArr, String[] strArr2, String[] strArr3, int i2, BroadcastOptions broadcastOptions, boolean z, boolean z2, int i3, int i4, int i5, int i6, int i7, BackgroundStartPrivileges backgroundStartPrivileges, int[] iArr, BiFunction<Integer, Bundle, Bundle> biFunction) {
        ProcessRecord processRecord3;
        Intent intent2;
        boolean isInstantApp;
        int[] iArr2;
        int handleIncomingUser;
        long j;
        BackgroundStartPrivileges backgroundStartPrivileges2;
        int appId;
        int i8;
        ProcessRecord processRecord4;
        boolean z3;
        Intent intent3;
        int i9;
        boolean z4;
        int i10;
        int i11;
        int i12;
        boolean z5;
        int i13;
        Intent intent4;
        IIntentReceiver iIntentReceiver2;
        int[] iArr3;
        Intent intent5;
        int i14;
        int i15;
        List<ResolveInfo> list;
        int i16;
        Intent intent6;
        ?? r15;
        int i17;
        List<ResolveInfo> list2;
        List<BroadcastFilter> list3;
        Intent intent7;
        int i18;
        IIntentReceiver iIntentReceiver3;
        int i19;
        int i20;
        int i21;
        ?? r0;
        IIntentReceiver iIntentReceiver4;
        String schemeSpecificPart;
        String[] strArr4;
        int size;
        ResolveInfo resolveInfo;
        BroadcastFilter broadcastFilter;
        int i22;
        int length;
        int i23;
        boolean z6;
        List<BroadcastFilter> queryIntent;
        int i24;
        Intent intent8;
        ArrayMap<String, ArrayList<StickyBroadcast>> arrayMap;
        ArrayList<StickyBroadcast> arrayList;
        char c;
        String str5;
        int i25;
        Intent intent9;
        int i26;
        boolean z7;
        String schemeSpecificPart2;
        String str6;
        String schemeSpecificPart3;
        ApplicationInfo applicationInfo;
        String schemeSpecificPart4;
        boolean z8;
        String schemeSpecificPart5;
        String str7;
        int uidFromIntent;
        UidRecord uidRecordLOSP;
        int i27;
        int i28;
        BackgroundStartPrivileges backgroundStartPrivileges3;
        BroadcastLoopers.addMyLooper();
        if (Process.isSdkSandboxUid(i5)) {
            SdkSandboxManagerLocal sdkSandboxManagerLocal = (SdkSandboxManagerLocal) LocalManagerRegistry.getManager(SdkSandboxManagerLocal.class);
            if (sdkSandboxManagerLocal == null) {
                throw new IllegalStateException("SdkSandboxManagerLocal not found when sending a broadcast from an SDK sandbox uid.");
            }
            if (!sdkSandboxManagerLocal.canSendBroadcast(intent)) {
                throw new SecurityException("Intent " + intent.getAction() + " may not be broadcast from an SDK sandbox uid. Given caller package " + str + " (pid=" + i3 + ", realCallingUid=" + i5 + ", callingUid= " + i4 + ")");
            }
        }
        try {
            if (iIntentReceiver != null && processRecord2 == null) {
                if (iIntentReceiver.asBinder() instanceof BinderProxy) {
                    Slog.wtf("ActivityManager", "Sending broadcast " + intent.getAction() + " with resultTo requires resultToApp", new Throwable());
                } else {
                    processRecord3 = getProcessRecordLocked("system", 1000);
                    intent2 = new Intent(intent);
                    isInstantApp = isInstantApp(processRecord, str, i4);
                    if (isInstantApp) {
                        intent2.setFlags(intent2.getFlags() & (-2097153));
                    }
                    if (i7 == -1 || iArr == null) {
                        iArr2 = iArr;
                    } else {
                        Slog.e("ActivityManager", "broadcastAllowList only applies when sending to individual users. Assuming restrictive whitelist.");
                        iArr2 = new int[0];
                    }
                    intent2.addFlags(16);
                    if (!this.mProcessesReady && (intent2.getFlags() & 33554432) == 0) {
                        intent2.addFlags(1073741824);
                    }
                    if (ActivityManagerDebugConfig.DEBUG_BROADCAST_LIGHT) {
                        String str8 = TAG_BROADCAST;
                        StringBuilder sb = new StringBuilder();
                        sb.append(z2 ? "Broadcast sticky: " : "Broadcast: ");
                        sb.append(intent2);
                        sb.append(" ordered=");
                        sb.append(z);
                        sb.append(" userid=");
                        sb.append(i7);
                        sb.append(" options=");
                        sb.append(broadcastOptions == null ? "null" : broadcastOptions.toBundle());
                        Slog.v(str8, sb.toString());
                    }
                    int[] iArr4 = iArr2;
                    this.mActivityManagerServiceExt.debugBroadcast(TAG_BROADCAST, intent2, z2, z, i7, iIntentReceiver, i3, i4);
                    this.mActivityManagerServiceExt.benchStepCheck(this.mContext, intent2);
                    if (iIntentReceiver != null && !z) {
                        if (!this.mEnableModernQueue) {
                            Slog.w("ActivityManager", "Broadcast " + intent2 + " not ordered but result callback requested!");
                        }
                        if (!UserHandle.isCore(i4)) {
                            String str9 = "Unauthorized unordered resultTo broadcast " + intent2 + " sent from uid " + i4;
                            Slog.w("ActivityManager", str9);
                            throw new SecurityException(str9);
                        }
                    }
                    handleIncomingUser = this.mUserController.handleIncomingUser(i3, i4, i7, true, 0, "broadcast", str);
                    this.mActivityManagerServiceExt.broadcastIntentLocked(intent2, i4, str, handleIncomingUser);
                    if (handleIncomingUser == -1 && !this.mUserController.isUserOrItsParentRunning(handleIncomingUser) && ((i4 != 1000 || (intent2.getFlags() & 33554432) == 0) && !"android.intent.action.ACTION_SHUTDOWN".equals(intent2.getAction()))) {
                        Slog.w("ActivityManager", "Skipping broadcast of " + intent2 + ": user " + handleIncomingUser + " and its parent (if any) are stopped");
                        scheduleCanceledResultTo(processRecord3, iIntentReceiver, intent2, handleIncomingUser, broadcastOptions, i4, str);
                        return -2;
                    }
                    String action = intent2.getAction();
                    if (broadcastOptions == null) {
                        if (broadcastOptions.getTemporaryAppAllowlistDuration() > 0) {
                            i27 = i5;
                            i28 = i6;
                            if (checkComponentPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", i28, i27, -1, true) != 0 && checkComponentPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", i28, i27, -1, true) != 0 && checkComponentPermission("android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND", i28, i27, -1, true) != 0) {
                                String str10 = "Permission Denial: " + intent2.getAction() + " broadcast from " + str + " (pid=" + i3 + ", uid=" + i4 + ") requires android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST or android.permission.START_ACTIVITIES_FROM_BACKGROUND or android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND";
                                Slog.w("ActivityManager", str10);
                                throw new SecurityException(str10);
                            }
                        } else {
                            i27 = i5;
                            i28 = i6;
                        }
                        if (broadcastOptions.isDontSendToRestrictedApps() && !isUidActiveLOSP(i4) && isBackgroundRestrictedNoCheck(i4, str)) {
                            Slog.i("ActivityManager", "Not sending broadcast " + action + " - app " + str + " has background restrictions");
                            return -96;
                        }
                        if (!broadcastOptions.allowsBackgroundActivityStarts()) {
                            backgroundStartPrivileges3 = backgroundStartPrivileges;
                        } else {
                            if (checkComponentPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", i28, i27, -1, true) != 0) {
                                String str11 = "Permission Denial: " + intent2.getAction() + " broadcast from " + str + " (pid=" + i3 + ", uid=" + i4 + ") requires android.permission.START_ACTIVITIES_FROM_BACKGROUND";
                                Slog.w("ActivityManager", str11);
                                throw new SecurityException(str11);
                            }
                            backgroundStartPrivileges3 = BackgroundStartPrivileges.ALLOW_BAL;
                        }
                        j = 0;
                        if (broadcastOptions.getIdForResponseEvent() > 0) {
                            enforcePermission("android.permission.ACCESS_BROADCAST_RESPONSE_STATS", i3, i4, "recordResponseEventWhileInBackground");
                        }
                        backgroundStartPrivileges2 = backgroundStartPrivileges3;
                    } else {
                        j = 0;
                        backgroundStartPrivileges2 = backgroundStartPrivileges;
                    }
                    boolean isProtectedBroadcast = AppGlobals.getPackageManager().isProtectedBroadcast(action);
                    appId = UserHandle.getAppId(i4);
                    if (appId != 0 && appId != 1027 && appId != 1068 && appId != 1073) {
                        switch (appId) {
                            case 1000:
                            case 1001:
                            case 1002:
                                break;
                            default:
                                i8 = i3;
                                processRecord4 = processRecord;
                                z3 = processRecord4 != null && processRecord.isPersistent();
                                break;
                        }
                        if (!z3) {
                            if (isProtectedBroadcast) {
                                String str12 = "Permission Denial: not allowed to send broadcast " + action + " from pid=" + i8 + ", uid=" + i4;
                                Slog.w("ActivityManager", str12);
                                throw new SecurityException(str12);
                            }
                            if ("android.appwidget.action.APPWIDGET_CONFIGURE".equals(action) || "android.appwidget.action.APPWIDGET_UPDATE".equals(action)) {
                                if (str == null) {
                                    String str13 = "Permission Denial: not allowed to send broadcast " + action + " from unknown caller.";
                                    Slog.w("ActivityManager", str13);
                                    throw new SecurityException(str13);
                                }
                                if (intent2.getComponent() != null) {
                                    if (!intent2.getComponent().getPackageName().equals(str)) {
                                        String str14 = "Permission Denial: not allowed to send broadcast " + action + " to " + intent2.getComponent().getPackageName() + " from " + str;
                                        Slog.w("ActivityManager", str14);
                                        throw new SecurityException(str14);
                                    }
                                } else {
                                    intent2.setPackage(str);
                                }
                            }
                        }
                        if (!this.mActivityManagerServiceExt.preventSendBroadcast(intent2)) {
                            return 0;
                        }
                        if (action != null) {
                            if (getBackgroundLaunchBroadcasts().contains(action)) {
                                if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                                    Slog.i("ActivityManager", "Broadcast action " + action + " forcing include-background");
                                }
                                intent2.addFlags(16777216);
                            }
                            switch (action.hashCode()) {
                                case -2098526293:
                                    if (action.equals("android.hardware.action.NEW_VIDEO")) {
                                        c = 0;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case -1749672628:
                                    if (action.equals("android.intent.action.UID_REMOVED")) {
                                        c = 1;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case -1403934493:
                                    if (action.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")) {
                                        c = 2;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case -1338021860:
                                    if (action.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE")) {
                                        c = 3;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case -1001645458:
                                    if (action.equals("android.intent.action.PACKAGES_SUSPENDED")) {
                                        c = 4;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case -810471698:
                                    if (action.equals("android.intent.action.PACKAGE_REPLACED")) {
                                        c = 5;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case -403228793:
                                    if (action.equals("android.intent.action.CLOSE_SYSTEM_DIALOGS")) {
                                        c = 6;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 172491798:
                                    if (action.equals("android.intent.action.PACKAGE_CHANGED")) {
                                        c = 7;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 183904262:
                                    if (action.equals("android.intent.action.PROXY_CHANGE")) {
                                        c = '\b';
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 267468725:
                                    if (action.equals("android.intent.action.PACKAGE_DATA_CLEARED")) {
                                        c = '\t';
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 502473491:
                                    if (action.equals("android.intent.action.TIMEZONE_CHANGED")) {
                                        c = '\n';
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 505380757:
                                    if (action.equals("android.intent.action.TIME_SET")) {
                                        c = 11;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 525384130:
                                    if (action.equals("android.intent.action.PACKAGE_REMOVED")) {
                                        c = '\f';
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 555021408:
                                    if (action.equals("com.android.launcher.action.INSTALL_SHORTCUT")) {
                                        c = '\r';
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 789737439:
                                    if (action.equals("android.intent.action.PRE_BOOT_COMPLETED")) {
                                        c = 14;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 852070077:
                                    if (action.equals("android.intent.action.MEDIA_SCANNER_SCAN_FILE")) {
                                        c = 15;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 920338478:
                                    if (action.equals("android.hardware.action.NEW_PICTURE")) {
                                        c = 16;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 1290767157:
                                    if (action.equals("android.intent.action.PACKAGES_UNSUSPENDED")) {
                                        c = 17;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 1544582882:
                                    if (action.equals("android.intent.action.PACKAGE_ADDED")) {
                                        c = 18;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 1664215986:
                                    if (action.equals("android.net.action.CLEAR_DNS_CACHE")) {
                                        c = 19;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 1862858502:
                                    if (action.equals("android.security.action.TRUST_STORE_CHANGED")) {
                                        c = 20;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                default:
                                    c = 65535;
                                    break;
                            }
                            switch (c) {
                                case 0:
                                case 16:
                                    str5 = action;
                                    i25 = handleIncomingUser;
                                    intent3 = intent2;
                                    i9 = 1073741824;
                                    z4 = false;
                                    i10 = i8;
                                    intent3.addFlags(1073741824);
                                    z8 = z4;
                                    str7 = str5;
                                    if ((!"android.intent.action.PACKAGE_ADDED".equals(str7) || "android.intent.action.PACKAGE_REMOVED".equals(str7) || "android.intent.action.PACKAGE_REPLACED".equals(str7)) && (uidFromIntent = getUidFromIntent(intent3)) != -1 && (uidRecordLOSP = this.mProcessList.getUidRecordLOSP(uidFromIntent)) != null) {
                                        uidRecordLOSP.updateHasInternetPermission();
                                    }
                                    i11 = i6;
                                    i12 = i25;
                                    z5 = z8;
                                    break;
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 7:
                                case '\f':
                                case 17:
                                    char c2 = 3;
                                    if (checkComponentPermission("android.permission.BROADCAST_PACKAGE_REMOVED", i8, i4, -1, true) != 0) {
                                        String str15 = "Permission Denial: " + intent2.getAction() + " broadcast from " + str + " (pid=" + i3 + ", uid=" + i4 + ") requires android.permission.BROADCAST_PACKAGE_REMOVED";
                                        Slog.w("ActivityManager", str15);
                                        throw new SecurityException(str15);
                                    }
                                    switch (action.hashCode()) {
                                        case -1749672628:
                                            if (action.equals("android.intent.action.UID_REMOVED")) {
                                                c2 = 0;
                                                break;
                                            }
                                            c2 = 65535;
                                            break;
                                        case -1403934493:
                                            if (action.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")) {
                                                c2 = 1;
                                                break;
                                            }
                                            c2 = 65535;
                                            break;
                                        case -1338021860:
                                            if (action.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE")) {
                                                c2 = 2;
                                                break;
                                            }
                                            c2 = 65535;
                                            break;
                                        case -1001645458:
                                            break;
                                        case 172491798:
                                            if (action.equals("android.intent.action.PACKAGE_CHANGED")) {
                                                c2 = 4;
                                                break;
                                            }
                                            c2 = 65535;
                                            break;
                                        case 525384130:
                                            if (action.equals("android.intent.action.PACKAGE_REMOVED")) {
                                                c2 = 5;
                                                break;
                                            }
                                            c2 = 65535;
                                            break;
                                        case 1290767157:
                                            if (action.equals("android.intent.action.PACKAGES_UNSUSPENDED")) {
                                                c2 = 6;
                                                break;
                                            }
                                            c2 = 65535;
                                            break;
                                        default:
                                            c2 = 65535;
                                            break;
                                    }
                                    switch (c2) {
                                        case 0:
                                            str5 = action;
                                            i25 = handleIncomingUser;
                                            intent3 = intent2;
                                            int uidFromIntent2 = getUidFromIntent(intent3);
                                            if (uidFromIntent2 >= 0) {
                                                this.mBatteryStatsService.removeUid(uidFromIntent2);
                                                z4 = false;
                                                if (intent3.getBooleanExtra("android.intent.extra.REPLACING", false)) {
                                                    this.mAppOpsService.resetAllModes(UserHandle.getUserId(uidFromIntent2), intent3.getStringExtra("android.intent.extra.PACKAGE_NAME"));
                                                } else {
                                                    this.mAppOpsService.uidRemoved(uidFromIntent2);
                                                }
                                                i10 = i3;
                                                i9 = 1073741824;
                                                z8 = z4;
                                                str7 = str5;
                                                if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                                    break;
                                                }
                                                uidRecordLOSP.updateHasInternetPermission();
                                                i11 = i6;
                                                i12 = i25;
                                                z5 = z8;
                                                break;
                                            }
                                            z4 = false;
                                            i10 = i3;
                                            i9 = 1073741824;
                                            z8 = z4;
                                            str7 = str5;
                                            if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                            }
                                            uidRecordLOSP.updateHasInternetPermission();
                                            i11 = i6;
                                            i12 = i25;
                                            z5 = z8;
                                        case 1:
                                            str5 = action;
                                            Intent intent10 = intent2;
                                            String[] stringArrayExtra = intent10.getStringArrayExtra("android.intent.extra.changed_package_list");
                                            if (stringArrayExtra == null || stringArrayExtra.length <= 0) {
                                                i25 = handleIncomingUser;
                                                intent3 = intent10;
                                            } else {
                                                int i29 = 0;
                                                while (i29 < stringArrayExtra.length) {
                                                    forceStopPackageLocked(stringArrayExtra[i29], -1, false, true, true, false, false, handleIncomingUser, "storage unmount");
                                                    i29++;
                                                    intent10 = intent10;
                                                    stringArrayExtra = stringArrayExtra;
                                                }
                                                intent3 = intent10;
                                                this.mAtmInternal.cleanupRecentTasksForUser(-1);
                                                i25 = handleIncomingUser;
                                                sendPackageBroadcastLocked(1, stringArrayExtra, i25);
                                            }
                                            z4 = false;
                                            i10 = i3;
                                            i9 = 1073741824;
                                            z8 = z4;
                                            str7 = str5;
                                            if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                            }
                                            uidRecordLOSP.updateHasInternetPermission();
                                            i11 = i6;
                                            i12 = i25;
                                            z5 = z8;
                                            break;
                                        case 2:
                                            str5 = action;
                                            intent9 = intent2;
                                            i26 = handleIncomingUser;
                                            z7 = true;
                                            this.mAtmInternal.cleanupRecentTasksForUser(-1);
                                            i25 = i26;
                                            intent3 = intent9;
                                            z4 = false;
                                            i10 = i3;
                                            i9 = 1073741824;
                                            z8 = z4;
                                            str7 = str5;
                                            if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                            }
                                            uidRecordLOSP.updateHasInternetPermission();
                                            i11 = i6;
                                            i12 = i25;
                                            z5 = z8;
                                            break;
                                        case 3:
                                        case 6:
                                            str5 = action;
                                            intent9 = intent2;
                                            i26 = handleIncomingUser;
                                            z7 = true;
                                            this.mAtmInternal.onPackagesSuspendedChanged(intent9.getStringArrayExtra("android.intent.extra.changed_package_list"), "android.intent.action.PACKAGES_SUSPENDED".equals(intent9.getAction()), intent9.getIntExtra("android.intent.extra.user_handle", -10000));
                                            i25 = i26;
                                            intent3 = intent9;
                                            z4 = false;
                                            i10 = i3;
                                            i9 = 1073741824;
                                            z8 = z4;
                                            str7 = str5;
                                            if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                            }
                                            uidRecordLOSP.updateHasInternetPermission();
                                            i11 = i6;
                                            i12 = i25;
                                            z5 = z8;
                                            break;
                                        case 4:
                                        case 5:
                                            Uri data = intent2.getData();
                                            if (data != null && (schemeSpecificPart2 = data.getSchemeSpecificPart()) != null) {
                                                boolean equals = "android.intent.action.PACKAGE_REMOVED".equals(action);
                                                boolean booleanExtra = intent2.getBooleanExtra("android.intent.extra.REPLACING", false);
                                                boolean z9 = !intent2.getBooleanExtra("android.intent.extra.DONT_KILL_APP", false);
                                                boolean z10 = equals && !booleanExtra;
                                                if (equals) {
                                                    if (z9) {
                                                        str5 = action;
                                                        i26 = handleIncomingUser;
                                                        forceStopPackageLocked(schemeSpecificPart2, UserHandle.getAppId(intent2.getIntExtra("android.intent.extra.UID", -1)), false, true, true, false, z10, i26, "pkg removed");
                                                        str6 = schemeSpecificPart2;
                                                        this.mActivityManagerServiceExt.checkAndRemoveInstallKillObj(this.mHandler, str6);
                                                        getPackageManagerInternal().onPackageProcessKilledForUninstall(str6);
                                                        intent9 = intent2;
                                                    } else {
                                                        str6 = schemeSpecificPart2;
                                                        str5 = action;
                                                        intent9 = intent2;
                                                        i26 = handleIncomingUser;
                                                        forceStopAppZygoteLocked(str6, UserHandle.getAppId(intent9.getIntExtra("android.intent.extra.UID", -1)), i26);
                                                    }
                                                    sendPackageBroadcastLocked(z9 ? 0 : 2, new String[]{str6}, i26);
                                                    if (z10) {
                                                        z7 = true;
                                                        this.mUgmInternal.removeUriPermissionsForPackage(str6, i26, true, false);
                                                        this.mAtmInternal.removeRecentTasksByPackageName(str6, i26);
                                                        this.mServices.forceStopPackageLocked(str6, i26);
                                                        this.mAtmInternal.onPackageUninstalled(str6, i26);
                                                        this.mBatteryStatsService.notePackageUninstalled(str6);
                                                        this.mActivityManagerServiceExt.clearCustomUIMode(str6, i26);
                                                    } else {
                                                        z7 = true;
                                                    }
                                                } else {
                                                    str5 = action;
                                                    intent9 = intent2;
                                                    i26 = handleIncomingUser;
                                                    z7 = true;
                                                    if (z9) {
                                                        int i30 = booleanExtra ? 16 : 15;
                                                        int intExtra = intent9.getIntExtra("android.intent.extra.UID", -1);
                                                        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                                                        boostPriorityForProcLockedSection();
                                                        synchronized (activityManagerGlobalLock) {
                                                            try {
                                                                this.mProcessList.killPackageProcessesLSP(schemeSpecificPart2, UserHandle.getAppId(intExtra), i26, -10000, i30, 0, "change " + schemeSpecificPart2);
                                                            } catch (Throwable th) {
                                                                resetPriorityAfterProcLockedSection();
                                                                throw th;
                                                            }
                                                        }
                                                        resetPriorityAfterProcLockedSection();
                                                    }
                                                    cleanupDisabledPackageComponentsLocked(schemeSpecificPart2, i26, intent9.getStringArrayExtra("android.intent.extra.changed_component_name_list"));
                                                    this.mServices.schedulePendingServiceStartLocked(schemeSpecificPart2, i26);
                                                }
                                                i25 = i26;
                                                intent3 = intent9;
                                                z4 = false;
                                                i10 = i3;
                                                i9 = 1073741824;
                                                z8 = z4;
                                                str7 = str5;
                                                if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                                }
                                                uidRecordLOSP.updateHasInternetPermission();
                                                i11 = i6;
                                                i12 = i25;
                                                z5 = z8;
                                            } else {
                                                str5 = action;
                                                i25 = handleIncomingUser;
                                                intent3 = intent2;
                                                z4 = false;
                                                i10 = i3;
                                                i9 = 1073741824;
                                                z8 = z4;
                                                str7 = str5;
                                                if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                                }
                                                uidRecordLOSP.updateHasInternetPermission();
                                                i11 = i6;
                                                i12 = i25;
                                                z5 = z8;
                                                break;
                                            }
                                            break;
                                        default:
                                            str5 = action;
                                            i25 = handleIncomingUser;
                                            intent3 = intent2;
                                            z4 = false;
                                            i10 = i3;
                                            i9 = 1073741824;
                                            z8 = z4;
                                            str7 = str5;
                                            if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                            }
                                            uidRecordLOSP.updateHasInternetPermission();
                                            i11 = i6;
                                            i12 = i25;
                                            z5 = z8;
                                            break;
                                    }
                                    break;
                                case 5:
                                    Uri data2 = intent2.getData();
                                    if (data2 != null && (schemeSpecificPart3 = data2.getSchemeSpecificPart()) != null) {
                                        try {
                                            applicationInfo = AppGlobals.getPackageManager().getApplicationInfo(schemeSpecificPart3, 1024L, handleIncomingUser);
                                        } catch (RemoteException unused) {
                                            applicationInfo = null;
                                        }
                                        if (applicationInfo == null) {
                                            Slog.w("ActivityManager", "Dropping ACTION_PACKAGE_REPLACED for non-existent pkg: ssp=" + schemeSpecificPart3 + " data=" + data2);
                                            scheduleCanceledResultTo(processRecord3, iIntentReceiver, intent2, handleIncomingUser, broadcastOptions, i4, str);
                                            return 0;
                                        }
                                        updateAssociationForApp(applicationInfo);
                                        this.mAtmInternal.onPackageReplaced(applicationInfo);
                                        this.mServices.updateServiceApplicationInfoLocked(applicationInfo);
                                        sendPackageBroadcastLocked(3, new String[]{schemeSpecificPart3}, handleIncomingUser);
                                    }
                                    str5 = action;
                                    i25 = handleIncomingUser;
                                    intent3 = intent2;
                                    i9 = 1073741824;
                                    z4 = false;
                                    i10 = i8;
                                    z8 = z4;
                                    str7 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    i11 = i6;
                                    i12 = i25;
                                    z5 = z8;
                                    break;
                                case 6:
                                    if (!this.mAtmInternal.checkCanCloseSystemDialogs(i8, i4, str)) {
                                        scheduleCanceledResultTo(processRecord3, iIntentReceiver, intent2, handleIncomingUser, broadcastOptions, i4, str);
                                        return 0;
                                    }
                                    str5 = action;
                                    i25 = handleIncomingUser;
                                    intent3 = intent2;
                                    i9 = 1073741824;
                                    z4 = false;
                                    i10 = i8;
                                    z8 = z4;
                                    str7 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    i11 = i6;
                                    i12 = i25;
                                    z5 = z8;
                                    break;
                                case '\b':
                                    MainHandler mainHandler = this.mHandler;
                                    mainHandler.sendMessage(mainHandler.obtainMessage(29));
                                    str5 = action;
                                    i25 = handleIncomingUser;
                                    intent3 = intent2;
                                    i9 = 1073741824;
                                    z4 = false;
                                    i10 = i8;
                                    z8 = z4;
                                    str7 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    i11 = i6;
                                    i12 = i25;
                                    z5 = z8;
                                    break;
                                case '\t':
                                    Uri data3 = intent2.getData();
                                    if (data3 != null && (schemeSpecificPart4 = data3.getSchemeSpecificPart()) != null) {
                                        this.mAtmInternal.onPackageDataCleared(schemeSpecificPart4, handleIncomingUser);
                                        this.mActivityManagerServiceExt.clearCustomUIMode(schemeSpecificPart4, handleIncomingUser);
                                    }
                                    str5 = action;
                                    i25 = handleIncomingUser;
                                    intent3 = intent2;
                                    i9 = 1073741824;
                                    z4 = false;
                                    i10 = i8;
                                    z8 = z4;
                                    str7 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    i11 = i6;
                                    i12 = i25;
                                    z5 = z8;
                                    break;
                                case '\n':
                                    this.mHandler.sendEmptyMessage(13);
                                    str5 = action;
                                    i25 = handleIncomingUser;
                                    intent3 = intent2;
                                    i9 = 1073741824;
                                    z4 = false;
                                    i10 = i8;
                                    z8 = z4;
                                    str7 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    i11 = i6;
                                    i12 = i25;
                                    z5 = z8;
                                    break;
                                case 11:
                                    int intExtra2 = intent2.getIntExtra("android.intent.extra.TIME_PREF_24_HOUR_FORMAT", -1);
                                    if (intExtra2 != -1) {
                                        this.mHandler.sendMessage(this.mHandler.obtainMessage(41, intExtra2, 0));
                                    }
                                    this.mBatteryStatsService.noteCurrentTimeChanged();
                                    str5 = action;
                                    i25 = handleIncomingUser;
                                    intent3 = intent2;
                                    i9 = 1073741824;
                                    z4 = false;
                                    i10 = i8;
                                    z8 = z4;
                                    str7 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    i11 = i6;
                                    i12 = i25;
                                    z5 = z8;
                                    break;
                                case '\r':
                                    Log.w("ActivityManager", "Broadcast " + action + " no longer supported. It will not be delivered.");
                                    scheduleCanceledResultTo(processRecord3, iIntentReceiver, intent2, handleIncomingUser, broadcastOptions, i4, str);
                                    return 0;
                                case 14:
                                    str5 = action;
                                    i25 = handleIncomingUser;
                                    intent3 = intent2;
                                    i9 = 1073741824;
                                    z4 = false;
                                    z8 = true;
                                    i10 = i8;
                                    str7 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    i11 = i6;
                                    i12 = i25;
                                    z5 = z8;
                                    break;
                                case 15:
                                    UserManagerInternal userManagerInternal = (UserManagerInternal) LocalServices.getService(UserManagerInternal.class);
                                    UserInfo userInfo = userManagerInternal.getUserInfo(handleIncomingUser);
                                    if (userInfo != null && userInfo.isCloneProfile()) {
                                        str5 = action;
                                        i25 = userManagerInternal.getProfileParentId(handleIncomingUser);
                                        intent3 = intent2;
                                        i9 = 1073741824;
                                        z4 = false;
                                        z8 = false;
                                        i10 = i8;
                                        str7 = str5;
                                        if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                        }
                                        uidRecordLOSP.updateHasInternetPermission();
                                        i11 = i6;
                                        i12 = i25;
                                        z5 = z8;
                                        break;
                                    }
                                    str5 = action;
                                    i25 = handleIncomingUser;
                                    intent3 = intent2;
                                    i9 = 1073741824;
                                    z4 = false;
                                    i10 = i8;
                                    z8 = z4;
                                    str7 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    i11 = i6;
                                    i12 = i25;
                                    z5 = z8;
                                    break;
                                case 18:
                                    Uri data4 = intent2.getData();
                                    if (data4 != null && (schemeSpecificPart5 = data4.getSchemeSpecificPart()) != null) {
                                        this.mAtmInternal.onPackageAdded(schemeSpecificPart5, intent2.getBooleanExtra("android.intent.extra.REPLACING", false));
                                        try {
                                            ApplicationInfo applicationInfo2 = AppGlobals.getPackageManager().getApplicationInfo(schemeSpecificPart5, 1024L, 0);
                                            this.mBatteryStatsService.notePackageInstalled(schemeSpecificPart5, applicationInfo2 != null ? applicationInfo2.longVersionCode : j);
                                        } catch (RemoteException unused2) {
                                        }
                                        str5 = action;
                                        i25 = handleIncomingUser;
                                        intent3 = intent2;
                                        i9 = 1073741824;
                                        z4 = false;
                                        i10 = i8;
                                        z8 = z4;
                                        str7 = str5;
                                        if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                        }
                                        uidRecordLOSP.updateHasInternetPermission();
                                        i11 = i6;
                                        i12 = i25;
                                        z5 = z8;
                                        break;
                                    }
                                    str5 = action;
                                    i25 = handleIncomingUser;
                                    intent3 = intent2;
                                    i9 = 1073741824;
                                    z4 = false;
                                    i10 = i8;
                                    z8 = z4;
                                    str7 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    i11 = i6;
                                    i12 = i25;
                                    z5 = z8;
                                    break;
                                case 19:
                                    this.mHandler.sendEmptyMessage(28);
                                    str5 = action;
                                    i25 = handleIncomingUser;
                                    intent3 = intent2;
                                    i9 = 1073741824;
                                    z4 = false;
                                    i10 = i8;
                                    z8 = z4;
                                    str7 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    i11 = i6;
                                    i12 = i25;
                                    z5 = z8;
                                    break;
                                case 20:
                                    this.mHandler.sendEmptyMessage(63);
                                    str5 = action;
                                    i25 = handleIncomingUser;
                                    intent3 = intent2;
                                    i9 = 1073741824;
                                    z4 = false;
                                    i10 = i8;
                                    z8 = z4;
                                    str7 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    i11 = i6;
                                    i12 = i25;
                                    z5 = z8;
                                    break;
                                default:
                                    str5 = action;
                                    i25 = handleIncomingUser;
                                    intent3 = intent2;
                                    i9 = 1073741824;
                                    z4 = false;
                                    i10 = i8;
                                    z8 = z4;
                                    str7 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str7)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    i11 = i6;
                                    i12 = i25;
                                    z5 = z8;
                                    break;
                            }
                        } else {
                            intent3 = intent2;
                            i9 = 1073741824;
                            z4 = false;
                            i10 = i8;
                            i11 = i6;
                            i12 = handleIncomingUser;
                            z5 = false;
                        }
                        int realProcessStateLocked = getRealProcessStateLocked(processRecord4, i11);
                        if (!z2) {
                            i13 = i9;
                            intent4 = intent3;
                            iIntentReceiver2 = iIntentReceiver;
                        } else {
                            if (checkPermission("android.permission.BROADCAST_STICKY", i10, i4) != 0) {
                                String str16 = "Permission Denial: broadcastIntent() requesting a sticky broadcast from pid=" + i10 + ", uid=" + i4 + " requires android.permission.BROADCAST_STICKY";
                                Slog.w("ActivityManager", str16);
                                throw new SecurityException(str16);
                            }
                            i13 = i9;
                            if (strArr != null && strArr.length > 0) {
                                Slog.w("ActivityManager", "Can't broadcast sticky intent " + intent3 + " and enforce permissions " + Arrays.toString(strArr));
                                scheduleCanceledResultTo(processRecord3, iIntentReceiver, intent3, i12, broadcastOptions, i4, str);
                                return -1;
                            }
                            if (intent3.getComponent() != null) {
                                throw new SecurityException("Sticky broadcasts can't target a specific component");
                            }
                            if (i12 != -1 && (arrayMap = this.mStickyBroadcasts.get(-1)) != null && (arrayList = arrayMap.get(intent3.getAction())) != null) {
                                int size2 = arrayList.size();
                                for (?? r3 = z4; r3 < size2; r3++) {
                                    if (intent3.filterEquals(arrayList.get(r3).intent)) {
                                        throw new IllegalArgumentException("Sticky broadcast " + intent3 + " for user " + i12 + " conflicts with existing global broadcast");
                                    }
                                }
                            }
                            ArrayMap<String, ArrayList<StickyBroadcast>> arrayMap2 = this.mStickyBroadcasts.get(i12);
                            if (arrayMap2 == null) {
                                arrayMap2 = new ArrayMap<>();
                                this.mStickyBroadcasts.put(i12, arrayMap2);
                            }
                            ArrayList<StickyBroadcast> arrayList2 = arrayMap2.get(intent3.getAction());
                            if (arrayList2 == null) {
                                arrayList2 = new ArrayList<>();
                                arrayMap2.put(intent3.getAction(), arrayList2);
                            }
                            boolean calculateUrgent = BroadcastRecord.calculateUrgent(intent3, broadcastOptions);
                            intent4 = intent3;
                            iIntentReceiver2 = iIntentReceiver;
                            boolean calculateDeferUntilActive = BroadcastRecord.calculateDeferUntilActive(i4, broadcastOptions, iIntentReceiver2, z, calculateUrgent);
                            int size3 = arrayList2.size();
                            int i31 = 0;
                            while (true) {
                                if (i31 < size3) {
                                    if (intent4.filterEquals(arrayList2.get(i31).intent)) {
                                        arrayList2.set(i31, StickyBroadcast.create(new Intent(intent4), calculateDeferUntilActive, i4, realProcessStateLocked));
                                    } else {
                                        i31++;
                                    }
                                }
                            }
                            if (i31 >= size3) {
                                arrayList2.add(StickyBroadcast.create(new Intent(intent4), calculateDeferUntilActive, i4, realProcessStateLocked));
                            }
                        }
                        if (i12 == -1) {
                            iArr3 = this.mUserController.getStartedUserArray();
                        } else {
                            iArr3 = new int[]{i12};
                        }
                        int traceBegin = BroadcastQueue.traceBegin("queryReceivers");
                        if ((intent4.getFlags() & i13) == 0) {
                            intent5 = intent4;
                            i14 = realProcessStateLocked;
                            i15 = i12;
                            list = this.mActivityManagerServiceExt.collectReceivers(collectReceiverComponents(intent4, str3, i4, iArr3, iArr4), intent5, str3, i4, iArr3, iArr4);
                        } else {
                            intent5 = intent4;
                            i14 = realProcessStateLocked;
                            i15 = i12;
                            list = null;
                        }
                        if (intent5.getComponent() == null) {
                            PackageDataSnapshot snapshot = getPackageManagerInternal().snapshot();
                            if (i15 == -1 && i4 == 2000) {
                                List<BroadcastFilter> list4 = null;
                                int i32 = 0;
                                while (i32 < iArr3.length) {
                                    if (this.mUserController.hasUserRestriction("no_debugging_features", iArr3[i32])) {
                                        i24 = i15;
                                        intent8 = intent5;
                                    } else {
                                        i24 = i15;
                                        intent8 = intent5;
                                        List<BroadcastFilter> queryIntent2 = this.mReceiverResolver.queryIntent(snapshot, intent5, str3, false, iArr3[i32]);
                                        if (list4 == null) {
                                            list4 = queryIntent2;
                                        } else if (queryIntent2 != null) {
                                            list4.addAll(queryIntent2);
                                        }
                                    }
                                    i32++;
                                    intent5 = intent8;
                                    i15 = i24;
                                }
                                i16 = i15;
                                intent6 = intent5;
                                z6 = true;
                                i17 = 0;
                                queryIntent = list4;
                            } else {
                                i16 = i15;
                                intent6 = intent5;
                                z6 = true;
                                i17 = 0;
                                queryIntent = this.mReceiverResolver.queryIntent(snapshot, intent6, str3, false, i16);
                            }
                            list2 = list;
                            list3 = this.mActivityManagerServiceExt.collectReceivers(snapshot, intent6, i4, i16, iArr3, this.mReceiverResolver, str3, queryIntent);
                            r15 = z6;
                        } else {
                            i16 = i15;
                            intent6 = intent5;
                            r15 = 1;
                            i17 = 0;
                            list2 = list;
                            list3 = null;
                        }
                        BroadcastQueue.traceEnd(traceBegin);
                        ?? r1 = (intent6.getFlags() & AudioFormat.APTX) != 0 ? r15 : i17;
                        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                            Slog.v(TAG_BROADCAST, "Enqueueing broadcast: " + intent6.getAction() + " replacePending=" + r1);
                        }
                        if (list3 != null && iArr4 != null) {
                            for (int size4 = list3.size() - r15; size4 >= 0; size4--) {
                                int appId2 = UserHandle.getAppId(list3.get(size4).owningUid);
                                if (appId2 >= 10000 && Arrays.binarySearch(iArr4, appId2) < 0) {
                                    list3.remove(size4);
                                }
                            }
                        }
                        filterNonExportedComponents(intent6, i4, i3, list3, this.mPlatformCompat, str, str3);
                        int size5 = list3 != null ? list3.size() : i17;
                        if (z || size5 <= 0 || this.mEnableModernQueue) {
                            intent7 = intent6;
                            i18 = i4;
                            iIntentReceiver3 = iIntentReceiver2;
                            i19 = r15;
                            i20 = i17;
                        } else {
                            if (z3) {
                                checkBroadcastFromSystem(intent6, processRecord, str, i4, isProtectedBroadcast, list3);
                            }
                            intent7 = intent6;
                            BroadcastQueue broadcastQueueForIntent = broadcastQueueForIntent(i4, intent7, r15);
                            i18 = i4;
                            i20 = i17;
                            iIntentReceiver3 = iIntentReceiver2;
                            i19 = r15;
                            BroadcastRecord broadcastRecord = new BroadcastRecord(broadcastQueueForIntent, intent7, processRecord, str, str2, i3, i4, isInstantApp, str3, strArr, strArr2, strArr3, i2, broadcastOptions, list3, processRecord3, iIntentReceiver, i, str4, bundle, z, z2, false, i16, backgroundStartPrivileges2, z5, biFunction, i14);
                            this.mActivityManagerServiceExt.filterReceiverBeforeEnqueue(broadcastRecord);
                            if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                                Slog.v(TAG_BROADCAST, "Enqueueing parallel broadcast " + broadcastRecord);
                            }
                            broadcastQueueForIntent.enqueueBroadcastLocked(broadcastRecord);
                            list3 = null;
                            size5 = i20;
                        }
                        if (list2 == null) {
                            i21 = i20;
                        } else if ("android.intent.action.PACKAGE_ADDED".equals(intent7.getAction()) || "android.intent.action.PACKAGE_RESTARTED".equals(intent7.getAction()) || "android.intent.action.PACKAGE_DATA_CLEARED".equals(intent7.getAction())) {
                            Uri data5 = intent7.getData();
                            if (data5 != null && (schemeSpecificPart = data5.getSchemeSpecificPart()) != null) {
                                strArr4 = new String[]{schemeSpecificPart};
                                if (strArr4 != null && strArr4.length > 0) {
                                    length = strArr4.length;
                                    for (i23 = i20; i23 < length; i23++) {
                                        String str17 = strArr4[i23];
                                        if (str17 != null) {
                                            int size6 = list2.size();
                                            int i33 = i20;
                                            while (i33 < size6) {
                                                if (list2.get(i33).activityInfo.packageName.equals(str17)) {
                                                    list2.remove(i33);
                                                    i33--;
                                                    size6--;
                                                }
                                                i33 += i19;
                                            }
                                        }
                                    }
                                }
                                size = list2.size();
                                resolveInfo = null;
                                broadcastFilter = null;
                                i22 = i20;
                                i21 = i22;
                                while (i22 < size && i21 < size5) {
                                    if (resolveInfo == null) {
                                        resolveInfo = list2.get(i22);
                                    }
                                    if (broadcastFilter == null) {
                                        broadcastFilter = list3.get(i21);
                                    }
                                    if (broadcastFilter.getPriority() < resolveInfo.priority) {
                                        list2.add(i22, broadcastFilter);
                                        i21++;
                                        i22++;
                                        size++;
                                        broadcastFilter = null;
                                    } else {
                                        i22++;
                                        resolveInfo = null;
                                    }
                                }
                            }
                            strArr4 = null;
                            if (strArr4 != null) {
                                length = strArr4.length;
                                while (i23 < length) {
                                }
                            }
                            size = list2.size();
                            resolveInfo = null;
                            broadcastFilter = null;
                            i22 = i20;
                            i21 = i22;
                            while (i22 < size) {
                                if (resolveInfo == null) {
                                }
                                if (broadcastFilter == null) {
                                }
                                if (broadcastFilter.getPriority() < resolveInfo.priority) {
                                }
                            }
                        } else {
                            if ("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE".equals(intent7.getAction())) {
                                strArr4 = intent7.getStringArrayExtra("android.intent.extra.changed_package_list");
                                if (strArr4 != null) {
                                }
                                size = list2.size();
                                resolveInfo = null;
                                broadcastFilter = null;
                                i22 = i20;
                                i21 = i22;
                                while (i22 < size) {
                                }
                            }
                            strArr4 = null;
                            if (strArr4 != null) {
                            }
                            size = list2.size();
                            resolveInfo = null;
                            broadcastFilter = null;
                            i22 = i20;
                            i21 = i22;
                            while (i22 < size) {
                            }
                        }
                        while (i21 < size5) {
                            if (list2 == null) {
                                list2 = new ArrayList();
                            }
                            list2.add(list3.get(i21));
                            i21++;
                        }
                        if (z3) {
                            r0 = i19;
                            iIntentReceiver4 = iIntentReceiver3;
                            checkBroadcastFromSystem(intent7, processRecord, str, i4, isProtectedBroadcast, list2);
                        } else {
                            r0 = i19;
                            iIntentReceiver4 = iIntentReceiver3;
                        }
                        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                            Slog.v(TAG_BROADCAST, "receivers: " + list2 + " resultTo " + iIntentReceiver4);
                        }
                        if ((list2 != null && list2.size() > 0) || iIntentReceiver4 != null) {
                            BroadcastQueue broadcastQueueForIntent2 = broadcastQueueForIntent(i18, intent7, r0);
                            filterNonExportedComponents(intent7, i4, i3, list2, this.mPlatformCompat, str, str3);
                            List adjustQueueOrderedBroadcastLocked = this.mActivityManagerServiceExt.adjustQueueOrderedBroadcastLocked(broadcastQueueForIntent2, intent7, processRecord, str, i3, i4, isInstantApp, str3, strArr, strArr2, strArr3, i2, broadcastOptions, this.mActivityManagerServiceExt.adjustReceiverList(list2, intent7), iIntentReceiver, i, str4, bundle, z, z2, false, i16, backgroundStartPrivileges2, z5);
                            this.mActivityManagerServiceExt.scheduleNextDispatch(intent7);
                            BroadcastRecord broadcastRecord2 = new BroadcastRecord(broadcastQueueForIntent2, intent7, processRecord, str, str2, i3, i4, isInstantApp, str3, strArr, strArr2, strArr3, i2, broadcastOptions, adjustQueueOrderedBroadcastLocked, processRecord3, iIntentReceiver, i, str4, bundle, z, z2, false, i16, backgroundStartPrivileges2, z5, biFunction, i14);
                            if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                                Slog.v(TAG_BROADCAST, "Enqueueing ordered broadcast " + broadcastRecord2);
                            }
                            broadcastQueueForIntent2.enqueueBroadcastLocked(broadcastRecord2);
                        } else if (intent7.getComponent() == null && intent7.getPackage() == null && (intent7.getFlags() & i13) == 0) {
                            addBroadcastStatLocked(intent7.getAction(), str, 0, 0, 0L);
                        }
                        return i20;
                    }
                    i8 = i3;
                    processRecord4 = processRecord;
                    z3 = true;
                    if (!z3) {
                    }
                    if (!this.mActivityManagerServiceExt.preventSendBroadcast(intent2)) {
                    }
                }
            }
            boolean isProtectedBroadcast2 = AppGlobals.getPackageManager().isProtectedBroadcast(action);
            appId = UserHandle.getAppId(i4);
            if (appId != 0) {
                switch (appId) {
                }
                if (!z3) {
                }
                if (!this.mActivityManagerServiceExt.preventSendBroadcast(intent2)) {
                }
            }
            i8 = i3;
            processRecord4 = processRecord;
            z3 = true;
            if (!z3) {
            }
            if (!this.mActivityManagerServiceExt.preventSendBroadcast(intent2)) {
            }
        } catch (RemoteException e) {
            Slog.w("ActivityManager", "Remote exception", e);
            scheduleCanceledResultTo(processRecord3, iIntentReceiver, intent2, handleIncomingUser, broadcastOptions, i4, str);
            return 0;
        }
        processRecord3 = processRecord2;
        intent2 = new Intent(intent);
        isInstantApp = isInstantApp(processRecord, str, i4);
        if (isInstantApp) {
        }
        if (i7 == -1) {
        }
        iArr2 = iArr;
        intent2.addFlags(16);
        if (!this.mProcessesReady) {
            intent2.addFlags(1073741824);
        }
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST_LIGHT) {
        }
        int[] iArr42 = iArr2;
        this.mActivityManagerServiceExt.debugBroadcast(TAG_BROADCAST, intent2, z2, z, i7, iIntentReceiver, i3, i4);
        this.mActivityManagerServiceExt.benchStepCheck(this.mContext, intent2);
        if (iIntentReceiver != null) {
            if (!this.mEnableModernQueue) {
            }
            if (!UserHandle.isCore(i4)) {
            }
        }
        handleIncomingUser = this.mUserController.handleIncomingUser(i3, i4, i7, true, 0, "broadcast", str);
        this.mActivityManagerServiceExt.broadcastIntentLocked(intent2, i4, str, handleIncomingUser);
        if (handleIncomingUser == -1) {
        }
        String action2 = intent2.getAction();
        if (broadcastOptions == null) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:14:0x002c  */
    /* JADX WARN: Removed duplicated region for block: B:16:0x0033  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x0036  */
    /* JADX WARN: Removed duplicated region for block: B:25:0x002f  */
    @GuardedBy({"this"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void scheduleCanceledResultTo(ProcessRecord processRecord, IIntentReceiver iIntentReceiver, Intent intent, int i, BroadcastOptions broadcastOptions, int i2, String str) {
        boolean z;
        if (iIntentReceiver == null) {
            return;
        }
        IApplicationThread onewayThread = processRecord != null ? processRecord.getOnewayThread() : null;
        if (onewayThread != null) {
            if (broadcastOptions != null) {
                try {
                    if (broadcastOptions.isShareIdentityEnabled()) {
                        z = true;
                        onewayThread.scheduleRegisteredReceiver(iIntentReceiver, intent, 0, (String) null, (Bundle) null, false, false, true, i, processRecord.mState.getReportedProcState(), !z ? i2 : -1, !z ? str : null);
                    }
                } catch (RemoteException e) {
                    processRecord.killLocked("Can't schedule resultTo", 13, 26, true);
                    Slog.d("ActivityManager", "Failed to schedule result of " + intent + " via " + processRecord + ": " + e);
                    return;
                }
            }
            z = false;
            onewayThread.scheduleRegisteredReceiver(iIntentReceiver, intent, 0, (String) null, (Bundle) null, false, false, true, i, processRecord.mState.getReportedProcState(), !z ? i2 : -1, !z ? str : null);
        }
    }

    @GuardedBy({"this"})
    private int getRealProcessStateLocked(ProcessRecord processRecord, int i) {
        if (processRecord == null) {
            synchronized (this.mPidsSelfLocked) {
                processRecord = this.mPidsSelfLocked.get(i);
            }
        }
        if (processRecord == null || processRecord.getThread() == null || processRecord.isKilled()) {
            return 20;
        }
        return processRecord.mState.getCurProcState();
    }

    @VisibleForTesting
    ArrayList<StickyBroadcast> getStickyBroadcasts(String str, int i) {
        ArrayMap<String, ArrayList<StickyBroadcast>> arrayMap = this.mStickyBroadcasts.get(i);
        if (arrayMap == null) {
            return null;
        }
        return arrayMap.get(str);
    }

    private int getUidFromIntent(Intent intent) {
        if (intent == null) {
            return -1;
        }
        Bundle extras = intent.getExtras();
        if (intent.hasExtra("android.intent.extra.UID")) {
            return extras.getInt("android.intent.extra.UID");
        }
        return -1;
    }

    final void rotateBroadcastStatsIfNeededLocked() {
        long elapsedRealtime = SystemClock.elapsedRealtime();
        BroadcastStats broadcastStats = this.mCurBroadcastStats;
        if (broadcastStats == null || broadcastStats.mStartRealtime + BackupManagerConstants.DEFAULT_FULL_BACKUP_INTERVAL_MILLISECONDS < elapsedRealtime) {
            this.mLastBroadcastStats = broadcastStats;
            if (broadcastStats != null) {
                broadcastStats.mEndRealtime = SystemClock.elapsedRealtime();
                this.mLastBroadcastStats.mEndUptime = SystemClock.uptimeMillis();
            }
            this.mCurBroadcastStats = new BroadcastStats();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final void addBroadcastStatLocked(String str, String str2, int i, int i2, long j) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBroadcast(str, str2, i, i2, j);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final void addBackgroundCheckViolationLocked(String str, String str2) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBackgroundCheckViolation(str, str2);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final void notifyBroadcastFinishedLocked(BroadcastRecord broadcastRecord) {
        ProcessRecord processRecord = broadcastRecord.callerApp;
        ApplicationInfo applicationInfo = processRecord != null ? processRecord.info : null;
        String str = applicationInfo != null ? applicationInfo.packageName : broadcastRecord.callerPackage;
        if (str != null) {
            this.mHandler.obtainMessage(74, broadcastRecord.callingUid, 0, str).sendToTarget();
        }
    }

    final Intent verifyBroadcastLocked(Intent intent) {
        int callingUid;
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        int flags = intent.getFlags();
        if (!this.mProcessesReady && (67108864 & flags) == 0 && (flags & 1073741824) == 0) {
            Slog.wtf("ActivityManager", "Attempt to launch receivers of broadcast intent " + intent + " before boot completion");
            Intent intent2 = new Intent(intent);
            intent2.addFlags(1073741824);
            intent = intent2;
        }
        if ((33554432 & flags) != 0) {
            throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
        }
        if ((flags & AudioDevice.OUT_SPEAKER_SAFE) != 0 && (callingUid = Binder.getCallingUid()) != 0 && callingUid != 2000) {
            Slog.w("ActivityManager", "Removing FLAG_RECEIVER_FROM_SHELL because caller is UID " + Binder.getCallingUid());
            intent.removeFlags(AudioDevice.OUT_SPEAKER_SAFE);
        }
        return intent;
    }

    @Deprecated
    public final int broadcastIntent(IApplicationThread iApplicationThread, Intent intent, String str, IIntentReceiver iIntentReceiver, int i, String str2, Bundle bundle, String[] strArr, int i2, Bundle bundle2, boolean z, boolean z2, int i3) {
        return broadcastIntentWithFeature(iApplicationThread, null, intent, str, iIntentReceiver, i, str2, bundle, strArr, null, null, i2, bundle2, z, z2, i3);
    }

    public final int broadcastIntentWithFeature(IApplicationThread iApplicationThread, String str, Intent intent, String str2, IIntentReceiver iIntentReceiver, int i, String str3, Bundle bundle, String[] strArr, String[] strArr2, String[] strArr3, int i2, Bundle bundle2, boolean z, boolean z2, int i3) {
        String str4;
        int broadcastIntentLocked;
        enforceNotIsolatedCaller("broadcastIntent");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                Intent verifyBroadcastLocked = verifyBroadcastLocked(intent);
                ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                int callingPid = Binder.getCallingPid();
                int callingUid = Binder.getCallingUid();
                enforceBroadcastOptionPermissionsInternal(bundle2, callingUid);
                long clearCallingIdentity = Binder.clearCallingIdentity();
                if (recordForAppLOSP != null) {
                    try {
                        str4 = recordForAppLOSP.info.packageName;
                    } catch (Throwable th) {
                        Binder.restoreCallingIdentity(clearCallingIdentity);
                        throw th;
                    }
                } else {
                    str4 = null;
                }
                broadcastIntentLocked = broadcastIntentLocked(recordForAppLOSP, str4, str, verifyBroadcastLocked, str2, recordForAppLOSP, iIntentReceiver, i, str3, bundle, strArr, strArr2, strArr3, i2, bundle2, z, z2, callingPid, callingUid, callingUid, callingPid, i3, BackgroundStartPrivileges.NONE, null, null);
                Binder.restoreCallingIdentity(clearCallingIdentity);
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        return broadcastIntentLocked;
    }

    int broadcastIntentInPackage(String str, String str2, int i, int i2, int i3, Intent intent, String str3, ProcessRecord processRecord, IIntentReceiver iIntentReceiver, int i4, String str4, Bundle bundle, String str5, Bundle bundle2, boolean z, boolean z2, int i5, BackgroundStartPrivileges backgroundStartPrivileges, int[] iArr) {
        int broadcastIntentLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                Intent verifyBroadcastLocked = verifyBroadcastLocked(intent);
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    broadcastIntentLocked = broadcastIntentLocked(null, str, str2, verifyBroadcastLocked, str3, processRecord, iIntentReceiver, i4, str4, bundle, str5 == null ? null : new String[]{str5}, null, null, -1, bundle2, z, z2, -1, i, i2, i3, i5, backgroundStartPrivileges, iArr, null);
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                } catch (Throwable th) {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                    throw th;
                }
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        return broadcastIntentLocked;
    }

    public final void unbroadcastIntent(IApplicationThread iApplicationThread, Intent intent, int i) {
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        int handleIncomingUser = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), i, true, 0, "removeStickyBroadcast", null);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (checkCallingPermission("android.permission.BROADCAST_STICKY") != 0) {
                    String str = "Permission Denial: unbroadcastIntent() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.BROADCAST_STICKY";
                    Slog.w("ActivityManager", str);
                    throw new SecurityException(str);
                }
                ArrayMap<String, ArrayList<StickyBroadcast>> arrayMap = this.mStickyBroadcasts.get(handleIncomingUser);
                if (arrayMap != null) {
                    ArrayList<StickyBroadcast> arrayList = arrayMap.get(intent.getAction());
                    if (arrayList != null) {
                        int size = arrayList.size();
                        int i2 = 0;
                        while (true) {
                            if (i2 >= size) {
                                break;
                            }
                            if (intent.filterEquals(arrayList.get(i2).intent)) {
                                arrayList.remove(i2);
                                break;
                            }
                            i2++;
                        }
                        if (arrayList.size() <= 0) {
                            arrayMap.remove(intent.getAction());
                        }
                    }
                    if (arrayMap.size() <= 0) {
                        this.mStickyBroadcasts.remove(handleIncomingUser);
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void backgroundServicesFinishedLocked(int i) {
        for (BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.backgroundServicesFinishedLocked(i);
        }
    }

    public void finishReceiver(IBinder iBinder, int i, String str, Bundle bundle, boolean z, int i2) {
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slog.v(TAG_BROADCAST, "Finish receiver: " + iBinder);
        }
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iBinder);
                    if (recordForAppLOSP == null) {
                        Slog.w("ActivityManager", "finishReceiver: no app for " + iBinder);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    broadcastQueueForFlags(i2).finishReceiverLocked(recordForAppLOSP, i, str, bundle, z, true);
                    trimApplicationsLocked(false, 2);
                    resetPriorityAfterLockedSection();
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:139:0x00b9 A[Catch: all -> 0x009d, TRY_ENTER, TryCatch #3 {all -> 0x009d, blocks: (B:15:0x0050, B:19:0x0056, B:20:0x006a, B:23:0x006f, B:25:0x0079, B:26:0x008f, B:30:0x00a3, B:33:0x00af, B:34:0x00b4, B:38:0x00da, B:42:0x00e9, B:45:0x00ef, B:47:0x00f3, B:48:0x011b, B:49:0x0160, B:50:0x0161, B:57:0x016f, B:60:0x0176, B:61:0x01b7, B:62:0x01b8, B:64:0x01cb, B:67:0x01d0, B:69:0x01d6, B:74:0x01e2, B:80:0x01f7, B:82:0x01fb, B:83:0x0218, B:86:0x021d, B:88:0x022e, B:90:0x0251, B:93:0x026c, B:96:0x0279, B:97:0x0286, B:105:0x02fe, B:107:0x0305, B:108:0x0311, B:110:0x0316, B:111:0x0319, B:124:0x0323, B:125:0x0326, B:130:0x0235, B:132:0x023d, B:133:0x0244, B:134:0x01f0, B:139:0x00b9, B:141:0x00bf, B:142:0x00d5), top: B:14:0x0050 }] */
    /* JADX WARN: Removed duplicated region for block: B:32:0x00ad  */
    /* JADX WARN: Removed duplicated region for block: B:64:0x01cb A[Catch: all -> 0x009d, DONT_GENERATE, TRY_LEAVE, TryCatch #3 {all -> 0x009d, blocks: (B:15:0x0050, B:19:0x0056, B:20:0x006a, B:23:0x006f, B:25:0x0079, B:26:0x008f, B:30:0x00a3, B:33:0x00af, B:34:0x00b4, B:38:0x00da, B:42:0x00e9, B:45:0x00ef, B:47:0x00f3, B:48:0x011b, B:49:0x0160, B:50:0x0161, B:57:0x016f, B:60:0x0176, B:61:0x01b7, B:62:0x01b8, B:64:0x01cb, B:67:0x01d0, B:69:0x01d6, B:74:0x01e2, B:80:0x01f7, B:82:0x01fb, B:83:0x0218, B:86:0x021d, B:88:0x022e, B:90:0x0251, B:93:0x026c, B:96:0x0279, B:97:0x0286, B:105:0x02fe, B:107:0x0305, B:108:0x0311, B:110:0x0316, B:111:0x0319, B:124:0x0323, B:125:0x0326, B:130:0x0235, B:132:0x023d, B:133:0x0244, B:134:0x01f0, B:139:0x00b9, B:141:0x00bf, B:142:0x00d5), top: B:14:0x0050 }] */
    /* JADX WARN: Removed duplicated region for block: B:67:0x01d0 A[Catch: all -> 0x009d, TRY_ENTER, TryCatch #3 {all -> 0x009d, blocks: (B:15:0x0050, B:19:0x0056, B:20:0x006a, B:23:0x006f, B:25:0x0079, B:26:0x008f, B:30:0x00a3, B:33:0x00af, B:34:0x00b4, B:38:0x00da, B:42:0x00e9, B:45:0x00ef, B:47:0x00f3, B:48:0x011b, B:49:0x0160, B:50:0x0161, B:57:0x016f, B:60:0x0176, B:61:0x01b7, B:62:0x01b8, B:64:0x01cb, B:67:0x01d0, B:69:0x01d6, B:74:0x01e2, B:80:0x01f7, B:82:0x01fb, B:83:0x0218, B:86:0x021d, B:88:0x022e, B:90:0x0251, B:93:0x026c, B:96:0x0279, B:97:0x0286, B:105:0x02fe, B:107:0x0305, B:108:0x0311, B:110:0x0316, B:111:0x0319, B:124:0x0323, B:125:0x0326, B:130:0x0235, B:132:0x023d, B:133:0x0244, B:134:0x01f0, B:139:0x00b9, B:141:0x00bf, B:142:0x00d5), top: B:14:0x0050 }] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x01ee A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:82:0x01fb A[Catch: all -> 0x009d, TryCatch #3 {all -> 0x009d, blocks: (B:15:0x0050, B:19:0x0056, B:20:0x006a, B:23:0x006f, B:25:0x0079, B:26:0x008f, B:30:0x00a3, B:33:0x00af, B:34:0x00b4, B:38:0x00da, B:42:0x00e9, B:45:0x00ef, B:47:0x00f3, B:48:0x011b, B:49:0x0160, B:50:0x0161, B:57:0x016f, B:60:0x0176, B:61:0x01b7, B:62:0x01b8, B:64:0x01cb, B:67:0x01d0, B:69:0x01d6, B:74:0x01e2, B:80:0x01f7, B:82:0x01fb, B:83:0x0218, B:86:0x021d, B:88:0x022e, B:90:0x0251, B:93:0x026c, B:96:0x0279, B:97:0x0286, B:105:0x02fe, B:107:0x0305, B:108:0x0311, B:110:0x0316, B:111:0x0319, B:124:0x0323, B:125:0x0326, B:130:0x0235, B:132:0x023d, B:133:0x0244, B:134:0x01f0, B:139:0x00b9, B:141:0x00bf, B:142:0x00d5), top: B:14:0x0050 }] */
    /* JADX WARN: Removed duplicated region for block: B:86:0x021d A[Catch: all -> 0x009d, TRY_ENTER, TryCatch #3 {all -> 0x009d, blocks: (B:15:0x0050, B:19:0x0056, B:20:0x006a, B:23:0x006f, B:25:0x0079, B:26:0x008f, B:30:0x00a3, B:33:0x00af, B:34:0x00b4, B:38:0x00da, B:42:0x00e9, B:45:0x00ef, B:47:0x00f3, B:48:0x011b, B:49:0x0160, B:50:0x0161, B:57:0x016f, B:60:0x0176, B:61:0x01b7, B:62:0x01b8, B:64:0x01cb, B:67:0x01d0, B:69:0x01d6, B:74:0x01e2, B:80:0x01f7, B:82:0x01fb, B:83:0x0218, B:86:0x021d, B:88:0x022e, B:90:0x0251, B:93:0x026c, B:96:0x0279, B:97:0x0286, B:105:0x02fe, B:107:0x0305, B:108:0x0311, B:110:0x0316, B:111:0x0319, B:124:0x0323, B:125:0x0326, B:130:0x0235, B:132:0x023d, B:133:0x0244, B:134:0x01f0, B:139:0x00b9, B:141:0x00bf, B:142:0x00d5), top: B:14:0x0050 }] */
    /* JADX WARN: Type inference failed for: r9v1, types: [com.android.server.am.ActivityManagerGlobalLock] */
    /* JADX WARN: Type inference failed for: r9v2 */
    /* JADX WARN: Type inference failed for: r9v4 */
    /* JADX WARN: Type inference failed for: r9v5 */
    /* JADX WARN: Type inference failed for: r9v6 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean startInstrumentation(ComponentName componentName, String str, int i, Bundle bundle, IInstrumentationWatcher iInstrumentationWatcher, IUiAutomationConnection iUiAutomationConnection, int i2, String str2) {
        ApplicationInfo applicationInfo;
        ApplicationInfo applicationInfo2;
        InstrumentationInfo instrumentationInfo;
        int i3;
        ApplicationInfo applicationInfo3;
        boolean z;
        boolean z2;
        InstrumentationInfo instrumentationInfo2;
        ApplicationInfo applicationInfo4;
        ActiveInstrumentation activeInstrumentation;
        Object obj;
        boolean z3;
        ProcessRecord addAppLocked;
        InstrumentationInfo instrumentationInfoAsUser;
        enforceNotIsolatedCaller("startInstrumentation");
        int callingUid = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        Object obj2 = null;
        int handleIncomingUser = this.mUserController.handleIncomingUser(callingPid, callingUid, i2, false, 2, "startInstrumentation", null);
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        }
        IPackageManager packageManager = AppGlobals.getPackageManager();
        boostPriorityForLockedSection();
        synchronized (this) {
            boolean z4 = (i & 8) != 0;
            InstrumentationInfo instrumentationInfo3 = null;
            try {
                try {
                    instrumentationInfoAsUser = packageManager.getInstrumentationInfoAsUser(componentName, 1024, handleIncomingUser);
                    try {
                    } catch (RemoteException unused) {
                        instrumentationInfo3 = instrumentationInfoAsUser;
                        applicationInfo = null;
                        applicationInfo2 = applicationInfo;
                        instrumentationInfo = instrumentationInfo3;
                        if (instrumentationInfo.targetPackage.equals("android")) {
                        }
                        try {
                            i3 = packageManager.checkSignatures(instrumentationInfo.targetPackage, instrumentationInfo.packageName, handleIncomingUser);
                        } catch (RemoteException unused2) {
                            i3 = -3;
                        }
                        if (i3 < 0) {
                            if (!Build.IS_DEBUGGABLE) {
                            }
                            String str3 = "Permission Denial: starting instrumentation " + componentName + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " not allowed because package " + instrumentationInfo.packageName + " does not have a signature matching the target " + instrumentationInfo.targetPackage;
                            reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, str3);
                            throw new SecurityException(str3);
                        }
                        if (!Build.IS_DEBUGGABLE) {
                            String str4 = "Permission Denial: instrumentation test " + componentName + " from pid=" + callingPid + ", uid=" + callingUid + ", pkgName=" + this.mInternal.getPackageNameByPid(callingPid) + " not allowed because it's not started from SHELL";
                            Slog.wtfQuiet("ActivityManager", str4);
                            reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, str4);
                            throw new SecurityException(str4);
                        }
                        applicationInfo3 = applicationInfo2;
                        InstrumentationInfo instrumentationInfo4 = instrumentationInfo;
                        if (!this.mActivityManagerServiceExt.interceptStartInstrumentation(callingPid, callingUid, componentName, instrumentationInfo, applicationInfo3)) {
                        }
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (RemoteException unused3) {
                applicationInfo = null;
            }
            if (instrumentationInfoAsUser == null) {
                reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Unable to find instrumentation info for: " + componentName);
                resetPriorityAfterLockedSection();
                return false;
            }
            ApplicationInfo applicationInfo5 = packageManager.getApplicationInfo(instrumentationInfoAsUser.targetPackage, 1024L, handleIncomingUser);
            if (applicationInfo5 == null) {
                reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Unable to find instrumentation target package: " + instrumentationInfoAsUser.targetPackage);
                resetPriorityAfterLockedSection();
                return false;
            }
            instrumentationInfo = instrumentationInfoAsUser;
            applicationInfo2 = applicationInfo5;
            if (instrumentationInfo.targetPackage.equals("android")) {
                if (!applicationInfo2.hasCode()) {
                    reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Instrumentation target has no code: " + instrumentationInfo.targetPackage);
                    resetPriorityAfterLockedSection();
                    return false;
                }
            } else if (!z4) {
                reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Cannot instrument system server without 'no-restart'");
                resetPriorityAfterLockedSection();
                return false;
            }
            i3 = packageManager.checkSignatures(instrumentationInfo.targetPackage, instrumentationInfo.packageName, handleIncomingUser);
            if (i3 < 0 && i3 != -1) {
                if (!Build.IS_DEBUGGABLE && callingUid == 0 && (i & 16) == 0) {
                    Slog.w("ActivityManager", "Instrumentation test " + instrumentationInfo.packageName + " doesn't have a signature matching the target " + instrumentationInfo.targetPackage + ", which would not be allowed on the production Android builds");
                } else {
                    String str32 = "Permission Denial: starting instrumentation " + componentName + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " not allowed because package " + instrumentationInfo.packageName + " does not have a signature matching the target " + instrumentationInfo.targetPackage;
                    reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, str32);
                    throw new SecurityException(str32);
                }
            }
            if (!Build.IS_DEBUGGABLE && callingUid != 0 && callingUid != 2000 && callingUid != 1000 && !hasActiveInstrumentationLocked(callingPid)) {
                String str42 = "Permission Denial: instrumentation test " + componentName + " from pid=" + callingPid + ", uid=" + callingUid + ", pkgName=" + this.mInternal.getPackageNameByPid(callingPid) + " not allowed because it's not started from SHELL";
                Slog.wtfQuiet("ActivityManager", str42);
                reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, str42);
                throw new SecurityException(str42);
            }
            applicationInfo3 = applicationInfo2;
            InstrumentationInfo instrumentationInfo42 = instrumentationInfo;
            if (!this.mActivityManagerServiceExt.interceptStartInstrumentation(callingPid, callingUid, componentName, instrumentationInfo, applicationInfo3)) {
                resetPriorityAfterLockedSection();
                return false;
            }
            if (!applicationInfo3.usesNonSdkApi() && (i & 1) == 0) {
                z = false;
                if (!z && (i & 4) == 0) {
                    z2 = false;
                    if (!z || z2) {
                        enforceCallingPermission("android.permission.DISABLE_HIDDEN_API_CHECKS", "disable hidden API checks");
                    }
                    if ((i & 32) == 0) {
                        boolean startInstrumentationOfSdkSandbox = startInstrumentationOfSdkSandbox(componentName, str, bundle, iInstrumentationWatcher, iUiAutomationConnection, handleIncomingUser, str2, instrumentationInfo42, applicationInfo3, z4, z, z2);
                        resetPriorityAfterLockedSection();
                        return startInstrumentationOfSdkSandbox;
                    }
                    ActiveInstrumentation activeInstrumentation2 = new ActiveInstrumentation(this);
                    activeInstrumentation2.mClass = componentName;
                    String str5 = applicationInfo3.processName;
                    String str6 = instrumentationInfo42.targetProcesses;
                    if (str6 == null) {
                        activeInstrumentation2.mTargetProcesses = new String[]{str5};
                    } else if (str6.equals("*")) {
                        activeInstrumentation2.mTargetProcesses = new String[0];
                    } else {
                        String[] split = instrumentationInfo42.targetProcesses.split(",");
                        activeInstrumentation2.mTargetProcesses = split;
                        str5 = split[0];
                    }
                    String str7 = str5;
                    activeInstrumentation2.mTargetInfo = applicationInfo3;
                    activeInstrumentation2.mProfileFile = str;
                    activeInstrumentation2.mArguments = bundle;
                    activeInstrumentation2.mWatcher = iInstrumentationWatcher;
                    activeInstrumentation2.mUiAutomationConnection = iUiAutomationConnection;
                    activeInstrumentation2.mResultClass = componentName;
                    activeInstrumentation2.mHasBackgroundActivityStartsPermission = checkPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", callingPid, callingUid) == 0;
                    activeInstrumentation2.mHasBackgroundForegroundServiceStartsPermission = checkPermission("android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND", callingPid, callingUid) == 0;
                    activeInstrumentation2.mNoRestart = z4;
                    long clearCallingIdentity = Binder.clearCallingIdentity();
                    ?? r9 = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (r9) {
                        try {
                            try {
                                if (z4) {
                                    addAppLocked = getProcessRecordLocked(applicationInfo3.processName, applicationInfo3.uid);
                                    instrumentationInfo2 = instrumentationInfo42;
                                    applicationInfo4 = applicationInfo3;
                                    activeInstrumentation = activeInstrumentation2;
                                    obj = r9;
                                    z3 = z4;
                                    r9 = r9;
                                } else {
                                    instrumentationInfo2 = instrumentationInfo42;
                                    applicationInfo4 = applicationInfo3;
                                    activeInstrumentation = activeInstrumentation2;
                                    obj = r9;
                                    int i4 = handleIncomingUser;
                                    z3 = z4;
                                    forceStopPackageLocked(instrumentationInfo42.targetPackage, -1, true, false, true, true, false, i4, "start instr");
                                    if (this.mUsageStatsService != null) {
                                        this.mUsageStatsService.reportEvent(instrumentationInfo2.targetPackage, handleIncomingUser, 6);
                                    }
                                    addAppLocked = addAppLocked(applicationInfo4, str7, false, z, z2, str2, 0);
                                    addAppLocked.mProfile.addHostingComponentType(8);
                                    r9 = i4;
                                }
                                addAppLocked.setActiveInstrumentation(activeInstrumentation);
                                activeInstrumentation.mFinished = false;
                                activeInstrumentation.mSourceUid = callingUid;
                                activeInstrumentation.mRunningProcesses.add(addAppLocked);
                                if (!this.mActiveInstrumentation.contains(activeInstrumentation)) {
                                    this.mActiveInstrumentation.add(activeInstrumentation);
                                }
                                resetPriorityAfterProcLockedSection();
                                if ((i & 2) != 0) {
                                    this.mAppOpsService.setMode(99, applicationInfo4.uid, instrumentationInfo2.packageName, 0);
                                }
                                Binder.restoreCallingIdentity(clearCallingIdentity);
                                if (z3) {
                                    instrumentWithoutRestart(activeInstrumentation, applicationInfo4);
                                }
                                resetPriorityAfterLockedSection();
                                return true;
                            } catch (Throwable th2) {
                                th = th2;
                                obj2 = r9;
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                }
                z2 = true;
                if (!z) {
                }
                enforceCallingPermission("android.permission.DISABLE_HIDDEN_API_CHECKS", "disable hidden API checks");
                if ((i & 32) == 0) {
                }
            }
            z = true;
            if (!z) {
                z2 = false;
                if (!z) {
                }
                enforceCallingPermission("android.permission.DISABLE_HIDDEN_API_CHECKS", "disable hidden API checks");
                if ((i & 32) == 0) {
                }
            }
            z2 = true;
            if (!z) {
            }
            enforceCallingPermission("android.permission.DISABLE_HIDDEN_API_CHECKS", "disable hidden API checks");
            if ((i & 32) == 0) {
            }
        }
    }

    @GuardedBy({"this"})
    private boolean hasActiveInstrumentationLocked(int i) {
        boolean z = false;
        if (i == 0) {
            return false;
        }
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord processRecord = this.mPidsSelfLocked.get(i);
            if (processRecord != null && processRecord.getActiveInstrumentation() != null) {
                z = true;
            }
        }
        return z;
    }

    @GuardedBy({"this"})
    private boolean startInstrumentationOfSdkSandbox(ComponentName componentName, String str, Bundle bundle, IInstrumentationWatcher iInstrumentationWatcher, IUiAutomationConnection iUiAutomationConnection, int i, String str2, InstrumentationInfo instrumentationInfo, ApplicationInfo applicationInfo, boolean z, boolean z2, boolean z3) {
        if (z) {
            reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Instrumenting sdk sandbox with --no-restart flag is not supported");
            return false;
        }
        try {
            PackageManager packageManager = this.mContext.getPackageManager();
            ApplicationInfo applicationInfoAsUser = packageManager.getApplicationInfoAsUser(packageManager.getSdkSandboxPackageName(), 0, i);
            SdkSandboxManagerLocal sdkSandboxManagerLocal = (SdkSandboxManagerLocal) LocalManagerRegistry.getManager(SdkSandboxManagerLocal.class);
            if (sdkSandboxManagerLocal == null) {
                reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Can't locate SdkSandboxManagerLocal");
                return false;
            }
            String sdkSandboxProcessNameForInstrumentation = sdkSandboxManagerLocal.getSdkSandboxProcessNameForInstrumentation(applicationInfo);
            ActiveInstrumentation activeInstrumentation = new ActiveInstrumentation(this);
            activeInstrumentation.mClass = componentName;
            activeInstrumentation.mTargetProcesses = new String[]{sdkSandboxProcessNameForInstrumentation};
            activeInstrumentation.mTargetInfo = applicationInfoAsUser;
            activeInstrumentation.mProfileFile = str;
            activeInstrumentation.mArguments = bundle;
            activeInstrumentation.mWatcher = iInstrumentationWatcher;
            activeInstrumentation.mUiAutomationConnection = iUiAutomationConnection;
            activeInstrumentation.mResultClass = componentName;
            activeInstrumentation.mHasBackgroundActivityStartsPermission = false;
            activeInstrumentation.mHasBackgroundForegroundServiceStartsPermission = false;
            activeInstrumentation.mNoRestart = false;
            int callingUid = Binder.getCallingUid();
            long clearCallingIdentity = Binder.clearCallingIdentity();
            try {
                sdkSandboxManagerLocal.notifyInstrumentationStarted(applicationInfo.packageName, applicationInfo.uid);
                ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                try {
                    synchronized (activityManagerGlobalLock) {
                        try {
                            int sdkSandboxUid = Process.toSdkSandboxUid(applicationInfo.uid);
                            forceStopPackageLocked(instrumentationInfo.targetPackage, -1, true, false, true, true, false, i, "start instr");
                            ProcessRecord addAppLocked = addAppLocked(applicationInfoAsUser, sdkSandboxProcessNameForInstrumentation, false, true, sdkSandboxUid, applicationInfo.packageName, z2, z3, str2, 0);
                            addAppLocked.setActiveInstrumentation(activeInstrumentation);
                            activeInstrumentation.mFinished = false;
                            activeInstrumentation.mSourceUid = callingUid;
                            activeInstrumentation.mRunningProcesses.add(addAppLocked);
                            if (!this.mActiveInstrumentation.contains(activeInstrumentation)) {
                                this.mActiveInstrumentation.add(activeInstrumentation);
                            }
                            addAppLocked.mProfile.addHostingComponentType(8);
                            resetPriorityAfterProcLockedSection();
                            Binder.restoreCallingIdentity(clearCallingIdentity);
                            return true;
                        } catch (Throwable th) {
                            th = th;
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                } catch (Throwable th2) {
                    th = th2;
                }
            } catch (Throwable th3) {
                Binder.restoreCallingIdentity(clearCallingIdentity);
                throw th3;
            }
        } catch (PackageManager.NameNotFoundException unused) {
            reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Can't find SdkSandbox package");
            return false;
        }
    }

    private void instrumentWithoutRestart(ActiveInstrumentation activeInstrumentation, ApplicationInfo applicationInfo) {
        ProcessRecord processRecordLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                processRecordLocked = getProcessRecordLocked(applicationInfo.processName, applicationInfo.uid);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        try {
            processRecordLocked.getThread().instrumentWithoutRestart(activeInstrumentation.mClass, activeInstrumentation.mArguments, activeInstrumentation.mWatcher, activeInstrumentation.mUiAutomationConnection, applicationInfo);
        } catch (RemoteException e) {
            Slog.i("ActivityManager", "RemoteException from instrumentWithoutRestart", e);
        }
    }

    private String getPackageNameByPid(int i) {
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord processRecord = this.mPidsSelfLocked.get(i);
            if (processRecord == null || processRecord.info == null) {
                return null;
            }
            return processRecord.info.packageName;
        }
    }

    private boolean isCallerShell() {
        int callingUid = Binder.getCallingUid();
        return callingUid == 2000 || callingUid == 0;
    }

    private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher iInstrumentationWatcher, ComponentName componentName, String str) {
        Slog.w("ActivityManager", str);
        if (iInstrumentationWatcher != null) {
            Bundle bundle = new Bundle();
            bundle.putString("id", "ActivityManagerService");
            bundle.putString("Error", str);
            this.mInstrumentationReporter.reportStatus(iInstrumentationWatcher, componentName, -1, bundle);
        }
    }

    void addInstrumentationResultsLocked(ProcessRecord processRecord, Bundle bundle) {
        ActiveInstrumentation activeInstrumentation = processRecord.getActiveInstrumentation();
        if (activeInstrumentation == null) {
            Slog.w("ActivityManager", "finishInstrumentation called on non-instrumented: " + processRecord);
            return;
        }
        if (activeInstrumentation.mFinished || bundle == null) {
            return;
        }
        Bundle bundle2 = activeInstrumentation.mCurResults;
        if (bundle2 == null) {
            activeInstrumentation.mCurResults = new Bundle(bundle);
        } else {
            bundle2.putAll(bundle);
        }
    }

    public void addInstrumentationResults(IApplicationThread iApplicationThread, Bundle bundle) {
        UserHandle.getCallingUserId();
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                if (recordForAppLOSP == null) {
                    Slog.w("ActivityManager", "addInstrumentationResults: no app for " + iApplicationThread);
                    resetPriorityAfterLockedSection();
                    return;
                }
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    addInstrumentationResultsLocked(recordForAppLOSP, bundle);
                    resetPriorityAfterLockedSection();
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    @GuardedBy({"this"})
    void finishInstrumentationLocked(ProcessRecord processRecord, int i, Bundle bundle) {
        try {
            Trace.traceBegin(64L, "finishInstrumentationLocked()");
            ActiveInstrumentation activeInstrumentation = processRecord.getActiveInstrumentation();
            if (activeInstrumentation == null) {
                Slog.w("ActivityManager", "finishInstrumentation called on non-instrumented: " + processRecord);
                return;
            }
            ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    if (!activeInstrumentation.mFinished) {
                        if (activeInstrumentation.mWatcher != null) {
                            Bundle bundle2 = activeInstrumentation.mCurResults;
                            if (bundle2 != null) {
                                if (bundle2 != null && bundle != null) {
                                    bundle2.putAll(bundle);
                                }
                                bundle = bundle2;
                            }
                            this.mInstrumentationReporter.reportFinished(activeInstrumentation.mWatcher, activeInstrumentation.mClass, i, bundle);
                        }
                        if (activeInstrumentation.mUiAutomationConnection != null) {
                            this.mAppOpsService.setMode(99, processRecord.uid, processRecord.info.packageName, 2);
                            this.mAppOpsService.setAppOpsServiceDelegate(null);
                            getPermissionManagerInternal().stopShellPermissionIdentityDelegation();
                            this.mHandler.obtainMessage(56, activeInstrumentation.mUiAutomationConnection).sendToTarget();
                        }
                        activeInstrumentation.mFinished = true;
                    }
                    activeInstrumentation.removeProcess(processRecord);
                    processRecord.setActiveInstrumentation(null);
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            processRecord.mProfile.clearHostingComponentType(8);
            if (processRecord.isSdkSandbox) {
                killUid(UserHandle.getAppId(processRecord.uid), UserHandle.getUserId(processRecord.uid), "finished instr");
                SdkSandboxManagerLocal sdkSandboxManagerLocal = (SdkSandboxManagerLocal) LocalManagerRegistry.getManager(SdkSandboxManagerLocal.class);
                if (sdkSandboxManagerLocal != null) {
                    sdkSandboxManagerLocal.notifyInstrumentationFinished(processRecord.sdkSandboxClientAppPackage, Process.getAppUidForSdkSandboxUid(processRecord.uid));
                }
            } else if (!activeInstrumentation.mNoRestart) {
                forceStopPackageLocked(processRecord.info.packageName, -1, false, false, true, true, false, processRecord.userId, "finished inst");
            }
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public void finishInstrumentation(IApplicationThread iApplicationThread, int i, Bundle bundle) {
        UserHandle.getCallingUserId();
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                if (recordForAppLOSP == null) {
                    Slog.w("ActivityManager", "finishInstrumentation: no app for " + iApplicationThread);
                    resetPriorityAfterLockedSection();
                    return;
                }
                long clearCallingIdentity = Binder.clearCallingIdentity();
                finishInstrumentationLocked(recordForAppLOSP, i, bundle);
                Binder.restoreCallingIdentity(clearCallingIdentity);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public ActivityTaskManager.RootTaskInfo getFocusedRootTaskInfo() throws RemoteException {
        return this.mActivityTaskManager.getFocusedRootTaskInfo();
    }

    public Configuration getConfiguration() {
        return this.mActivityTaskManager.getConfiguration();
    }

    public void suppressResizeConfigChanges(boolean z) throws RemoteException {
        this.mActivityTaskManager.suppressResizeConfigChanges(z);
    }

    public void updatePersistentConfiguration(Configuration configuration) {
        updatePersistentConfigurationWithAttribution(configuration, Settings.getPackageNameForUid(this.mContext, Binder.getCallingUid()), null);
    }

    public void updatePersistentConfigurationWithAttribution(Configuration configuration, String str, String str2) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updatePersistentConfiguration()");
        enforceWriteSettingsPermission("updatePersistentConfiguration()", str, str2);
        if (configuration == null) {
            throw new NullPointerException("Configuration must not be null");
        }
        this.mActivityTaskManager.updatePersistentConfiguration(configuration, UserHandle.getCallingUserId());
    }

    private void enforceWriteSettingsPermission(String str, String str2, String str3) {
        int callingUid = Binder.getCallingUid();
        if (callingUid == 0 || Settings.checkAndNoteWriteSettingsOperation(this.mContext, callingUid, str2, str3, false)) {
            return;
        }
        String str4 = "Permission Denial: " + str + " from pid=" + Binder.getCallingPid() + ", uid=" + callingUid + " requires android.permission.WRITE_SETTINGS";
        Slog.w("ActivityManager", str4);
        throw new SecurityException(str4);
    }

    public boolean updateConfiguration(Configuration configuration) {
        this.mActivityManagerServiceExt.hookUpdateConfigForFontFlip(configuration);
        this.mActivityManagerServiceExt.updateBurmeseConfig(configuration);
        Slog.i("ActivityManager", "updateConfiguration callingPid:" + Binder.getCallingPid() + ", callingUid:" + Binder.getCallingUid() + ", values:" + configuration);
        return this.mActivityTaskManager.updateConfiguration(configuration);
    }

    public boolean updateMccMncConfiguration(String str, String str2) {
        try {
            int parseInt = Integer.parseInt(str);
            int parseInt2 = Integer.parseInt(str2);
            Configuration configuration = new Configuration();
            configuration.mcc = parseInt;
            if (parseInt2 == 0) {
                parseInt2 = BluetoothStatsLog.BLUETOOTH_DEVICE_INFO_REPORTED__ADDRESS_TYPE__ADDRESS_TYPE_UNKNOWN;
            }
            configuration.mnc = parseInt2;
            return this.mActivityTaskManager.updateConfiguration(configuration);
        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {
            Slog.e("ActivityManager", "Error parsing mcc: " + str + " mnc: " + str2 + ". ex=" + e);
            return false;
        }
    }

    public int getLaunchedFromUid(IBinder iBinder) {
        return ActivityClient.getInstance().getLaunchedFromUid(iBinder);
    }

    public String getLaunchedFromPackage(IBinder iBinder) {
        return ActivityClient.getInstance().getLaunchedFromPackage(iBinder);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean isReceivingBroadcastLocked(ProcessRecord processRecord, int[] iArr) {
        if (this.mActivityManagerServiceExt.isReceivingBroadcastLocked(processRecord)) {
            return true;
        }
        int i = Integer.MIN_VALUE;
        for (BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            i = Math.max(i, broadcastQueue.getPreferredSchedulingGroupLocked(processRecord));
        }
        iArr[0] = i;
        return i != Integer.MIN_VALUE;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public Association startAssociationLocked(int i, String str, int i2, int i3, long j, ComponentName componentName, String str2) {
        this.mActivityManagerServiceExt.noteAssociation(i, i3, true);
        if (!this.mTrackingAssociations) {
            return null;
        }
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap = this.mAssociations.get(i3);
        if (arrayMap == null) {
            arrayMap = new ArrayMap<>();
            this.mAssociations.put(i3, arrayMap);
        }
        SparseArray<ArrayMap<String, Association>> sparseArray = arrayMap.get(componentName);
        if (sparseArray == null) {
            sparseArray = new SparseArray<>();
            arrayMap.put(componentName, sparseArray);
        }
        ArrayMap<String, Association> arrayMap2 = sparseArray.get(i);
        if (arrayMap2 == null) {
            arrayMap2 = new ArrayMap<>();
            sparseArray.put(i, arrayMap2);
        }
        Association association = arrayMap2.get(str);
        if (association == null) {
            association = new Association(i, str, i3, componentName, str2);
            arrayMap2.put(str, association);
        }
        association.mCount++;
        int i4 = association.mNesting + 1;
        association.mNesting = i4;
        if (i4 == 1) {
            long uptimeMillis = SystemClock.uptimeMillis();
            association.mLastStateUptime = uptimeMillis;
            association.mStartTime = uptimeMillis;
            association.mLastState = i2;
        }
        return association;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void stopAssociationLocked(int i, String str, int i2, long j, ComponentName componentName, String str2) {
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap;
        SparseArray<ArrayMap<String, Association>> sparseArray;
        ArrayMap<String, Association> arrayMap2;
        Association association;
        int i3;
        this.mActivityManagerServiceExt.noteAssociation(i, i2, false);
        if (!this.mTrackingAssociations || (arrayMap = this.mAssociations.get(i2)) == null || (sparseArray = arrayMap.get(componentName)) == null || (arrayMap2 = sparseArray.get(i)) == null || (association = arrayMap2.get(str)) == null || (i3 = association.mNesting) <= 0) {
            return;
        }
        int i4 = i3 - 1;
        association.mNesting = i4;
        if (i4 == 0) {
            long uptimeMillis = SystemClock.uptimeMillis();
            association.mTime += uptimeMillis - association.mStartTime;
            long[] jArr = association.mStateTimes;
            int i5 = association.mLastState - 0;
            jArr[i5] = jArr[i5] + (uptimeMillis - association.mLastStateUptime);
            association.mLastState = 22;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void noteUidProcessState(int i, int i2, int i3) {
        int i4;
        ActivityManagerService activityManagerService = this;
        activityManagerService.mBatteryStatsService.noteUidProcessState(i, i2);
        activityManagerService.mAppOpsService.updateUidProcState(i, i2, i3);
        if (activityManagerService.mTrackingAssociations) {
            int size = activityManagerService.mAssociations.size();
            int i5 = 0;
            int i6 = 0;
            while (i6 < size) {
                ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> valueAt = activityManagerService.mAssociations.valueAt(i6);
                int size2 = valueAt.size();
                int i7 = i5;
                while (i7 < size2) {
                    ArrayMap<String, Association> arrayMap = valueAt.valueAt(i7).get(i);
                    if (arrayMap != null) {
                        int size3 = arrayMap.size();
                        int i8 = i5;
                        while (i8 < size3) {
                            Association valueAt2 = arrayMap.valueAt(i8);
                            if (valueAt2.mNesting >= 1) {
                                long uptimeMillis = SystemClock.uptimeMillis();
                                long[] jArr = valueAt2.mStateTimes;
                                int i9 = valueAt2.mLastState - i5;
                                i4 = i6;
                                jArr[i9] = jArr[i9] + (uptimeMillis - valueAt2.mLastStateUptime);
                                valueAt2.mLastState = i2;
                                valueAt2.mLastStateUptime = uptimeMillis;
                            } else {
                                i4 = i6;
                            }
                            i8++;
                            i6 = i4;
                            i5 = 0;
                        }
                    }
                    i7++;
                    i6 = i6;
                    i5 = 0;
                }
                i6++;
                activityManagerService = this;
                i5 = 0;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final boolean canGcNowLocked() {
        for (BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            if (!broadcastQueue.lambda$waitForIdle$1()) {
                return false;
            }
        }
        return this.mAtmInternal.canGcNow();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkExcessivePowerUsage() {
        updateCpuStatsNow();
        final boolean z = this.mSystemReady && FeatureFlagUtils.isEnabled(this.mContext, "settings_enable_monitor_phantom_procs");
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                final boolean z2 = this.mLastPowerCheckUptime != 0;
                final long uptimeMillis = SystemClock.uptimeMillis();
                final long j = uptimeMillis - this.mLastPowerCheckUptime;
                this.mLastPowerCheckUptime = uptimeMillis;
                this.mProcessList.forEachLruProcessesLOSP(false, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda18
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.this.lambda$checkExcessivePowerUsage$21(uptimeMillis, j, z2, z, (ProcessRecord) obj);
                    }
                });
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkExcessivePowerUsage$21(long j, long j2, boolean z, boolean z2, ProcessRecord processRecord) {
        int i;
        if (processRecord.getThread() != null && processRecord.mState.getSetProcState() >= 14) {
            long whenUnimportant = j - processRecord.mState.getWhenUnimportant();
            ActivityManagerConstants activityManagerConstants = this.mConstants;
            long j3 = activityManagerConstants.POWER_CHECK_INTERVAL;
            if (whenUnimportant <= j3) {
                i = activityManagerConstants.POWER_CHECK_MAX_CPU_1;
            } else if (whenUnimportant <= j3 * 2 || processRecord.mState.getSetProcState() <= 14) {
                i = this.mConstants.POWER_CHECK_MAX_CPU_2;
            } else if (whenUnimportant <= this.mConstants.POWER_CHECK_INTERVAL * 3 || processRecord.mState.getSetProcState() <= 15 || this.mActivityManagerServiceExt.isRecentLockTask(processRecord.info.packageName, processRecord.userId)) {
                i = this.mConstants.POWER_CHECK_MAX_CPU_3;
            } else {
                i = this.mConstants.POWER_CHECK_MAX_CPU_4;
            }
            int i2 = i;
            updateAppProcessCpuTimeLPr(j2, z, whenUnimportant, i2, processRecord);
            if (z2) {
                updatePhantomProcessCpuTimeLPr(j2, z, whenUnimportant, i2, processRecord);
            }
        }
    }

    @GuardedBy({"mProcLock"})
    private void updateAppProcessCpuTimeLPr(final long j, boolean z, final long j2, final int i, final ProcessRecord processRecord) {
        synchronized (this.mAppProfiler.mProfilerLock) {
            ProcessProfileRecord processProfileRecord = processRecord.mProfile;
            long j3 = processProfileRecord.mCurCpuTime.get();
            long j4 = processProfileRecord.mLastCpuTime.get();
            if (j4 > 0) {
                final long j5 = j3 - j4;
                if (checkExcessivePowerUsageLPr(j, z, j5, processRecord.processName, processRecord.toShortString(), i, processRecord)) {
                    this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda10
                        @Override // java.lang.Runnable
                        public final void run() {
                            ActivityManagerService.this.lambda$updateAppProcessCpuTimeLPr$22(processRecord, j5, j, j2, i);
                        }
                    });
                    processProfileRecord.reportExcessiveCpu();
                }
            }
            processProfileRecord.mLastCpuTime.set(j3);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateAppProcessCpuTimeLPr$22(ProcessRecord processRecord, long j, long j2, long j3, int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (processRecord.getThread() != null && processRecord.mState.getSetProcState() >= 14) {
                    processRecord.killLocked("excessive cpu " + j + " during " + j2 + " dur=" + j3 + " limit=" + i, 9, 7, true);
                    resetPriorityAfterLockedSection();
                    return;
                }
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    @GuardedBy({"mProcLock"})
    private void updatePhantomProcessCpuTimeLPr(final long j, final boolean z, final long j2, final int i, final ProcessRecord processRecord) {
        this.mPhantomProcessList.forEachPhantomProcessOfApp(processRecord, new Function() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda36
            @Override // java.util.function.Function
            public final Object apply(Object obj) {
                Boolean lambda$updatePhantomProcessCpuTimeLPr$24;
                lambda$updatePhantomProcessCpuTimeLPr$24 = ActivityManagerService.this.lambda$updatePhantomProcessCpuTimeLPr$24(j, z, processRecord, i, j2, (PhantomProcessRecord) obj);
                return lambda$updatePhantomProcessCpuTimeLPr$24;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ Boolean lambda$updatePhantomProcessCpuTimeLPr$24(final long j, boolean z, final ProcessRecord processRecord, final int i, final long j2, final PhantomProcessRecord phantomProcessRecord) {
        long j3 = phantomProcessRecord.mLastCputime;
        if (j3 > 0) {
            final long j4 = phantomProcessRecord.mCurrentCputime - j3;
            if (checkExcessivePowerUsageLPr(j, z, j4, processRecord.processName, phantomProcessRecord.toString(), i, processRecord)) {
                this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda15
                    @Override // java.lang.Runnable
                    public final void run() {
                        ActivityManagerService.this.lambda$updatePhantomProcessCpuTimeLPr$23(processRecord, phantomProcessRecord, j4, j, j2, i);
                    }
                });
                return Boolean.FALSE;
            }
        }
        phantomProcessRecord.mLastCputime = phantomProcessRecord.mCurrentCputime;
        return Boolean.TRUE;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePhantomProcessCpuTimeLPr$23(ProcessRecord processRecord, PhantomProcessRecord phantomProcessRecord, long j, long j2, long j3, int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (processRecord.getThread() != null && processRecord.mState.getSetProcState() >= 14) {
                    this.mPhantomProcessList.killPhantomProcessGroupLocked(processRecord, phantomProcessRecord, 9, 7, "excessive cpu " + j + " during " + j2 + " dur=" + j3 + " limit=" + i);
                    resetPriorityAfterLockedSection();
                    return;
                }
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    @GuardedBy({"mProcLock"})
    private boolean checkExcessivePowerUsageLPr(long j, boolean z, long j2, final String str, String str2, int i, final ProcessRecord processRecord) {
        if (ActivityManagerDebugConfig.DEBUG_POWER && j > 0) {
            StringBuilder sb = new StringBuilder(128);
            sb.append("CPU for ");
            sb.append(str2);
            sb.append(": over ");
            TimeUtils.formatDuration(j, sb);
            sb.append(" used ");
            TimeUtils.formatDuration(j2, sb);
            sb.append(" (");
            sb.append((j2 * 100.0d) / j);
            sb.append("%)");
            Slog.i(TAG_POWER, sb.toString());
        }
        if (!z || j <= 0 || (100 * j2) / j < i) {
            return false;
        }
        this.mBatteryStatsService.reportExcessiveCpu(processRecord.info.uid, processRecord.processName, j, j2);
        processRecord.getPkgList().forEachPackageProcessStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda22
            @Override // java.util.function.Consumer
            public final void accept(Object obj) {
                ActivityManagerService.lambda$checkExcessivePowerUsageLPr$25(ProcessRecord.this, str, (ProcessStats.ProcessStateHolder) obj);
            }
        });
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$checkExcessivePowerUsageLPr$25(ProcessRecord processRecord, String str, ProcessStats.ProcessStateHolder processStateHolder) {
        ProcessState processState = processStateHolder.state;
        FrameworkStatsLog.write(16, processRecord.info.uid, str, processState != null ? processState.getPackage() : processRecord.info.packageName, processStateHolder.appVersion);
    }

    private boolean isEphemeralLocked(int i) {
        String[] packagesForUid = this.mContext.getPackageManager().getPackagesForUid(i);
        if (packagesForUid == null || packagesForUid.length != 1) {
            return false;
        }
        return getPackageManagerInternal().isPackageEphemeral(UserHandle.getUserId(i), packagesForUid[0]);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void enqueueUidChangeLocked(UidRecord uidRecord, int i, int i2) {
        if (uidRecord != null) {
            i = uidRecord.getUid();
        }
        if (i < 0) {
            throw new IllegalArgumentException("No UidRecord or uid");
        }
        int setProcState = uidRecord != null ? uidRecord.getSetProcState() : 20;
        int minProcAdj = uidRecord != null ? uidRecord.getMinProcAdj() : -10000;
        long j = uidRecord != null ? uidRecord.curProcStateSeq : 0L;
        int setCapability = uidRecord != null ? uidRecord.getSetCapability() : 0;
        boolean isEphemeral = uidRecord != null ? uidRecord.isEphemeral() : isEphemeralLocked(i);
        if (uidRecord != null && uidRecord.isIdle() && (i2 & 2) != 0) {
            this.mProcessList.killAppIfBgRestrictedAndCachedIdleLocked(uidRecord);
        }
        if (uidRecord != null && !uidRecord.isIdle() && (i2 & 1) != 0) {
            i2 |= 2;
        }
        int enqueueUidChange = this.mUidObserverController.enqueueUidChange(uidRecord == null ? null : uidRecord.pendingChange, i, i2, setProcState, minProcAdj, j, setCapability, isEphemeral);
        if (uidRecord != null) {
            uidRecord.setLastReportedChange(enqueueUidChange);
        }
        PowerManagerInternal powerManagerInternal = this.mLocalPowerManager;
        if (powerManagerInternal != null) {
            if ((enqueueUidChange & 4) != 0) {
                powerManagerInternal.uidActive(i);
            }
            if ((enqueueUidChange & 2) != 0) {
                this.mLocalPowerManager.uidIdle(i);
            }
            if ((enqueueUidChange & 1) != 0) {
                this.mLocalPowerManager.uidGone(i);
            } else if ((Integer.MIN_VALUE & enqueueUidChange) != 0) {
                this.mLocalPowerManager.updateUidProcState(i, setProcState);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy(anyOf = {"this", "mProcLock"})
    public final void setProcessTrackerStateLOSP(ProcessRecord processRecord, int i) {
        if (processRecord.getThread() != null) {
            processRecord.mProfile.setProcessTrackerState(processRecord.mState.getReportedProcState(), i);
        }
    }

    @GuardedBy({"this"})
    final void clearProcessForegroundLocked(ProcessRecord processRecord) {
        updateProcessForegroundLocked(processRecord, false, 0, false, false);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void updateProcessForegroundLocked(ProcessRecord processRecord, boolean z, int i, boolean z2, boolean z3) {
        ProcessServiceRecord processServiceRecord = processRecord.mServices;
        boolean z4 = z != processServiceRecord.hasForegroundServices();
        if (z4 || !processServiceRecord.areForegroundServiceTypesSame(i, z2)) {
            if (z4) {
                for (int size = this.mForegroundServiceStateListeners.size() - 1; size >= 0; size--) {
                    this.mForegroundServiceStateListeners.get(size).onForegroundServiceStateChanged(processRecord.info.packageName, processRecord.info.uid, processRecord.getPid(), z);
                }
            }
            processServiceRecord.setHasForegroundServices(z, i, z2);
            ArrayList arrayList = (ArrayList) this.mForegroundPackages.get(processRecord.info.packageName, processRecord.info.uid);
            if (z) {
                if (arrayList == null) {
                    arrayList = new ArrayList();
                    this.mForegroundPackages.put(processRecord.info.packageName, processRecord.info.uid, arrayList);
                    this.mActivityManagerServiceExt.hookUpdateForegroundServiceState(processRecord.info.uid, processRecord.info.packageName, z);
                }
                if (!arrayList.contains(processRecord)) {
                    arrayList.add(processRecord);
                    this.mBatteryStatsService.noteEvent(32770, processRecord.info.packageName, processRecord.info.uid);
                }
            } else if (arrayList != null && arrayList.remove(processRecord)) {
                this.mBatteryStatsService.noteEvent(16386, processRecord.info.packageName, processRecord.info.uid);
                if (arrayList.size() <= 0) {
                    this.mForegroundPackages.remove(processRecord.info.packageName, processRecord.info.uid);
                    this.mActivityManagerServiceExt.hookUpdateForegroundServiceState(processRecord.info.uid, processRecord.info.packageName, z);
                }
            }
            processServiceRecord.setReportedForegroundServiceTypes(i);
            ProcessChangeItem enqueueProcessChangeItemLocked = this.mProcessList.enqueueProcessChangeItemLocked(processRecord.getPid(), processRecord.info.uid);
            enqueueProcessChangeItemLocked.changes |= 2;
            enqueueProcessChangeItemLocked.foregroundServiceTypes = i;
        }
        if (z3) {
            updateOomAdjLocked(processRecord, 9);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public ProcessRecord getTopApp() {
        int i;
        String str;
        ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
        String str2 = null;
        WindowProcessController topApp = activityTaskManagerInternal != null ? activityTaskManagerInternal.getTopApp() : null;
        ProcessRecord processRecord = topApp != null ? (ProcessRecord) topApp.mOwner : null;
        if (processRecord != null) {
            str2 = processRecord.processName;
            i = processRecord.info.uid;
        } else {
            i = -1;
        }
        synchronized (this.mCurResumedAppLock) {
            if (i != this.mCurResumedUid || (str2 != (str = this.mCurResumedPackage) && (str2 == null || !str2.equals(str)))) {
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    String str3 = this.mCurResumedPackage;
                    if (str3 != null) {
                        this.mBatteryStatsService.noteEvent(16387, str3, this.mCurResumedUid);
                    }
                    this.mCurResumedPackage = str2;
                    this.mCurResumedUid = i;
                    if (str2 != null) {
                        this.mBatteryStatsService.noteEvent(32771, str2, i);
                    }
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
        }
        return processRecord;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public ProcessRecord getTopAppOnlyLocked() {
        ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
        WindowProcessController topApp = activityTaskManagerInternal != null ? activityTaskManagerInternal.getTopApp() : null;
        if (topApp != null) {
            return (ProcessRecord) topApp.mOwner;
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void enqueueOomAdjTargetLocked(ProcessRecord processRecord) {
        this.mOomAdjuster.enqueueOomAdjTargetLocked(processRecord);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void removeOomAdjTargetLocked(ProcessRecord processRecord, boolean z) {
        this.mOomAdjuster.removeOomAdjTargetLocked(processRecord, z);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void updateOomAdjPendingTargetsLocked(int i) {
        this.mOomAdjuster.updateOomAdjPendingTargetsLocked(i);
    }

    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    static final class ProcStatsRunnable implements Runnable {
        private final ProcessStatsService mProcessStats;
        private final ActivityManagerService mService;

        /* JADX INFO: Access modifiers changed from: package-private */
        public ProcStatsRunnable(ActivityManagerService activityManagerService, ProcessStatsService processStatsService) {
            this.mService = activityManagerService;
            this.mProcessStats = processStatsService;
        }

        @Override // java.lang.Runnable
        public void run() {
            this.mProcessStats.writeStateAsync();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void updateOomAdjLocked(int i) {
        this.mOomAdjuster.updateOomAdjLocked(i);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final boolean updateOomAdjLocked(ProcessRecord processRecord, int i) {
        return this.mOomAdjuster.updateOomAdjLocked(processRecord, i);
    }

    public void makePackageIdle(String str, int i) {
        int i2;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            String str2 = "Permission Denial: makePackageIdle() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
            Slog.w("ActivityManager", str2);
            throw new SecurityException(str2);
        }
        int handleIncomingUser = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), i, true, 2, "makePackageIdle", null);
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            try {
                i2 = AppGlobals.getPackageManager().getPackageUid(str, 268443648L, 0);
            } catch (RemoteException unused) {
                i2 = -1;
            }
            if (i2 == -1) {
                throw new IllegalArgumentException("Unknown package name " + str);
            }
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    try {
                        PowerManagerInternal powerManagerInternal = this.mLocalPowerManager;
                        if (powerManagerInternal != null) {
                            powerManagerInternal.startUidChanges();
                        }
                        int appId = UserHandle.getAppId(i2);
                        for (int size = this.mProcessList.mActiveUids.size() - 1; size >= 0; size--) {
                            UidRecord valueAt = this.mProcessList.mActiveUids.valueAt(size);
                            if (valueAt.getLastBackgroundTime() > 0 && !valueAt.isIdle()) {
                                int uid = valueAt.getUid();
                                if (UserHandle.getAppId(uid) == appId && (handleIncomingUser == -1 || handleIncomingUser == UserHandle.getUserId(uid))) {
                                    EventLogTags.writeAmUidIdle(uid);
                                    ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                                    boostPriorityForProcLockedSection();
                                    synchronized (activityManagerGlobalLock) {
                                        try {
                                            valueAt.setIdle(true);
                                            valueAt.setSetIdle(true);
                                        } finally {
                                        }
                                    }
                                    resetPriorityAfterProcLockedSection();
                                    Slog.w("ActivityManager", "Idling uid " + UserHandle.formatUid(uid) + " from package " + str + " user " + handleIncomingUser);
                                    doStopUidLocked(uid, valueAt);
                                }
                            }
                        }
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } finally {
                    PowerManagerInternal powerManagerInternal2 = this.mLocalPowerManager;
                    if (powerManagerInternal2 != null) {
                        powerManagerInternal2.finishUidChanges();
                    }
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void setDeterministicUidIdle(boolean z) {
        this.mDeterministicUidIdle = z;
    }

    final void idleUids() {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mOomAdjuster.idleUidsLocked();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    final void runInBackgroundDisabled(int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                UidRecord uidRecordLOSP = this.mProcessList.getUidRecordLOSP(i);
                if (uidRecordLOSP != null) {
                    if (uidRecordLOSP.isIdle()) {
                        doStopUidLocked(uidRecordLOSP.getUid(), uidRecordLOSP);
                    }
                } else {
                    doStopUidLocked(i, null);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    final void cameraActiveChanged(int i, boolean z) {
        synchronized (this.mActiveCameraUids) {
            int indexOf = this.mActiveCameraUids.indexOf(i);
            if (z) {
                if (indexOf < 0) {
                    this.mActiveCameraUids.add(i);
                }
            } else if (indexOf >= 0) {
                this.mActiveCameraUids.remove(indexOf);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final boolean isCameraActiveForUid(int i) {
        boolean z;
        synchronized (this.mActiveCameraUids) {
            z = this.mActiveCameraUids.indexOf(i) >= 0;
        }
        return z;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void doStopUidLocked(int i, UidRecord uidRecord) {
        this.mServices.stopInBackgroundLocked(i);
        enqueueUidChangeLocked(uidRecord, i, AudioDevice.IN_AMBIENT);
    }

    @GuardedBy({"this"})
    void tempAllowlistForPendingIntentLocked(int i, int i2, int i3, long j, int i4, int i5, String str) {
        if (ActivityManagerDebugConfig.DEBUG_ALLOWLISTS) {
            Slog.d("ActivityManager", "tempAllowlistForPendingIntentLocked(" + i + ", " + i2 + ", " + i3 + ", " + j + ", " + i4 + ")");
        }
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord processRecord = this.mPidsSelfLocked.get(i);
            if (processRecord == null) {
                Slog.w("ActivityManager", "tempAllowlistForPendingIntentLocked() no ProcessRecord for pid " + i);
                return;
            }
            if (!processRecord.mServices.mAllowlistManager && checkPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", i, i2) != 0 && checkPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", i, i2) != 0 && checkPermission("android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND", i, i2) != 0) {
                if (ActivityManagerDebugConfig.DEBUG_ALLOWLISTS) {
                    Slog.d("ActivityManager", "tempAllowlistForPendingIntentLocked() for target " + i3 + ": pid " + i + " is not allowed");
                }
                return;
            }
            tempAllowlistUidLocked(i3, j, i5, str, i4, i2);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void tempAllowlistUidLocked(int i, long j, int i2, String str, int i3, int i4) {
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                DeviceIdleInternal deviceIdleInternal = this.mLocalDeviceIdleController;
                int tempAllowListType = deviceIdleInternal != null ? deviceIdleInternal.getTempAllowListType(i2, i3) : i3;
                if (tempAllowListType == -1) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                this.mPendingTempAllowlist.put(i, new PendingTempAllowlist(i, j, i2, str, tempAllowListType, i4));
                setUidTempAllowlistStateLSP(i, true);
                this.mUiHandler.obtainMessage(68).sendToTarget();
                if (tempAllowListType == 0) {
                    this.mFgsStartTempAllowList.add(i, j, new FgsTempAllowListItem(j, i2, str, i4));
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    void pushTempAllowlist() {
        int size;
        PendingTempAllowlist[] pendingTempAllowlistArr;
        int i;
        int indexOfKey;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        size = this.mPendingTempAllowlist.size();
                        pendingTempAllowlistArr = new PendingTempAllowlist[size];
                        for (int i2 = 0; i2 < size; i2++) {
                            pendingTempAllowlistArr[i2] = this.mPendingTempAllowlist.valueAt(i2);
                        }
                    } finally {
                    }
                }
                resetPriorityAfterProcLockedSection();
            } finally {
            }
        }
        resetPriorityAfterLockedSection();
        if (this.mLocalDeviceIdleController != null) {
            for (int i3 = 0; i3 < size; i3++) {
                PendingTempAllowlist pendingTempAllowlist = pendingTempAllowlistArr[i3];
                if (pendingTempAllowlist != null) {
                    this.mLocalDeviceIdleController.addPowerSaveTempWhitelistAppDirect(pendingTempAllowlist.targetUid, pendingTempAllowlist.duration, pendingTempAllowlist.type, true, pendingTempAllowlist.reasonCode, pendingTempAllowlist.tag, pendingTempAllowlist.callingUid);
                }
            }
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock2) {
                    for (i = 0; i < size; i++) {
                        try {
                            PendingTempAllowlist pendingTempAllowlist2 = pendingTempAllowlistArr[i];
                            if (pendingTempAllowlist2 != null && (indexOfKey = this.mPendingTempAllowlist.indexOfKey(pendingTempAllowlist2.targetUid)) >= 0 && this.mPendingTempAllowlist.valueAt(indexOfKey) == pendingTempAllowlist2) {
                                this.mPendingTempAllowlist.removeAt(indexOfKey);
                            }
                        } finally {
                        }
                    }
                }
                resetPriorityAfterProcLockedSection();
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    @GuardedBy({"this", "mProcLock"})
    final void setAppIdTempAllowlistStateLSP(int i, boolean z) {
        this.mOomAdjuster.setAppIdTempAllowlistStateLSP(i, z);
    }

    @GuardedBy({"this", "mProcLock"})
    final void setUidTempAllowlistStateLSP(int i, boolean z) {
        this.mOomAdjuster.setUidTempAllowlistStateLSP(i, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void trimApplications(boolean z, int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                trimApplicationsLocked(z, i);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    @GuardedBy({"this"})
    private void trimApplicationsLocked(boolean z, int i) {
        boolean z2 = false;
        for (int size = this.mProcessList.mRemovedProcesses.size() - 1; size >= 0; size--) {
            ProcessRecord processRecord = this.mProcessList.mRemovedProcesses.get(size);
            int oplusReceiverRecordListSize = processRecord.getWrapper().getExtImpl().getOplusReceiverRecordListSize();
            if (!processRecord.hasActivitiesOrRecentTasks() && processRecord.mReceivers.numberOfCurReceivers() == 0 && oplusReceiverRecordListSize == 0 && processRecord.mServices.numberOfRunningServices() == 0) {
                IApplicationThread thread = processRecord.getThread();
                StringBuilder sb = new StringBuilder();
                sb.append("Exiting empty application process ");
                sb.append(processRecord.toShortString());
                sb.append(" (");
                sb.append(thread != null ? thread.asBinder() : null);
                sb.append(")\n");
                Slog.i("ActivityManager", sb.toString());
                int pid = processRecord.getPid();
                if (pid > 0 && pid != MY_PID) {
                    processRecord.killLocked("empty", 13, 4, false);
                } else if (thread != null) {
                    try {
                        thread.scheduleExit();
                    } catch (Exception unused) {
                    }
                }
                cleanUpApplicationRecordLocked(processRecord, pid, false, true, -1, false, false);
                this.mProcessList.mRemovedProcesses.remove(size);
                if (processRecord.isPersistent()) {
                    addAppLocked(processRecord.info, null, false, null, 2);
                    processRecord.mProfile.addHostingComponentType(2);
                }
                z2 = true;
            }
        }
        if (z2 || z) {
            updateOomAdjLocked(i);
        } else {
            updateOomAdjPendingTargetsLocked(i);
        }
    }

    public void signalPersistentProcesses(final int i) throws RemoteException {
        if (i != 10) {
            throw new SecurityException("Only SIGNAL_USR1 is allowed");
        }
        if (checkCallingPermission("android.permission.SIGNAL_PERSISTENT_PROCESSES") != 0) {
            throw new SecurityException("Requires permission android.permission.SIGNAL_PERSISTENT_PROCESSES");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mProcessList.forEachLruProcessesLOSP(false, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda5
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.lambda$signalPersistentProcesses$26(i, (ProcessRecord) obj);
                    }
                });
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$signalPersistentProcesses$26(int i, ProcessRecord processRecord) {
        if (processRecord.getThread() == null || !processRecord.isPersistent()) {
            return;
        }
        Process.sendSignal(processRecord.getPid(), i);
    }

    public boolean profileControl(String str, int i, boolean z, ProfilerInfo profilerInfo, int i2) throws RemoteException {
        ProcessRecord findProcessLOSP;
        boolean profileControlLPf;
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        if (z && (profilerInfo == null || profilerInfo.profileFd == null)) {
            throw new IllegalArgumentException("null profile info or fd");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            if (str != null) {
                try {
                    findProcessLOSP = findProcessLOSP(str, i, "profileControl");
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            } else {
                findProcessLOSP = null;
            }
            if (z && (findProcessLOSP == null || findProcessLOSP.getThread() == null)) {
                throw new IllegalArgumentException("Unknown process: " + str);
            }
        }
        resetPriorityAfterProcLockedSection();
        synchronized (this.mAppProfiler.mProfilerLock) {
            profileControlLPf = this.mAppProfiler.profileControlLPf(findProcessLOSP, z, profilerInfo, i2);
        }
        return profileControlLPf;
    }

    @GuardedBy(anyOf = {"this", "mProcLock"})
    private ProcessRecord findProcessLOSP(String str, int i, String str2) {
        SparseArray sparseArray;
        int handleIncomingUser = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), i, true, 2, str2, null);
        ProcessRecord processRecord = null;
        try {
            int parseInt = Integer.parseInt(str);
            synchronized (this.mPidsSelfLocked) {
                processRecord = this.mPidsSelfLocked.get(parseInt);
            }
        } catch (NumberFormatException unused) {
        }
        if (processRecord != null || (sparseArray = (SparseArray) this.mProcessList.getProcessNamesLOSP().getMap().get(str)) == null || sparseArray.size() <= 0) {
            return processRecord;
        }
        ProcessRecord processRecord2 = (ProcessRecord) sparseArray.valueAt(0);
        if (handleIncomingUser == -1 || processRecord2.userId == handleIncomingUser) {
            return processRecord2;
        }
        for (int i2 = 1; i2 < sparseArray.size(); i2++) {
            ProcessRecord processRecord3 = (ProcessRecord) sparseArray.valueAt(i2);
            if (processRecord3.userId == handleIncomingUser) {
                return processRecord3;
            }
        }
        return processRecord2;
    }

    public boolean dumpHeap(String str, int i, boolean z, boolean z2, boolean z3, String str2, ParcelFileDescriptor parcelFileDescriptor, final RemoteCallback remoteCallback) {
        IApplicationThread thread;
        try {
            try {
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                }
                if (parcelFileDescriptor == null) {
                    throw new IllegalArgumentException("null fd");
                }
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        ProcessRecord findProcessLOSP = findProcessLOSP(str, i, "dumpHeap");
                        if (findProcessLOSP == null || (thread = findProcessLOSP.getThread()) == null) {
                            throw new IllegalArgumentException("Unknown process: " + str);
                        }
                        enforceDebuggable(findProcessLOSP);
                        this.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                        thread.dumpHeap(z, z2, z3, str2, parcelFileDescriptor, new RemoteCallback(new RemoteCallback.OnResultListener() { // from class: com.android.server.am.ActivityManagerService.19
                            public void onResult(Bundle bundle) {
                                remoteCallback.sendResult(bundle);
                                ActivityManagerService.this.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
                            }
                        }, (Handler) null));
                        try {
                            this.mActivityManagerServiceExt.updateDumpUid(findProcessLOSP.uid, true, 1);
                            resetPriorityAfterLockedSection();
                            return true;
                        } catch (Throwable th) {
                            th = th;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                    }
                }
            } catch (RemoteException unused) {
                throw new IllegalStateException("Process disappeared");
            }
        } catch (Throwable th3) {
            if (parcelFileDescriptor != null) {
                try {
                    parcelFileDescriptor.close();
                } catch (IOException unused2) {
                }
            }
            throw th3;
        }
    }

    public boolean dumpResources(String str, ParcelFileDescriptor parcelFileDescriptor, RemoteCallback remoteCallback) throws RemoteException {
        IApplicationThread thread;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord findProcessLOSP = findProcessLOSP(str, -2, "dumpResources");
                if (findProcessLOSP == null || (thread = findProcessLOSP.getThread()) == null) {
                    throw new IllegalArgumentException("Unknown process: " + str);
                }
                thread.dumpResources(parcelFileDescriptor, remoteCallback);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return true;
    }

    public void dumpAllResources(ParcelFileDescriptor parcelFileDescriptor, PrintWriter printWriter) throws RemoteException {
        ArrayList arrayList = new ArrayList();
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                arrayList.addAll(this.mProcessList.getLruProcessesLOSP());
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            ProcessRecord processRecord = (ProcessRecord) arrayList.get(i);
            printWriter.println(String.format("Resources History for %s (%s)", processRecord.processName, processRecord.info.packageName));
            if (processRecord.mOptRecord.isFrozen()) {
                printWriter.println("  Skipping frozen process");
                printWriter.flush();
            } else {
                printWriter.flush();
                try {
                    TransferPipe transferPipe = new TransferPipe("  ");
                    try {
                        if (processRecord.getThread() != null) {
                            processRecord.getThread().dumpResources(transferPipe.getWriteFd(), (RemoteCallback) null);
                            transferPipe.go(parcelFileDescriptor.getFileDescriptor(), 2000L);
                        } else {
                            printWriter.println(String.format("  Resources history for %s (%s) failed, no thread", processRecord.processName, processRecord.info.packageName));
                        }
                        transferPipe.kill();
                    } catch (Throwable th2) {
                        transferPipe.kill();
                        throw th2;
                        break;
                    }
                } catch (IOException e) {
                    printWriter.println("  " + e.getMessage());
                    printWriter.flush();
                }
            }
        }
    }

    public void setDumpHeapDebugLimit(String str, int i, long j, String str2) {
        String str3;
        int i2;
        int i3;
        String str4;
        if (str != null) {
            enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDumpHeapDebugLimit()");
            str4 = str;
            i3 = i;
        } else {
            synchronized (this.mPidsSelfLocked) {
                ProcessRecord processRecord = this.mPidsSelfLocked.get(Binder.getCallingPid());
                if (processRecord == null) {
                    throw new SecurityException("No process found for calling pid " + Binder.getCallingPid());
                }
                enforceDebuggable(processRecord);
                str3 = processRecord.processName;
                i2 = processRecord.uid;
                if (str2 != null && !processRecord.getPkgList().containsKey(str2)) {
                    throw new SecurityException("Package " + str2 + " is not running in " + processRecord);
                }
            }
            i3 = i2;
            str4 = str3;
        }
        this.mAppProfiler.setDumpHeapDebugLimit(str4, i3, j, str2);
    }

    public void dumpHeapFinished(String str) {
        this.mAppProfiler.dumpHeapFinished(str, Binder.getCallingPid());
        this.mActivityManagerServiceExt.updateDumpUid(Binder.getCallingUid(), false, 1);
    }

    @Override // com.android.server.Watchdog.Monitor
    public void monitor() {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void onCoreSettingsChange(Bundle bundle) {
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mProcessList.updateCoreSettingsLOSP(bundle);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public boolean startUserInBackground(int i) {
        return startUserInBackgroundWithListener(i, null);
    }

    public boolean startUserInBackgroundWithListener(int i, IProgressListener iProgressListener) {
        return this.mUserController.startUser(i, 2, iProgressListener);
    }

    public boolean startUserInForegroundWithListener(int i, IProgressListener iProgressListener) {
        return this.mUserController.startUser(i, 1, iProgressListener);
    }

    public boolean startUserInBackgroundVisibleOnDisplay(int i, int i2, IProgressListener iProgressListener) {
        int[] displayIdsForStartingVisibleBackgroundUsers = getDisplayIdsForStartingVisibleBackgroundUsers();
        boolean z = false;
        if (displayIdsForStartingVisibleBackgroundUsers != null) {
            int i3 = 0;
            while (true) {
                if (i3 >= displayIdsForStartingVisibleBackgroundUsers.length) {
                    break;
                }
                if (i2 == displayIdsForStartingVisibleBackgroundUsers[i3]) {
                    z = true;
                    break;
                }
                i3++;
            }
        }
        if (!z) {
            throw new IllegalArgumentException("Invalid display (" + i2 + ") to start user. Valid options are: " + Arrays.toString(displayIdsForStartingVisibleBackgroundUsers));
        }
        if (ActivityManagerDebugConfig.DEBUG_MU) {
            Slogf.d(TAG_MU, "Calling startUserOnSecondaryDisplay(%d, %d, %s) using injector %s", new Object[]{Integer.valueOf(i), Integer.valueOf(i2), iProgressListener, this.mInjector});
        }
        return this.mInjector.startUserInBackgroundVisibleOnDisplay(i, i2, iProgressListener);
    }

    public int[] getDisplayIdsForStartingVisibleBackgroundUsers() {
        enforceCallingHasAtLeastOnePermission("getDisplayIdsForStartingVisibleBackgroundUsers()", "android.permission.MANAGE_USERS", "android.permission.INTERACT_ACROSS_USERS");
        return this.mInjector.getDisplayIdsForStartingVisibleBackgroundUsers();
    }

    @Deprecated
    public boolean unlockUser(int i, byte[] bArr, byte[] bArr2, IProgressListener iProgressListener) {
        return this.mUserController.unlockUser(i, iProgressListener);
    }

    public boolean unlockUser2(int i, IProgressListener iProgressListener) {
        return this.mUserController.unlockUser(i, iProgressListener);
    }

    public boolean switchUser(int i) {
        return this.mUserController.switchUser(i);
    }

    public String getSwitchingFromUserMessage() {
        return this.mUserController.getSwitchingFromSystemUserMessage();
    }

    public String getSwitchingToUserMessage() {
        return this.mUserController.getSwitchingToSystemUserMessage();
    }

    public void setStopUserOnSwitch(@ActivityManager.StopUserOnSwitch int i) {
        this.mUserController.setStopUserOnSwitch(i);
    }

    public int stopUser(int i, boolean z, IStopUserCallback iStopUserCallback) {
        return this.mUserController.stopUser(i, z, false, iStopUserCallback, null);
    }

    public int stopUserWithDelayedLocking(int i, boolean z, IStopUserCallback iStopUserCallback) {
        return this.mUserController.stopUser(i, z, true, iStopUserCallback, null);
    }

    public boolean startProfile(int i) {
        return this.mUserController.startProfile(i, false, null);
    }

    public boolean startProfileWithListener(int i, IProgressListener iProgressListener) {
        return this.mUserController.startProfile(i, false, iProgressListener);
    }

    public boolean stopProfile(int i) {
        return this.mUserController.stopProfile(i);
    }

    public UserInfo getCurrentUser() {
        return this.mUserController.getCurrentUser();
    }

    public int getCurrentUserId() {
        return this.mUserController.getCurrentUserIdChecked();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public String getStartedUserState(int i) {
        return UserState.stateToString(this.mUserController.getStartedUserState(i).state);
    }

    public boolean isUserRunning(int i, int i2) {
        if (!this.mUserController.isSameProfileGroup(i, UserHandle.getCallingUserId()) && checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") != 0) {
            String str = "Permission Denial: isUserRunning() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.INTERACT_ACROSS_USERS";
            Slog.w("ActivityManager", str);
            throw new SecurityException(str);
        }
        return this.mUserController.isUserRunning(i, i2);
    }

    public int[] getRunningUserIds() {
        if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") != 0) {
            String str = "Permission Denial: isUserRunning() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.INTERACT_ACROSS_USERS";
            Slog.w("ActivityManager", str);
            throw new SecurityException(str);
        }
        return this.mUserController.getStartedUserArray();
    }

    public void registerUserSwitchObserver(IUserSwitchObserver iUserSwitchObserver, String str) {
        this.mUserController.registerUserSwitchObserver(iUserSwitchObserver, str);
    }

    public void unregisterUserSwitchObserver(IUserSwitchObserver iUserSwitchObserver) {
        this.mUserController.unregisterUserSwitchObserver(iUserSwitchObserver);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public ApplicationInfo getAppInfoForUser(ApplicationInfo applicationInfo, int i) {
        if (applicationInfo == null) {
            return null;
        }
        ApplicationInfo applicationInfo2 = new ApplicationInfo(applicationInfo);
        applicationInfo2.initForUser(i);
        return applicationInfo2;
    }

    public boolean isUserStopped(int i) {
        return this.mUserController.getStartedUserState(i) == null;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public ActivityInfo getActivityInfoForUser(ActivityInfo activityInfo, int i) {
        if (activityInfo == null || (i < 1 && activityInfo.applicationInfo.uid < 100000)) {
            return activityInfo;
        }
        ActivityInfo activityInfo2 = new ActivityInfo(activityInfo);
        activityInfo2.applicationInfo = getAppInfoForUser(activityInfo2.applicationInfo, i);
        return activityInfo2;
    }

    @GuardedBy({"mProcLock"})
    private boolean processSanityChecksLPr(ProcessRecord processRecord, IApplicationThread iApplicationThread) {
        if (processRecord == null || iApplicationThread == null) {
            return false;
        }
        return Build.IS_DEBUGGABLE || processRecord.isDebuggable();
    }

    public boolean startBinderTracking() throws RemoteException {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mBinderTransactionTrackingEnabled = true;
                this.mProcessList.forEachLruProcessesLOSP(true, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda25
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.this.lambda$startBinderTracking$27((ProcessRecord) obj);
                    }
                });
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startBinderTracking$27(ProcessRecord processRecord) {
        IApplicationThread thread = processRecord.getThread();
        if (processSanityChecksLPr(processRecord, thread)) {
            try {
                thread.startBinderTracking();
            } catch (RemoteException unused) {
                Log.v("ActivityManager", "Process disappared");
            }
        }
    }

    public boolean stopBinderTrackingAndDump(final ParcelFileDescriptor parcelFileDescriptor) throws RemoteException {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        boolean z = true;
        try {
            ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    if (parcelFileDescriptor == null) {
                        throw new IllegalArgumentException("null fd");
                    }
                    this.mBinderTransactionTrackingEnabled = false;
                    final FastPrintWriter fastPrintWriter = new FastPrintWriter(new FileOutputStream(parcelFileDescriptor.getFileDescriptor()));
                    fastPrintWriter.println("Binder transaction traces for all processes.\n");
                    this.mProcessList.forEachLruProcessesLOSP(true, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda16
                        @Override // java.util.function.Consumer
                        public final void accept(Object obj) {
                            ActivityManagerService.this.lambda$stopBinderTrackingAndDump$28(fastPrintWriter, parcelFileDescriptor, (ProcessRecord) obj);
                        }
                    });
                    try {
                        resetPriorityAfterProcLockedSection();
                        return true;
                    } catch (Throwable th) {
                        th = th;
                        z = false;
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                }
            }
        } catch (Throwable th3) {
            if (parcelFileDescriptor != null && z) {
                try {
                    parcelFileDescriptor.close();
                } catch (IOException unused) {
                }
            }
            throw th3;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$stopBinderTrackingAndDump$28(PrintWriter printWriter, ParcelFileDescriptor parcelFileDescriptor, ProcessRecord processRecord) {
        IApplicationThread thread = processRecord.getThread();
        if (processSanityChecksLPr(processRecord, thread)) {
            printWriter.println("Traces for process: " + processRecord.processName);
            printWriter.flush();
            try {
                TransferPipe transferPipe = new TransferPipe();
                try {
                    thread.stopBinderTrackingAndDump(transferPipe.getWriteFd());
                    transferPipe.go(parcelFileDescriptor.getFileDescriptor());
                    transferPipe.kill();
                } catch (Throwable th) {
                    transferPipe.kill();
                    throw th;
                }
            } catch (RemoteException e) {
                printWriter.println("Got a RemoteException while dumping IPC traces from " + processRecord + ".  Exception: " + e);
                printWriter.flush();
            } catch (IOException e2) {
                printWriter.println("Failure while dumping IPC traces from " + processRecord + ".  Exception: " + e2);
                printWriter.flush();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void onProcessFreezableChangedLocked(ProcessRecord processRecord) {
        if (this.mEnableModernQueue) {
            this.mBroadcastQueues[0].onProcessFreezableChangedLocked(processRecord);
        }
    }

    @VisibleForTesting
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public final class LocalService extends ActivityManagerInternal implements ActivityManagerLocal {
        private boolean isSplitConfigurationChange(int i) {
            return (i & 4100) != 0;
        }

        public LocalService() {
        }

        public List<PendingIntentStats> getPendingIntentStats() {
            return ActivityManagerService.this.mPendingIntentController.dumpPendingIntentStatsForStatsd();
        }

        public Pair<String, String> getAppProfileStatsForDebugging(long j, int i) {
            return ActivityManagerService.this.mAppProfiler.getAppProfileStatsForDebugging(j, i);
        }

        public String checkContentProviderAccess(String str, int i) {
            return ActivityManagerService.this.mCpHelper.checkContentProviderAccess(str, i);
        }

        public int checkContentProviderUriPermission(Uri uri, int i, int i2, int i3) {
            return ActivityManagerService.this.mCpHelper.checkContentProviderUriPermission(uri, i, i2, i3);
        }

        public void onWakefulnessChanged(int i) {
            ActivityManagerService.this.onWakefulnessChanged(i);
        }

        public boolean startIsolatedProcess(String str, String[] strArr, String str2, String str3, int i, Runnable runnable) {
            return ActivityManagerService.this.startIsolatedProcess(str, strArr, str2, str3, i, runnable);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public ComponentName startSdkSandboxService(Intent intent, int i, String str, String str2) throws RemoteException {
            validateSdkSandboxParams(intent, i, str, str2);
            if (ActivityManagerService.this.mAppOpsService.checkPackage(i, str) != 0) {
                throw new IllegalArgumentException("uid does not belong to provided package");
            }
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ComponentName startService = activityManagerService.startService(activityManagerService.mContext.getIApplicationThread(), intent, intent.resolveTypeIfNeeded(ActivityManagerService.this.mContext.getContentResolver()), false, ActivityManagerService.this.mContext.getOpPackageName(), ActivityManagerService.this.mContext.getAttributionTag(), UserHandle.getUserId(i), true, i, str, str2);
            if (startService != null) {
                if (startService.getPackageName().equals("!")) {
                    throw new SecurityException("Not allowed to start service " + intent + " without permission " + startService.getClassName());
                }
                if (startService.getPackageName().equals("!!")) {
                    throw new SecurityException("Unable to start service " + intent + ": " + startService.getClassName());
                }
                if (startService.getPackageName().equals("?")) {
                    throw ServiceStartNotAllowedException.newInstance(false, "Not allowed to start service " + intent + ": " + startService.getClassName());
                }
            }
            return startService;
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean stopSdkSandboxService(Intent intent, int i, String str, String str2) {
            validateSdkSandboxParams(intent, i, str, str2);
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            int stopService = activityManagerService.stopService(activityManagerService.mContext.getIApplicationThread(), intent, intent.resolveTypeIfNeeded(ActivityManagerService.this.mContext.getContentResolver()), UserHandle.getUserId(i), true, i, str, str2);
            if (stopService >= 0) {
                return stopService != 0;
            }
            throw new SecurityException("Not allowed to stop service " + intent);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean bindSdkSandboxService(Intent intent, ServiceConnection serviceConnection, int i, IBinder iBinder, String str, String str2, int i2) throws RemoteException {
            return bindSdkSandboxServiceInternal(intent, serviceConnection, i, iBinder, str, str2, Integer.toUnsignedLong(i2));
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean bindSdkSandboxService(Intent intent, ServiceConnection serviceConnection, int i, IBinder iBinder, String str, String str2, Context.BindServiceFlags bindServiceFlags) throws RemoteException {
            return bindSdkSandboxServiceInternal(intent, serviceConnection, i, iBinder, str, str2, bindServiceFlags.getValue());
        }

        private boolean bindSdkSandboxServiceInternal(Intent intent, ServiceConnection serviceConnection, int i, IBinder iBinder, String str, String str2, long j) throws RemoteException {
            IApplicationThread iApplicationThread;
            validateSdkSandboxParams(intent, i, str, str2);
            if (ActivityManagerService.this.mAppOpsService.checkPackage(i, str) != 0) {
                throw new IllegalArgumentException("uid does not belong to provided package");
            }
            if (serviceConnection == null) {
                throw new IllegalArgumentException("connection is null");
            }
            Handler mainThreadHandler = ActivityManagerService.this.mContext.getMainThreadHandler();
            if (iBinder != null) {
                synchronized (this) {
                    ProcessRecord recordForAppLOSP = ActivityManagerService.this.getRecordForAppLOSP(iBinder);
                    if (recordForAppLOSP == null) {
                        Slog.i("ActivityManager", "clientApplicationThread process not found.");
                        return false;
                    }
                    if (recordForAppLOSP.info.uid != i) {
                        throw new IllegalArgumentException("clientApplicationThread does not match  client uid");
                    }
                    iApplicationThread = recordForAppLOSP.getThread();
                }
            } else {
                iApplicationThread = null;
            }
            IApplicationThread iApplicationThread2 = iApplicationThread;
            IServiceConnection serviceDispatcher = ActivityManagerService.this.mContext.getServiceDispatcher(serviceConnection, mainThreadHandler, j);
            intent.prepareToLeaveProcess(ActivityManagerService.this.mContext);
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            return activityManagerService.bindServiceInstance(activityManagerService.mContext.getIApplicationThread(), ActivityManagerService.this.mContext.getActivityToken(), intent, intent.resolveTypeIfNeeded(ActivityManagerService.this.mContext.getContentResolver()), serviceDispatcher, j, str2, true, i, str, iApplicationThread2, ActivityManagerService.this.mContext.getOpPackageName(), UserHandle.getUserId(i)) != 0;
        }

        private void validateSdkSandboxParams(Intent intent, int i, String str, String str2) {
            if (intent == null) {
                throw new IllegalArgumentException("intent is null");
            }
            if (str == null) {
                throw new IllegalArgumentException("clientAppPackage is null");
            }
            if (str2 == null) {
                throw new IllegalArgumentException("processName is null");
            }
            if (intent.getComponent() == null) {
                throw new IllegalArgumentException("service must specify explicit component");
            }
            if (!UserHandle.isApp(i)) {
                throw new IllegalArgumentException("uid is not within application range");
            }
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean bindSdkSandboxService(Intent intent, ServiceConnection serviceConnection, int i, String str, String str2, int i2) throws RemoteException {
            return bindSdkSandboxService(intent, serviceConnection, i, (IBinder) null, str, str2, i2);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public void killSdkSandboxClientAppProcess(IBinder iBinder) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ProcessRecord recordForAppLOSP = ActivityManagerService.this.getRecordForAppLOSP(iBinder);
                    if (recordForAppLOSP != null) {
                        recordForAppLOSP.killLocked("sdk sandbox died", 12, 27, true);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void onUserRemoved(int i) {
            ActivityManagerService.this.mAtmInternal.onUserStopped(i);
            ActivityManagerService.this.mBatteryStatsService.onUserRemoved(i);
        }

        public int startActivityAsUserEmpty(Bundle bundle) {
            return ActivityManagerService.this.startActivityAsUserEmpty(bundle);
        }

        public void killForegroundAppsForUser(int i) {
            int i2;
            ArrayList arrayList = new ArrayList();
            ActivityManagerGlobalLock activityManagerGlobalLock = ActivityManagerService.this.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    int size = ActivityManagerService.this.mProcessList.getProcessNamesLOSP().getMap().size();
                    for (int i3 = 0; i3 < size; i3++) {
                        SparseArray sparseArray = (SparseArray) ActivityManagerService.this.mProcessList.getProcessNamesLOSP().getMap().valueAt(i3);
                        int size2 = sparseArray.size();
                        for (int i4 = 0; i4 < size2; i4++) {
                            ProcessRecord processRecord = (ProcessRecord) sparseArray.valueAt(i4);
                            if (!processRecord.isPersistent() && (processRecord.isRemoved() || (processRecord.userId == i && processRecord.mState.hasForegroundActivities()))) {
                                arrayList.add(processRecord);
                            }
                        }
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterProcLockedSection();
            int size3 = arrayList.size();
            if (size3 > 0) {
                ActivityManagerService activityManagerService = ActivityManagerService.this;
                ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    for (i2 = 0; i2 < size3; i2++) {
                        try {
                            ActivityManagerService.this.mProcessList.removeProcessLocked((ProcessRecord) arrayList.get(i2), false, true, 13, 9, "kill all fg");
                        } catch (Throwable th2) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th2;
                        }
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            }
        }

        public void setPendingIntentAllowlistDuration(IIntentSender iIntentSender, IBinder iBinder, long j, int i, int i2, String str) {
            ActivityManagerService.this.mPendingIntentController.setPendingIntentAllowlistDuration(iIntentSender, iBinder, j, i, i2, str);
        }

        public int getPendingIntentFlags(IIntentSender iIntentSender) {
            return ActivityManagerService.this.mPendingIntentController.getPendingIntentFlags(iIntentSender);
        }

        public int[] getStartedUserIds() {
            return ActivityManagerService.this.mUserController.getStartedUserArray();
        }

        public void setPendingIntentAllowBgActivityStarts(IIntentSender iIntentSender, IBinder iBinder, int i) {
            if (!(iIntentSender instanceof PendingIntentRecord)) {
                Slog.w("ActivityManager", "setPendingIntentAllowBgActivityStarts(): not a PendingIntentRecord: " + iIntentSender);
                return;
            }
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ((PendingIntentRecord) iIntentSender).setAllowBgActivityStarts(iBinder, i);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void clearPendingIntentAllowBgActivityStarts(IIntentSender iIntentSender, IBinder iBinder) {
            if (!(iIntentSender instanceof PendingIntentRecord)) {
                Slog.w("ActivityManager", "clearPendingIntentAllowBgActivityStarts(): not a PendingIntentRecord: " + iIntentSender);
                return;
            }
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ((PendingIntentRecord) iIntentSender).clearAllowBgActivityStarts(iBinder);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void setDeviceIdleAllowlist(int[] iArr, int[] iArr2) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerGlobalLock activityManagerGlobalLock = ActivityManagerService.this.mProcLock;
                    ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                            activityManagerService2.mDeviceIdleAllowlist = iArr;
                            activityManagerService2.mDeviceIdleExceptIdleAllowlist = iArr2;
                            activityManagerService2.mAppRestrictionController.setDeviceIdleAllowlist(iArr, iArr2);
                        } catch (Throwable th) {
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th2) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void updateDeviceIdleTempAllowlist(int[] iArr, int i, boolean z, long j, int i2, int i3, String str, int i4) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerGlobalLock activityManagerGlobalLock = ActivityManagerService.this.mProcLock;
                    ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        if (iArr != null) {
                            try {
                                ActivityManagerService.this.mDeviceIdleTempAllowlist = iArr;
                            } catch (Throwable th) {
                                ActivityManagerService.resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                        if (!z) {
                            ActivityManagerService.this.mFgsStartTempAllowList.removeUid(i);
                        } else if (i2 == 0) {
                            ActivityManagerService.this.mFgsStartTempAllowList.add(i, j, new FgsTempAllowListItem(j, i3, str, i4));
                        }
                        ActivityManagerService.this.setAppIdTempAllowlistStateLSP(i, z);
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th2) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int getUidProcessState(int i) {
            return ActivityManagerService.this.getUidState(i);
        }

        public Map<Integer, String> getProcessesWithPendingBindMounts(int i) {
            return ActivityManagerService.this.mProcessList.getProcessesWithPendingBindMounts(i);
        }

        public boolean isSystemReady() {
            return ActivityManagerService.this.mSystemReady;
        }

        public boolean isModernQueueEnabled() {
            return ActivityManagerService.this.mEnableModernQueue;
        }

        public void enforceBroadcastOptionsPermissions(Bundle bundle, int i) {
            ActivityManagerService.this.enforceBroadcastOptionPermissionsInternal(bundle, i);
        }

        public String getPackageNameByPid(int i) {
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                ProcessRecord processRecord = ActivityManagerService.this.mPidsSelfLocked.get(i);
                if (processRecord == null || processRecord.info == null) {
                    return null;
                }
                return processRecord.info.packageName;
            }
        }

        public void setHasOverlayUi(int i, boolean z) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                        ProcessRecord processRecord = ActivityManagerService.this.mPidsSelfLocked.get(i);
                        if (processRecord == null) {
                            Slog.w("ActivityManager", "setHasOverlayUi called on unknown pid: " + i);
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            return;
                        }
                        if (processRecord.mState.hasOverlayUi() == z) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            return;
                        }
                        processRecord.mState.setHasOverlayUi(z);
                        ActivityManagerService.this.updateOomAdjLocked(processRecord, 9);
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public void notifyNetworkPolicyRulesUpdated(int i, long j) {
            if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                Slog.d(ActivityManagerService.TAG_NETWORK, "Got update from NPMS for uid: " + i + " seq: " + j);
            }
            ActivityManagerGlobalLock activityManagerGlobalLock = ActivityManagerService.this.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    UidRecord uidRecordLOSP = ActivityManagerService.this.mProcessList.getUidRecordLOSP(i);
                    if (uidRecordLOSP == null) {
                        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                            Slog.d(ActivityManagerService.TAG_NETWORK, "No active uidRecord for uid: " + i + " procStateSeq: " + j);
                        }
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                        return;
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    synchronized (uidRecordLOSP.networkStateLock) {
                        if (uidRecordLOSP.lastNetworkUpdatedProcStateSeq >= j) {
                            if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                                Slog.d(ActivityManagerService.TAG_NETWORK, "procStateSeq: " + j + " has already been handled for uid: " + i);
                            }
                            return;
                        }
                        uidRecordLOSP.lastNetworkUpdatedProcStateSeq = j;
                        if (uidRecordLOSP.procStateSeqWaitingForNetwork != 0 && j >= uidRecordLOSP.procStateSeqWaitingForNetwork) {
                            if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                                Slog.d(ActivityManagerService.TAG_NETWORK, "Notifying all blocking threads for uid: " + i + ", procStateSeq: " + j + ", procStateSeqWaitingForNetwork: " + uidRecordLOSP.procStateSeqWaitingForNetwork);
                            }
                            uidRecordLOSP.networkStateLock.notifyAll();
                        }
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
        }

        public void onUidBlockedReasonsChanged(int i, int i2) {
            synchronized (ActivityManagerService.this.mUidNetworkBlockedReasons) {
                if (i2 == 0) {
                    ActivityManagerService.this.mUidNetworkBlockedReasons.delete(i);
                } else {
                    ActivityManagerService.this.mUidNetworkBlockedReasons.put(i, i2);
                }
            }
        }

        public boolean isRuntimeRestarted() {
            return ActivityManagerService.this.mSystemServiceManager.isRuntimeRestarted();
        }

        public boolean canStartMoreUsers() {
            return ActivityManagerService.this.mUserController.canStartMoreUsers();
        }

        public void setSwitchingFromSystemUserMessage(String str) {
            ActivityManagerService.this.mUserController.setSwitchingFromSystemUserMessage(str);
        }

        public void setSwitchingToSystemUserMessage(String str) {
            ActivityManagerService.this.mUserController.setSwitchingToSystemUserMessage(str);
        }

        public int getMaxRunningUsers() {
            return ActivityManagerService.this.mUserController.getMaxRunningUsers();
        }

        public boolean isUidActive(int i) {
            boolean isUidActiveLOSP;
            ActivityManagerGlobalLock activityManagerGlobalLock = ActivityManagerService.this.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    isUidActiveLOSP = ActivityManagerService.this.isUidActiveLOSP(i);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterProcLockedSection();
            return isUidActiveLOSP;
        }

        public List<ProcessMemoryState> getMemoryStateForProcesses() {
            ArrayList arrayList = new ArrayList();
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                int size = ActivityManagerService.this.mPidsSelfLocked.size();
                for (int i = 0; i < size; i++) {
                    ProcessRecord valueAt = ActivityManagerService.this.mPidsSelfLocked.valueAt(i);
                    arrayList.add(new ProcessMemoryState(valueAt.uid, valueAt.getPid(), valueAt.processName, valueAt.mState.getCurAdj(), valueAt.mServices.hasForegroundServices(), valueAt.mProfile.getCurrentHostingComponentTypes(), valueAt.mProfile.getHistoricalHostingComponentTypes()));
                }
            }
            return arrayList;
        }

        public int handleIncomingUser(int i, int i2, int i3, boolean z, int i4, String str, String str2) {
            return ActivityManagerService.this.mUserController.handleIncomingUser(i, i2, i3, z, i4, str, str2);
        }

        public void enforceCallingPermission(String str, String str2) {
            ActivityManagerService.this.enforceCallingPermission(str, str2);
        }

        public Pair<Integer, Integer> getCurrentAndTargetUserIds() {
            return ActivityManagerService.this.mUserController.getCurrentAndTargetUserIds();
        }

        public int getCurrentUserId() {
            return ActivityManagerService.this.mUserController.getCurrentUserId();
        }

        public boolean isUserRunning(int i, int i2) {
            return ActivityManagerService.this.mUserController.isUserRunning(i, i2);
        }

        public void trimApplications() {
            ActivityManagerService.this.trimApplications(true, 1);
        }

        public void killProcessesForRemovedTask(ArrayList<Object> arrayList) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                for (int i = 0; i < arrayList.size(); i++) {
                    try {
                        ProcessRecord processRecord = (ProcessRecord) ((WindowProcessController) arrayList.get(i)).mOwner;
                        if (ActivityManager.isProcStateBackground(processRecord.mState.getSetProcState()) && processRecord.mReceivers.numberOfCurReceivers() == 0) {
                            processRecord.killLocked("remove task", 10, 22, true);
                            if (processRecord.getThread() == null) {
                                Slog.v("ActivityManager", "the actual proc is null, call handleAppDiedLocked for " + processRecord.toString());
                                ActivityManagerService.this.handleAppDiedLocked(processRecord, processRecord.getPid(), false, true, false);
                            }
                        } else {
                            processRecord.setWaitingToKill("remove task");
                        }
                    } catch (Throwable th) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void killProcess(String str, int i, String str2) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ProcessRecord processRecordLocked = ActivityManagerService.this.getProcessRecordLocked(str, i);
                    if (processRecordLocked != null) {
                        ActivityManagerService.this.mProcessList.removeProcessLocked(processRecordLocked, false, true, 13, str2);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean hasRunningActivity(final int i, final String str) {
            boolean z;
            if (str == null) {
                return false;
            }
            ActivityManagerGlobalLock activityManagerGlobalLock = ActivityManagerService.this.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    z = ActivityManagerService.this.mProcessList.searchEachLruProcessesLOSP(true, new Function() { // from class: com.android.server.am.ActivityManagerService$LocalService$$ExternalSyntheticLambda0
                        @Override // java.util.function.Function
                        public final Object apply(Object obj) {
                            Boolean lambda$hasRunningActivity$0;
                            lambda$hasRunningActivity$0 = ActivityManagerService.LocalService.lambda$hasRunningActivity$0(i, str, (ProcessRecord) obj);
                            return lambda$hasRunningActivity$0;
                        }
                    }) != null;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterProcLockedSection();
            return z;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ Boolean lambda$hasRunningActivity$0(int i, String str, ProcessRecord processRecord) {
            if (processRecord.uid == i && processRecord.getWindowProcessController().hasRunningActivity(str)) {
                return Boolean.TRUE;
            }
            return null;
        }

        public void updateOomAdj(int i) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.updateOomAdjLocked(i);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void updateCpuStats() {
            ActivityManagerService.this.updateCpuStats();
        }

        public void updateBatteryStats(ComponentName componentName, int i, int i2, boolean z) {
            ActivityManagerService.this.updateBatteryStats(componentName, i, i2, z);
        }

        public void updateActivityUsageStats(ComponentName componentName, int i, int i2, IBinder iBinder, ComponentName componentName2, ActivityId activityId) {
            ActivityManagerService.this.updateActivityUsageStats(componentName, i, i2, iBinder, componentName2, activityId);
        }

        public void updateForegroundTimeIfOnBattery(String str, int i, long j) {
            ActivityManagerService.this.mBatteryStatsService.updateForegroundTimeIfOnBattery(str, i, j);
        }

        public void sendForegroundProfileChanged(int i) {
            ActivityManagerService.this.mUserController.sendForegroundProfileChanged(i);
        }

        public boolean shouldConfirmCredentials(int i) {
            return ActivityManagerService.this.mUserController.shouldConfirmCredentials(i);
        }

        public void noteAlarmFinish(PendingIntent pendingIntent, WorkSource workSource, int i, String str) {
            ActivityManagerService.this.noteAlarmFinish(pendingIntent != null ? pendingIntent.getTarget() : null, workSource, i, str);
        }

        public void noteAlarmStart(PendingIntent pendingIntent, WorkSource workSource, int i, String str) {
            ActivityManagerService.this.noteAlarmStart(pendingIntent != null ? pendingIntent.getTarget() : null, workSource, i, str);
        }

        public void noteWakeupAlarm(PendingIntent pendingIntent, WorkSource workSource, int i, String str, String str2) {
            ActivityManagerService.this.noteWakeupAlarm(pendingIntent != null ? pendingIntent.getTarget() : null, workSource, i, str, str2);
        }

        public boolean isAppStartModeDisabled(int i, String str) {
            return ActivityManagerService.this.isAppStartModeDisabled(i, str);
        }

        public int[] getCurrentProfileIds() {
            return ActivityManagerService.this.mUserController.getCurrentProfileIds();
        }

        public UserInfo getCurrentUser() {
            return ActivityManagerService.this.mUserController.getCurrentUser();
        }

        public void ensureNotSpecialUser(int i) {
            ActivityManagerService.this.mUserController.ensureNotSpecialUser(i);
        }

        public boolean isCurrentProfile(int i) {
            return ActivityManagerService.this.mUserController.isCurrentProfile(i);
        }

        public boolean hasStartedUserState(int i) {
            return ActivityManagerService.this.mUserController.hasStartedUserState(i);
        }

        public void finishUserSwitch(Object obj) {
            ActivityManagerService.this.mUserController.finishUserSwitch((UserState) obj);
        }

        public void scheduleAppGcs() {
            synchronized (ActivityManagerService.this.mAppProfiler.mProfilerLock) {
                ActivityManagerService.this.mAppProfiler.scheduleAppGcsLPf();
            }
        }

        public int getTaskIdForActivity(IBinder iBinder, boolean z) {
            return ActivityManagerService.this.getTaskForActivity(iBinder, z);
        }

        public ActivityPresentationInfo getActivityPresentationInfo(IBinder iBinder) {
            ActivityClient activityClient = ActivityClient.getInstance();
            return new ActivityPresentationInfo(activityClient.getTaskForActivity(iBinder, false), activityClient.getDisplayId(iBinder), ActivityManagerService.this.mAtmInternal.getActivityName(iBinder));
        }

        public void setBooting(boolean z) {
            ActivityManagerService.this.mBooting = z;
        }

        public boolean isBooting() {
            return ActivityManagerService.this.mBooting;
        }

        public void setBooted(boolean z) {
            ActivityManagerService.this.mBooted = z;
        }

        public boolean isBooted() {
            return ActivityManagerService.this.mBooted;
        }

        public void finishBooting() {
            ActivityManagerService.this.finishBooting();
        }

        public void tempAllowlistForPendingIntent(int i, int i2, int i3, long j, int i4, int i5, String str) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.tempAllowlistForPendingIntentLocked(i, i2, i3, j, i4, i5, str);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int broadcastIntentInPackage(String str, String str2, int i, int i2, int i3, Intent intent, String str3, IApplicationThread iApplicationThread, IIntentReceiver iIntentReceiver, int i4, String str4, Bundle bundle, String str5, Bundle bundle2, boolean z, boolean z2, int i5, BackgroundStartPrivileges backgroundStartPrivileges, int[] iArr) {
            int broadcastIntentInPackage;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    broadcastIntentInPackage = ActivityManagerService.this.broadcastIntentInPackage(str, str2, i, i2, i3, intent, str3, ActivityManagerService.this.getRecordForAppLOSP(iApplicationThread), iIntentReceiver, i4, str4, bundle, str5, bundle2, z, z2, i5, backgroundStartPrivileges, iArr);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return broadcastIntentInPackage;
        }

        public int broadcastIntent(Intent intent, IIntentReceiver iIntentReceiver, String[] strArr, boolean z, int i, int[] iArr, BiFunction<Integer, Bundle, Bundle> biFunction, Bundle bundle) {
            int broadcastIntentLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    Intent verifyBroadcastLocked = ActivityManagerService.this.verifyBroadcastLocked(intent);
                    int callingPid = Binder.getCallingPid();
                    int callingUid = Binder.getCallingUid();
                    long clearCallingIdentity = Binder.clearCallingIdentity();
                    try {
                        broadcastIntentLocked = ActivityManagerService.this.broadcastIntentLocked(null, null, null, verifyBroadcastLocked, null, null, iIntentReceiver, 0, null, null, strArr, null, null, -1, bundle, z, false, callingPid, callingUid, callingUid, callingPid, i, BackgroundStartPrivileges.NONE, iArr, biFunction);
                    } finally {
                        Binder.restoreCallingIdentity(clearCallingIdentity);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return broadcastIntentLocked;
        }

        public int broadcastIntentWithCallback(Intent intent, IIntentReceiver iIntentReceiver, String[] strArr, int i, int[] iArr, BiFunction<Integer, Bundle, Bundle> biFunction, Bundle bundle) {
            return broadcastIntent(intent, iIntentReceiver, strArr, !isModernQueueEnabled(), i, iArr, biFunction, bundle);
        }

        public ComponentName startServiceInPackage(int i, Intent intent, String str, boolean z, String str2, String str3, int i2, BackgroundStartPrivileges backgroundStartPrivileges) throws TransactionTooLargeException {
            ComponentName startServiceLocked;
            if (ActivityManagerDebugConfig.DEBUG_SERVICE) {
                Slog.v(ActivityManagerService.TAG_SERVICE, "startServiceInPackage: " + intent + " type=" + str);
            }
            long clearCallingIdentity = Binder.clearCallingIdentity();
            try {
                if (Trace.isTagEnabled(64L)) {
                    Trace.traceBegin(64L, "startServiceInPackage: intent=" + intent + ", caller=" + str2 + ", fgRequired=" + z);
                }
                ActivityManagerService activityManagerService = ActivityManagerService.this;
                ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        startServiceLocked = ActivityManagerService.this.mServices.startServiceLocked(null, intent, str, -1, i, z, str2, str3, i2, backgroundStartPrivileges);
                    } catch (Throwable th) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
                return startServiceLocked;
            } finally {
                Trace.traceEnd(64L);
                Binder.restoreCallingIdentity(clearCallingIdentity);
            }
        }

        public void disconnectActivityFromServices(Object obj) {
            final ActivityServiceConnectionsHolder activityServiceConnectionsHolder = (ActivityServiceConnectionsHolder) obj;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerGlobalLock activityManagerGlobalLock = ActivityManagerService.this.mProcLock;
                    ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            activityServiceConnectionsHolder.forEachConnection(new Consumer() { // from class: com.android.server.am.ActivityManagerService$LocalService$$ExternalSyntheticLambda1
                                @Override // java.util.function.Consumer
                                public final void accept(Object obj2) {
                                    ActivityManagerService.LocalService.this.lambda$disconnectActivityFromServices$1(activityServiceConnectionsHolder, obj2);
                                }
                            });
                        } catch (Throwable th) {
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th2) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$disconnectActivityFromServices$1(ActivityServiceConnectionsHolder activityServiceConnectionsHolder, Object obj) {
            ActivityManagerService.this.mServices.removeConnectionLocked((ConnectionRecord) obj, null, activityServiceConnectionsHolder, false);
        }

        public void cleanUpServices(int i, ComponentName componentName, Intent intent) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mServices.cleanUpServices(i, componentName, intent);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public ActivityInfo getActivityInfoForUser(ActivityInfo activityInfo, int i) {
            return ActivityManagerService.this.getActivityInfoForUser(activityInfo, i);
        }

        public void ensureBootCompleted() {
            ActivityManagerService.this.ensureBootCompleted();
        }

        public void updateOomLevelsForDisplay(int i) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                    WindowManagerService windowManagerService = activityManagerService2.mWindowManager;
                    if (windowManagerService != null) {
                        activityManagerService2.mProcessList.applyDisplaySize(windowManagerService);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean isActivityStartsLoggingEnabled() {
            return ActivityManagerService.this.mConstants.mFlagActivityStartsLoggingEnabled;
        }

        public boolean isBackgroundActivityStartsEnabled() {
            return ActivityManagerService.this.mConstants.mFlagBackgroundActivityStartsEnabled;
        }

        public BackgroundStartPrivileges getBackgroundStartPrivileges(int i) {
            return ActivityManagerService.this.getBackgroundStartPrivileges(i);
        }

        public boolean canScheduleUserInitiatedJobs(int i, int i2, String str) {
            return ActivityManagerService.this.canScheduleUserInitiatedJobs(i, i2, str);
        }

        public void reportCurKeyguardUsageEvent(boolean z) {
            ActivityManagerService.this.reportGlobalUsageEvent(z ? 17 : 18);
        }

        public void monitor() {
            ActivityManagerService.this.monitor();
        }

        public long inputDispatchingTimedOut(int i, boolean z, TimeoutRecord timeoutRecord) {
            return ActivityManagerService.this.inputDispatchingTimedOut(i, z, timeoutRecord);
        }

        public boolean inputDispatchingTimedOut(Object obj, String str, ApplicationInfo applicationInfo, String str2, Object obj2, boolean z, TimeoutRecord timeoutRecord) {
            return ActivityManagerService.this.inputDispatchingTimedOut((ProcessRecord) obj, str, applicationInfo, str2, (WindowProcessController) obj2, z, timeoutRecord);
        }

        public void inputDispatchingResumed(int i) {
            ProcessRecord processRecord;
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                processRecord = ActivityManagerService.this.mPidsSelfLocked.get(i);
            }
            if (processRecord != null) {
                ActivityManagerService.this.mAppErrors.handleDismissAnrDialogs(processRecord);
            }
        }

        public void rescheduleAnrDialog(Object obj) {
            Message obtain = Message.obtain();
            obtain.what = 2;
            obtain.obj = (AppNotRespondingDialog.Data) obj;
            ActivityManagerService.this.mUiHandler.sendMessageDelayed(obtain, InputConstants.DEFAULT_DISPATCHING_TIMEOUT_MILLIS);
        }

        public void broadcastGlobalConfigurationChanged(int i, boolean z) {
            int i2;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    Intent intent = new Intent("android.intent.action.CONFIGURATION_CHANGED");
                    intent.addFlags(1881145344);
                    Bundle bundle = new BroadcastOptions().setDeliveryGroupPolicy(1).setDeferralPolicy(2).toBundle();
                    ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                    int i3 = ActivityManagerService.MY_PID;
                    activityManagerService2.broadcastIntentLocked(null, null, null, intent, null, null, 0, null, null, null, null, null, -1, bundle, false, false, i3, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    if ((i & 4) != 0) {
                        Intent intent2 = new Intent("android.intent.action.LOCALE_CHANGED");
                        intent2.addFlags(18876416);
                        if (z || !ActivityManagerService.this.mProcessesReady) {
                            intent2.addFlags(1073741824);
                        }
                        BroadcastOptions makeBasic = BroadcastOptions.makeBasic();
                        makeBasic.setTemporaryAppAllowlist(ActivityManagerService.this.mInternal.getBootTimeTempAllowListDuration(), 0, 206, "");
                        i2 = 1;
                        makeBasic.setDeliveryGroupPolicy(1);
                        makeBasic.setDeferralPolicy(2);
                        ActivityManagerService.this.broadcastIntentLocked(null, null, null, intent2, null, null, 0, null, null, null, null, null, -1, makeBasic.toBundle(), false, false, i3, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    } else {
                        i2 = 1;
                    }
                    if (!z && isSplitConfigurationChange(i)) {
                        Intent intent3 = new Intent("android.intent.action.SPLIT_CONFIGURATION_CHANGED");
                        intent3.addFlags(AudioFormat.APTX_HD);
                        String[] strArr = new String[i2];
                        strArr[0] = "android.permission.INSTALL_PACKAGES";
                        ActivityManagerService.this.broadcastIntentLocked(null, null, null, intent3, null, null, 0, null, null, strArr, null, null, -1, null, false, false, i3, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void broadcastCloseSystemDialogs(String str) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    Intent intent = new Intent("android.intent.action.CLOSE_SYSTEM_DIALOGS");
                    intent.addFlags(1342177280);
                    if (str != null) {
                        intent.putExtra("reason", str);
                    }
                    BroadcastOptions deferralPolicy = new BroadcastOptions().setDeliveryGroupPolicy(1).setDeferralPolicy(2);
                    if (str != null) {
                        deferralPolicy.setDeliveryGroupMatchingKey("android.intent.action.CLOSE_SYSTEM_DIALOGS", str);
                    }
                    ActivityManagerService.this.broadcastIntentLocked(null, null, null, intent, null, null, 0, null, null, null, null, null, -1, deferralPolicy.toBundle(), false, false, -1, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void appNotResponding(String str, int i, TimeoutRecord timeoutRecord) {
            ActivityManagerService.this.appNotResponding(str, i, timeoutRecord);
        }

        public void killAllBackgroundProcessesExcept(int i, int i2) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.killAllBackgroundProcessesExcept(i, i2);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void startProcess(String str, ApplicationInfo applicationInfo, boolean z, boolean z2, String str2, ComponentName componentName) {
            try {
                if (Trace.isTagEnabled(64L)) {
                    Trace.traceBegin(64L, "startProcess:" + str);
                }
                ActivityManagerService activityManagerService = ActivityManagerService.this;
                ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        ActivityManagerService.this.startProcessLocked(str, applicationInfo, z, 0, new HostingRecord(str2, componentName, z2), 1, false, false);
                    } catch (Throwable th) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            } finally {
                Trace.traceEnd(64L);
            }
        }

        public void setDebugFlagsForStartingActivity(ActivityInfo activityInfo, int i, ProfilerInfo profilerInfo, Object obj) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    synchronized (obj) {
                        if ((i & 2) != 0) {
                            try {
                                ActivityManagerService.this.setDebugApp(activityInfo.processName, true, false, (i & 16) != 0);
                            } catch (Throwable th) {
                                throw th;
                            }
                        }
                        if ((i & 8) != 0) {
                            ActivityManagerService.this.setNativeDebuggingAppLocked(activityInfo.applicationInfo, activityInfo.processName);
                        }
                        if ((i & 4) != 0) {
                            ActivityManagerService.this.setTrackAllocationApp(activityInfo.applicationInfo, activityInfo.processName);
                        }
                        if (profilerInfo != null) {
                            ActivityManagerService.this.setProfileApp(activityInfo.applicationInfo, activityInfo.processName, profilerInfo, null);
                        }
                        obj.notify();
                    }
                } catch (Throwable th2) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int getStorageMountMode(int i, int i2) {
            int mountMode;
            if (i2 == 2000 || i2 == 0) {
                return 1;
            }
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                ProcessRecord processRecord = ActivityManagerService.this.mPidsSelfLocked.get(i);
                mountMode = processRecord == null ? 0 : processRecord.getMountMode();
            }
            return mountMode;
        }

        public boolean isAppForeground(int i) {
            return ActivityManagerService.this.isAppForeground(i);
        }

        public boolean isAppBad(String str, int i) {
            return ActivityManagerService.this.isAppBad(str, i);
        }

        public void clearPendingBackup(int i) {
            ActivityManagerService.this.clearPendingBackup(i);
        }

        public void prepareForPossibleShutdown() {
            ActivityManagerService.this.prepareForPossibleShutdown();
        }

        public boolean hasRunningForegroundService(int i, int i2) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    UidRecord uidRecord = ActivityManagerService.this.mProcessList.mActiveUids.get(i);
                    if (uidRecord == null) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        return false;
                    }
                    for (int numOfProcs = uidRecord.getNumOfProcs() - 1; numOfProcs >= 0; numOfProcs--) {
                        if (uidRecord.getProcessRecordByIndex(numOfProcs).mServices.containsAnyForegroundServiceTypes(i2)) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            return true;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return false;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public boolean hasForegroundServiceNotification(String str, int i, String str2) {
            boolean hasForegroundServiceNotificationLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    hasForegroundServiceNotificationLocked = ActivityManagerService.this.mServices.hasForegroundServiceNotificationLocked(str, i, str2);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return hasForegroundServiceNotificationLocked;
        }

        public ActivityManagerInternal.ServiceNotificationPolicy applyForegroundServiceNotification(Notification notification, String str, int i, String str2, int i2) {
            ActivityManagerInternal.ServiceNotificationPolicy applyForegroundServiceNotificationLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    applyForegroundServiceNotificationLocked = ActivityManagerService.this.mServices.applyForegroundServiceNotificationLocked(notification, str, i, str2, i2);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return applyForegroundServiceNotificationLocked;
        }

        public void onForegroundServiceNotificationUpdate(boolean z, Notification notification, int i, String str, int i2) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mServices.onForegroundServiceNotificationUpdateLocked(z, notification, i, str, i2);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void stopAppForUser(String str, int i) {
            ActivityManagerService.this.stopAppForUserInternal(str, i);
        }

        public void registerProcessObserver(IProcessObserver iProcessObserver) {
            ActivityManagerService.this.registerProcessObserver(iProcessObserver);
        }

        public void unregisterProcessObserver(IProcessObserver iProcessObserver) {
            ActivityManagerService.this.unregisterProcessObserver(iProcessObserver);
        }

        public int getInstrumentationSourceUid(int i) {
            ApplicationInfo applicationInfo;
            ActivityManagerGlobalLock activityManagerGlobalLock = ActivityManagerService.this.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    for (int size = ActivityManagerService.this.mActiveInstrumentation.size() - 1; size >= 0; size--) {
                        ActiveInstrumentation activeInstrumentation = ActivityManagerService.this.mActiveInstrumentation.get(size);
                        if (!activeInstrumentation.mFinished && (applicationInfo = activeInstrumentation.mTargetInfo) != null && applicationInfo.uid == i) {
                            int i2 = activeInstrumentation.mSourceUid;
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                            return i2;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return -1;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
        }

        public void setDeviceOwnerUid(int i) {
            ActivityManagerService.this.mDeviceOwnerUid = i;
        }

        public boolean isDeviceOwner(int i) {
            return i >= 0 && ActivityManagerService.this.mDeviceOwnerUid == i;
        }

        public void setProfileOwnerUid(ArraySet<Integer> arraySet) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mProfileOwnerUids = arraySet;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean isProfileOwner(int i) {
            boolean z;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    z = ActivityManagerService.this.mProfileOwnerUids != null && ActivityManagerService.this.mProfileOwnerUids.indexOf(Integer.valueOf(i)) >= 0;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return z;
        }

        public void setCompanionAppUids(int i, Set<Integer> set) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mCompanionAppUidsMap.put(Integer.valueOf(i), set);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean isAssociatedCompanionApp(int i, int i2) {
            Set set = (Set) ActivityManagerService.this.mCompanionAppUidsMap.get(Integer.valueOf(i));
            if (set == null) {
                return false;
            }
            return set.contains(Integer.valueOf(i2));
        }

        public void addPendingTopUid(int i, int i2, IApplicationThread iApplicationThread) {
            boolean add = ActivityManagerService.this.mPendingStartActivityUids.add(i, i2);
            if (add) {
                ActivityManagerService.this.mOomAdjuster.mCachedAppOptimizer.unfreezeProcess(i2, 1);
            }
            if (!add || ActivityManagerService.this.mNetworkPolicyUidObserver == null) {
                return;
            }
            try {
                long nextProcStateSeq = ActivityManagerService.this.mProcessList.getNextProcStateSeq();
                ActivityManagerService.this.mNetworkPolicyUidObserver.onUidStateChanged(i, 2, nextProcStateSeq, 63);
                if (iApplicationThread == null || !shouldWaitForNetworkRulesUpdate(i)) {
                    return;
                }
                iApplicationThread.setNetworkBlockSeq(nextProcStateSeq);
            } catch (RemoteException e) {
                Slog.d("ActivityManager", "Error calling setNetworkBlockSeq", e);
            }
        }

        private boolean shouldWaitForNetworkRulesUpdate(int i) {
            boolean z;
            synchronized (ActivityManagerService.this.mUidNetworkBlockedReasons) {
                z = false;
                int i2 = ActivityManagerService.this.mUidNetworkBlockedReasons.get(i, 0);
                if (i2 != 0 && NetworkPolicyManagerInternal.updateBlockedReasonsWithProcState(i2, 2) == 0) {
                    z = true;
                }
            }
            return z;
        }

        public void deletePendingTopUid(int i, long j) {
            ActivityManagerService.this.mPendingStartActivityUids.delete(i, j);
        }

        public boolean isPendingTopUid(int i) {
            return ActivityManagerService.this.mPendingStartActivityUids.isPendingTopUid(i);
        }

        public Intent getIntentForIntentSender(IIntentSender iIntentSender) {
            return ActivityManagerService.this.getIntentForIntentSender(iIntentSender);
        }

        public PendingIntent getPendingIntentActivityAsApp(int i, Intent intent, int i2, Bundle bundle, String str, int i3) {
            return getPendingIntentActivityAsApp(i, new Intent[]{intent}, i2, bundle, str, i3);
        }

        public PendingIntent getPendingIntentActivityAsApp(int i, Intent[] intentArr, int i2, Bundle bundle, String str, int i3) {
            if (((i2 & 67108864) != 0) == ((i2 & 33554432) != 0)) {
                throw new IllegalArgumentException("Must set exactly one of FLAG_IMMUTABLE or FLAG_MUTABLE");
            }
            Context context = ActivityManagerService.this.mContext;
            ContentResolver contentResolver = context.getContentResolver();
            int length = intentArr.length;
            String[] strArr = new String[length];
            for (int i4 = 0; i4 < length; i4++) {
                Intent intent = intentArr[i4];
                strArr[i4] = intent.resolveTypeIfNeeded(contentResolver);
                intent.migrateExtraStreamToClipData(context);
                intent.prepareToLeaveProcess(context);
            }
            IIntentSender intentSenderWithFeatureAsApp = ActivityManagerService.this.getIntentSenderWithFeatureAsApp(2, str, context.getAttributionTag(), null, null, i, intentArr, strArr, i2, bundle, UserHandle.getUserId(i3), i3);
            if (intentSenderWithFeatureAsApp != null) {
                return new PendingIntent(intentSenderWithFeatureAsApp);
            }
            return null;
        }

        public long getBootTimeTempAllowListDuration() {
            return ActivityManagerService.this.mConstants.mBootTimeTempAllowlistDuration;
        }

        public void registerAnrController(AnrController anrController) {
            ActivityManagerService.this.mActivityTaskManager.registerAnrController(anrController);
        }

        public void unregisterAnrController(AnrController anrController) {
            ActivityManagerService.this.mActivityTaskManager.unregisterAnrController(anrController);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean canStartForegroundService(int i, int i2, String str) {
            boolean canStartForegroundServiceLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    canStartForegroundServiceLocked = ActivityManagerService.this.mServices.canStartForegroundServiceLocked(i, i2, str);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return canStartForegroundServiceLocked;
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public void tempAllowWhileInUsePermissionInFgs(int i, long j) {
            ActivityManagerService.this.mFgsWhileInUseTempAllowList.add(i, j, "");
        }

        public boolean isTempAllowlistedForFgsWhileInUse(int i) {
            return ActivityManagerService.this.mFgsWhileInUseTempAllowList.isAllowed(i);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean canAllowWhileInUsePermissionInFgs(int i, int i2, String str) {
            boolean canAllowWhileInUsePermissionInFgsLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    canAllowWhileInUsePermissionInFgsLocked = ActivityManagerService.this.mServices.canAllowWhileInUsePermissionInFgsLocked(i, i2, str);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return canAllowWhileInUsePermissionInFgsLocked;
        }

        public int getPushMessagingOverQuotaBehavior() {
            int i;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    i = ActivityManagerService.this.mConstants.mPushMessagingOverQuotaBehavior;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return i;
        }

        public int getServiceStartForegroundTimeout() {
            return ActivityManagerService.this.mConstants.mServiceStartForegroundTimeoutMs;
        }

        public int getUidCapability(int i) {
            int curCapability;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    UidRecord uidRecordLOSP = ActivityManagerService.this.mProcessList.getUidRecordLOSP(i);
                    if (uidRecordLOSP == null) {
                        throw new IllegalArgumentException("uid record for " + i + " not found");
                    }
                    curCapability = uidRecordLOSP.getCurCapability();
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return curCapability;
        }

        public List<Integer> getIsolatedProcesses(int i) {
            List<Integer> isolatedProcessesLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    isolatedProcessesLocked = ActivityManagerService.this.mProcessList.getIsolatedProcessesLocked(i);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return isolatedProcessesLocked;
        }

        public int sendIntentSender(IIntentSender iIntentSender, IBinder iBinder, int i, Intent intent, String str, IIntentReceiver iIntentReceiver, String str2, Bundle bundle) {
            return ActivityManagerService.this.sendIntentSender(null, iIntentSender, iBinder, i, intent, str, iIntentReceiver, str2, bundle);
        }

        public void setVoiceInteractionManagerProvider(ActivityManagerInternal.VoiceInteractionManagerProvider voiceInteractionManagerProvider) {
            ActivityManagerService.this.setVoiceInteractionManagerProvider(voiceInteractionManagerProvider);
        }

        public void setStopUserOnSwitch(int i) {
            ActivityManagerService.this.setStopUserOnSwitch(i);
        }

        public int getRestrictionLevel(int i) {
            return ActivityManagerService.this.mAppRestrictionController.getRestrictionLevel(i);
        }

        public int getRestrictionLevel(String str, int i) {
            return ActivityManagerService.this.mAppRestrictionController.getRestrictionLevel(str, i);
        }

        public boolean isBgAutoRestrictedBucketFeatureFlagEnabled() {
            return ActivityManagerService.this.mAppRestrictionController.isBgAutoRestrictedBucketFeatureFlagEnabled();
        }

        public void addAppBackgroundRestrictionListener(ActivityManagerInternal.AppBackgroundRestrictionListener appBackgroundRestrictionListener) {
            ActivityManagerService.this.mAppRestrictionController.addAppBackgroundRestrictionListener(appBackgroundRestrictionListener);
        }

        public void addForegroundServiceStateListener(ActivityManagerInternal.ForegroundServiceStateListener foregroundServiceStateListener) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mForegroundServiceStateListeners.add(foregroundServiceStateListener);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void addBroadcastEventListener(ActivityManagerInternal.BroadcastEventListener broadcastEventListener) {
            ActivityManagerService.this.mBroadcastEventListeners.add(broadcastEventListener);
        }

        public void addBindServiceEventListener(ActivityManagerInternal.BindServiceEventListener bindServiceEventListener) {
            ActivityManagerService.this.mBindServiceEventListeners.add(bindServiceEventListener);
        }

        public void restart() {
            ActivityManagerService.this.restart();
        }

        public void registerNetworkPolicyUidObserver(IUidObserver iUidObserver, int i, int i2, String str) {
            ActivityManagerService.this.mNetworkPolicyUidObserver = iUidObserver;
            ActivityManagerService.this.mUidObserverController.register(iUidObserver, i, i2, str, Binder.getCallingUid(), null);
        }

        public boolean startForegroundServiceDelegate(ForegroundServiceDelegationOptions foregroundServiceDelegationOptions, ServiceConnection serviceConnection) {
            boolean startForegroundServiceDelegateLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    startForegroundServiceDelegateLocked = ActivityManagerService.this.mServices.startForegroundServiceDelegateLocked(foregroundServiceDelegationOptions, serviceConnection);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return startForegroundServiceDelegateLocked;
        }

        public void stopForegroundServiceDelegate(ForegroundServiceDelegationOptions foregroundServiceDelegationOptions) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mServices.stopForegroundServiceDelegateLocked(foregroundServiceDelegationOptions);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void stopForegroundServiceDelegate(ServiceConnection serviceConnection) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mServices.stopForegroundServiceDelegateLocked(serviceConnection);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public ArraySet<String> getClientPackages(String str) {
            ArraySet<String> clientPackagesLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    clientPackagesLocked = ActivityManagerService.this.mServices.getClientPackagesLocked(str);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return clientPackagesLocked;
        }

        public IUnsafeIntentStrictModeCallback getRegisteredStrictModeCallback(int i) {
            return (IUnsafeIntentStrictModeCallback) ActivityManagerService.this.mStrictModeCallbacks.get(i);
        }

        public void unregisterStrictModeCallback(int i) {
            ActivityManagerService.this.mStrictModeCallbacks.remove(i);
        }

        public boolean startProfileEvenWhenDisabled(int i) {
            return ActivityManagerService.this.mUserController.startProfile(i, true, null);
        }

        public void logFgsApiBegin(int i, int i2, int i3) {
            synchronized (this) {
                ActivityManagerService.this.mServices.logFgsApiBeginLocked(i, i2, i3);
            }
        }

        public void logFgsApiEnd(int i, int i2, int i3) {
            synchronized (this) {
                ActivityManagerService.this.mServices.logFgsApiEndLocked(i, i2, i3);
            }
        }

        public void notifyMediaProjectionEvent(int i, IBinder iBinder, int i2) {
            ActivityManagerService.this.notifyMediaProjectionEvent(i, iBinder, i2);
        }

        public StatsEvent getCachedAppsHighWatermarkStats(int i, boolean z) {
            return ActivityManagerService.this.mAppProfiler.mCachedAppsWatermarkData.getCachedAppsHighWatermarkStats(i, z);
        }
    }

    long inputDispatchingTimedOut(int i, boolean z, TimeoutRecord timeoutRecord) {
        ProcessRecord processRecord;
        long j;
        if (checkCallingPermission("android.permission.FILTER_EVENTS") != 0) {
            throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
        }
        timeoutRecord.mLatencyTracker.waitingOnPidLockStarted();
        synchronized (this.mPidsSelfLocked) {
            timeoutRecord.mLatencyTracker.waitingOnPidLockEnded();
            processRecord = this.mPidsSelfLocked.get(i);
        }
        if (this.mActivityManagerServiceExt.isWaitingPermissionChoice(processRecord)) {
            return BROADCAST_BG_TIMEOUT;
        }
        if (processRecord != null) {
            j = processRecord.getInputDispatchingTimeoutMillis();
        } else {
            j = InputConstants.DEFAULT_DISPATCHING_TIMEOUT_MILLIS;
        }
        if (inputDispatchingTimedOut(processRecord, null, null, null, null, z, timeoutRecord)) {
            return 0L;
        }
        return j;
    }

    /* JADX WARN: Finally extract failed */
    boolean inputDispatchingTimedOut(ProcessRecord processRecord, String str, ApplicationInfo applicationInfo, String str2, WindowProcessController windowProcessController, boolean z, TimeoutRecord timeoutRecord) {
        try {
            Trace.traceBegin(64L, "inputDispatchingTimedOut()");
            if (checkCallingPermission("android.permission.FILTER_EVENTS") != 0) {
                throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
            }
            if (this.mActivityManagerServiceExt.isWaitingPermissionChoice(processRecord)) {
                return true;
            }
            if (processRecord != null) {
                this.mActivityManagerServiceExt.cancelCheck(processRecord);
                timeoutRecord.mLatencyTracker.waitingOnAMSLockStarted();
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        timeoutRecord.mLatencyTracker.waitingOnAMSLockEnded();
                        if (!processRecord.isDebugging()) {
                            if (!this.mSocExt.isAnrDeferrable()) {
                                if (processRecord.getActiveInstrumentation() != null) {
                                    Bundle bundle = new Bundle();
                                    bundle.putString("shortMsg", "keyDispatchingTimedOut");
                                    bundle.putString("longMsg", timeoutRecord.mReason);
                                    finishInstrumentationLocked(processRecord, 0, bundle);
                                    resetPriorityAfterLockedSection();
                                    return true;
                                }
                                resetPriorityAfterLockedSection();
                                this.mActivityManagerServiceExt.dumpActivityAndWindow();
                                this.mAnrHelper.appNotResponding(processRecord, str, applicationInfo, str2, windowProcessController, z, timeoutRecord, true);
                            }
                        }
                        resetPriorityAfterLockedSection();
                        return false;
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            return true;
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public void waitForNetworkStateUpdate(long j) {
        int callingUid = Binder.getCallingUid();
        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
            Slog.d(TAG_NETWORK, "Called from " + callingUid + " to wait for seq: " + j);
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                UidRecord uidRecordLOSP = this.mProcessList.getUidRecordLOSP(callingUid);
                if (uidRecordLOSP == null) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                resetPriorityAfterProcLockedSection();
                synchronized (uidRecordLOSP.networkStateLock) {
                    if (uidRecordLOSP.lastNetworkUpdatedProcStateSeq >= j) {
                        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                            Slog.d(TAG_NETWORK, "Network rules have been already updated for seq no. " + j + ", so no need to wait. Uid: " + callingUid + ", lastProcStateSeqWithUpdatedNetworkState: " + uidRecordLOSP.lastNetworkUpdatedProcStateSeq);
                        }
                        return;
                    }
                    try {
                        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                            Slog.d(TAG_NETWORK, "Starting to wait for the network rules update. Uid: " + callingUid + " procStateSeq: " + j);
                        }
                        long uptimeMillis = SystemClock.uptimeMillis();
                        uidRecordLOSP.procStateSeqWaitingForNetwork = j;
                        uidRecordLOSP.networkStateLock.wait(this.mConstants.mNetworkAccessTimeoutMs);
                        uidRecordLOSP.procStateSeqWaitingForNetwork = 0L;
                        long uptimeMillis2 = SystemClock.uptimeMillis() - uptimeMillis;
                        if (uptimeMillis2 >= this.mConstants.mNetworkAccessTimeoutMs || ActivityManagerDebugConfig.DEBUG_NETWORK) {
                            Slog.w(TAG_NETWORK, "Total time waited for network rules to get updated: " + uptimeMillis2 + ". Uid: " + callingUid + " procStateSeq: " + j + " UidRec: " + uidRecordLOSP + " validateUidRec: " + this.mUidObserverController.getValidateUidRecord(callingUid));
                        }
                    } catch (InterruptedException unused) {
                        Thread.currentThread().interrupt();
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public void waitForBroadcastIdle() {
        waitForBroadcastIdle(ActivityManagerDebugConfig.LOG_WRITER_INFO, false);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void waitForBroadcastIdle(PrintWriter printWriter, boolean z) {
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastIdle()");
        if (z) {
            BroadcastLoopers.waitForIdle(printWriter);
        }
        for (BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.waitForIdle(printWriter);
        }
        printWriter.println("All broadcast queues are idle!");
        printWriter.flush();
    }

    public void waitForBroadcastBarrier() {
        waitForBroadcastBarrier(ActivityManagerDebugConfig.LOG_WRITER_INFO, false, false);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void waitForBroadcastBarrier(PrintWriter printWriter, boolean z, boolean z2) {
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastBarrier()");
        if (z) {
            BroadcastLoopers.waitForBarrier(printWriter);
        }
        for (BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.waitForBarrier(printWriter);
        }
        if (z2) {
            waitForApplicationBarrier(printWriter);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void waitForApplicationBarrier(PrintWriter printWriter) {
        ArrayMap arrayMap;
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        int i = 0;
        final AtomicInteger atomicInteger = new AtomicInteger(0);
        final AtomicInteger atomicInteger2 = new AtomicInteger(0);
        RemoteCallback remoteCallback = new RemoteCallback(new RemoteCallback.OnResultListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda4
            public final void onResult(Bundle bundle) {
                ActivityManagerService.lambda$waitForApplicationBarrier$29(atomicInteger2, atomicInteger, countDownLatch, bundle);
            }
        });
        atomicInteger.incrementAndGet();
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        ArrayMap map = this.mProcessList.getProcessNamesLOSP().getMap();
                        int size = map.size();
                        int i2 = 0;
                        while (i2 < size) {
                            SparseArray sparseArray = (SparseArray) map.valueAt(i2);
                            int size2 = sparseArray.size();
                            int i3 = i;
                            while (i3 < size2) {
                                ProcessRecord processRecord = (ProcessRecord) sparseArray.valueAt(i3);
                                IApplicationThread onewayThread = processRecord.getOnewayThread();
                                if (onewayThread != null) {
                                    arrayMap = map;
                                    this.mOomAdjuster.mCachedAppOptimizer.unfreezeTemporarily(processRecord, 15);
                                    atomicInteger.incrementAndGet();
                                    try {
                                        onewayThread.schedulePing(remoteCallback);
                                    } catch (RemoteException unused) {
                                        remoteCallback.sendResult((Bundle) null);
                                    }
                                } else {
                                    arrayMap = map;
                                }
                                i3++;
                                map = arrayMap;
                            }
                            i2++;
                            i = 0;
                        }
                    } catch (Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        remoteCallback.sendResult((Bundle) null);
        for (int i4 = 0; i4 < 30; i4++) {
            if (countDownLatch.await(1L, TimeUnit.SECONDS)) {
                printWriter.println("Finished application barriers!");
                printWriter.flush();
                return;
            }
            printWriter.println("Waiting for application barriers, at " + atomicInteger2.get() + " of " + atomicInteger.get() + "...");
            printWriter.flush();
        }
        printWriter.println("Gave up waiting for application barriers!");
        printWriter.flush();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$waitForApplicationBarrier$29(AtomicInteger atomicInteger, AtomicInteger atomicInteger2, CountDownLatch countDownLatch, Bundle bundle) {
        if (atomicInteger.incrementAndGet() == atomicInteger2.get()) {
            countDownLatch.countDown();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void waitForBroadcastDispatch(PrintWriter printWriter, Intent intent) {
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastDispatch");
        for (BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.waitForDispatched(intent, printWriter);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void setIgnoreDeliveryGroupPolicy(String str) {
        Objects.requireNonNull(str);
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastBarrier()");
        synchronized (this.mDeliveryGroupPolicyIgnoredActions) {
            this.mDeliveryGroupPolicyIgnoredActions.add(str);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void clearIgnoreDeliveryGroupPolicy(String str) {
        Objects.requireNonNull(str);
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastBarrier()");
        synchronized (this.mDeliveryGroupPolicyIgnoredActions) {
            this.mDeliveryGroupPolicyIgnoredActions.remove(str);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean shouldIgnoreDeliveryGroupPolicy(String str) {
        boolean contains;
        if (str == null) {
            return false;
        }
        synchronized (this.mDeliveryGroupPolicyIgnoredActions) {
            contains = this.mDeliveryGroupPolicyIgnoredActions.contains(str);
        }
        return contains;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void dumpDeliveryGroupPolicyIgnoredActions(IndentingPrintWriter indentingPrintWriter) {
        synchronized (this.mDeliveryGroupPolicyIgnoredActions) {
            indentingPrintWriter.println(this.mDeliveryGroupPolicyIgnoredActions);
        }
    }

    public void forceDelayBroadcastDelivery(String str, long j) {
        Objects.requireNonNull(str);
        Preconditions.checkArgumentNonnegative(j);
        enforceCallingPermission("android.permission.DUMP", "forceDelayBroadcastDelivery()");
        if (this.mEnableModernQueue) {
            for (BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
                broadcastQueue.forceDelayBroadcastDelivery(str, j);
            }
        }
    }

    public boolean isModernBroadcastQueueEnabled() {
        enforceCallingPermission("android.permission.DUMP", "isModernBroadcastQueueEnabled()");
        return this.mEnableModernQueue;
    }

    public boolean isProcessFrozen(int i) {
        enforceCallingPermission("android.permission.DUMP", "isProcessFrozen()");
        return this.mOomAdjuster.mCachedAppOptimizer.isProcessFrozen(i);
    }

    public int getBackgroundRestrictionExemptionReason(int i) {
        enforceCallingPermission("android.permission.DEVICE_POWER", "getBackgroundRestrictionExemptionReason()");
        return this.mAppRestrictionController.getBackgroundRestrictionExemptionReason(i);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void setBackgroundRestrictionLevel(String str, int i, int i2, int i3, int i4, int i5) {
        int callingUid = Binder.getCallingUid();
        if (callingUid != 1000 && callingUid != 0 && callingUid != 2000) {
            throw new SecurityException("No permission to change app restriction level");
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            this.mAppRestrictionController.applyRestrictionLevel(str, i, i3, null, this.mUsageStatsService.getAppStandbyBucket(str, i2, SystemClock.elapsedRealtime()), true, i4, i5);
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public int getBackgroundRestrictionLevel(String str, int i) {
        int callingUid = Binder.getCallingUid();
        if (callingUid != 1000 && callingUid != 0 && callingUid != 2000) {
            throw new SecurityException("Don't have permission to query app background restriction level");
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            return this.mInternal.getRestrictionLevel(str, i);
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void setForegroundServiceDelegate(String str, int i, boolean z, int i2, String str2) {
        long j;
        int callingUid = Binder.getCallingUid();
        if (callingUid != 1000 && callingUid != 0 && callingUid != 2000) {
            throw new SecurityException("No permission to start/stop foreground service delegate");
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
        } catch (Throwable th) {
            th = th;
        }
        try {
            try {
                synchronized (this) {
                    try {
                        ArrayList arrayList = new ArrayList();
                        synchronized (this.mPidsSelfLocked) {
                            boolean z2 = false;
                            int i3 = 0;
                            while (i3 < this.mPidsSelfLocked.size()) {
                                try {
                                    ProcessRecord valueAt = this.mPidsSelfLocked.valueAt(i3);
                                    IApplicationThread thread = valueAt.getThread();
                                    if (valueAt.uid != i || thread == null) {
                                        j = clearCallingIdentity;
                                    } else {
                                        j = clearCallingIdentity;
                                        try {
                                            arrayList.add(new ForegroundServiceDelegationOptions(this.mPidsSelfLocked.keyAt(i3), i, str, (IApplicationThread) null, false, str2, 0, i2));
                                            z2 = true;
                                        } catch (Throwable th2) {
                                            th = th2;
                                            throw th;
                                        }
                                    }
                                    i3++;
                                    clearCallingIdentity = j;
                                } catch (Throwable th3) {
                                    th = th3;
                                }
                            }
                            long j2 = clearCallingIdentity;
                            for (int size = arrayList.size() - 1; size >= 0; size--) {
                                ForegroundServiceDelegationOptions foregroundServiceDelegationOptions = (ForegroundServiceDelegationOptions) arrayList.get(size);
                                if (z) {
                                    this.mInternal.startForegroundServiceDelegate(foregroundServiceDelegationOptions, (ServiceConnection) null);
                                } else {
                                    this.mInternal.stopForegroundServiceDelegate(foregroundServiceDelegationOptions);
                                }
                            }
                            resetPriorityAfterLockedSection();
                            if (!z2) {
                                Slog.e("ActivityManager", "setForegroundServiceDelegate can not find process for packageName:" + str + " uid:" + i);
                            }
                            Binder.restoreCallingIdentity(j2);
                        }
                    } catch (Throwable th4) {
                        th = th4;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            } catch (Throwable th5) {
                th = th5;
            }
        } catch (Throwable th6) {
            th = th6;
            Binder.restoreCallingIdentity(clearCallingIdentity);
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void refreshSettingsCache() {
        this.mCoreSettingsObserver.onChange(true);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void resetDropboxRateLimiter() {
        this.mDropboxRateLimiter.reset();
        BootReceiver.resetDropboxRateLimiter();
    }

    public void killPackageDependents(String str, int i) {
        int i2;
        enforceCallingPermission("android.permission.KILL_UID", "killPackageDependents()");
        if (str == null) {
            throw new NullPointerException("Cannot kill the dependents of a package without its name.");
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            i2 = AppGlobals.getPackageManager().getPackageUid(str, 268435456L, i);
        } catch (RemoteException unused) {
            i2 = -1;
        }
        if (i != -1 && i2 == -1) {
            throw new IllegalArgumentException("Cannot kill dependents of non-existing package " + str);
        }
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            this.mProcessList.killPackageProcessesLSP(str, UserHandle.getAppId(i2), i, 0, 12, 0, "dep: " + str);
                        } catch (Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                } catch (Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public int restartUserInBackground(int i, int i2) {
        return this.mUserController.restartUser(i, i2);
    }

    public void scheduleApplicationInfoChanged(List<String> list, int i) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "scheduleApplicationInfoChanged()");
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boolean contains = list.contains("android");
            ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    updateApplicationInfoLOSP(list, contains, i);
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            AppWidgetManagerInternal appWidgetManagerInternal = (AppWidgetManagerInternal) LocalServices.getService(AppWidgetManagerInternal.class);
            if (appWidgetManagerInternal != null) {
                appWidgetManagerInternal.applyResourceOverlaysToWidgets(new HashSet(list), i, contains);
            }
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void updateSystemUiContext() {
        ActivityThread.currentActivityThread().handleSystemApplicationInfoChanged(getPackageManagerInternal().getApplicationInfo("android", 1024L, Binder.getCallingUid(), 0));
    }

    @GuardedBy(anyOf = {"this", "mProcLock"})
    private void updateApplicationInfoLOSP(List<String> list, boolean z, int i) {
        if (z) {
            ParsingPackageUtils.readConfigUseRoundIcon((Resources) null);
        }
        this.mProcessList.updateApplicationInfoLOSP(list, i, z);
        if (z) {
            Executor executor = ActivityThread.currentActivityThread().getExecutor();
            final DisplayManagerInternal displayManagerInternal = (DisplayManagerInternal) LocalServices.getService(DisplayManagerInternal.class);
            if (displayManagerInternal != null) {
                executor.execute(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda11
                    @Override // java.lang.Runnable
                    public final void run() {
                        displayManagerInternal.onOverlayChanged();
                    }
                });
            }
            final WindowManagerService windowManagerService = this.mWindowManager;
            if (windowManagerService != null) {
                Objects.requireNonNull(windowManagerService);
                executor.execute(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda12
                    @Override // java.lang.Runnable
                    public final void run() {
                        windowManagerService.onOverlayChanged();
                    }
                });
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void scheduleUpdateBinderHeavyHitterWatcherConfig() {
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda34
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$34();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$34() {
        int i;
        float f;
        BinderCallHeavyHitterWatcher.BinderCallHeavyHitterListener binderCallHeavyHitterListener;
        boolean z;
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                if (ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_ENABLED) {
                    this.mHandler.removeMessages(72);
                    i = ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_BATCHSIZE;
                    f = ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_THRESHOLD;
                    binderCallHeavyHitterListener = new BinderCallHeavyHitterWatcher.BinderCallHeavyHitterListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda31
                        public final void onHeavyHit(List list, int i2, float f2, long j) {
                            ActivityManagerService.this.lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$31(list, i2, f2, j);
                        }
                    };
                    z = true;
                } else if (this.mHandler.hasMessages(72)) {
                    boolean z2 = ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_ENABLED;
                    int i2 = ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_BATCHSIZE;
                    float f2 = ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_THRESHOLD;
                    BinderCallHeavyHitterWatcher.BinderCallHeavyHitterListener binderCallHeavyHitterListener2 = new BinderCallHeavyHitterWatcher.BinderCallHeavyHitterListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda32
                        public final void onHeavyHit(List list, int i3, float f3, long j) {
                            ActivityManagerService.this.lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$33(list, i3, f3, j);
                        }
                    };
                    z = z2;
                    i = i2;
                    f = f2;
                    binderCallHeavyHitterListener = binderCallHeavyHitterListener2;
                } else {
                    i = 0;
                    f = 0.0f;
                    binderCallHeavyHitterListener = null;
                    z = false;
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        Binder.setHeavyHitterWatcherConfig(z, i, f, binderCallHeavyHitterListener);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$31(final List list, final int i, final float f, final long j) {
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda24
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$30(list, i, f, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$33(final List list, final int i, final float f, final long j) {
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda39
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$32(list, i, f, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void scheduleBinderHeavyHitterAutoSampler() {
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda38
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.lambda$scheduleBinderHeavyHitterAutoSampler$37();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scheduleBinderHeavyHitterAutoSampler$37() {
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                if (!ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_ENABLED) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                if (ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_ENABLED) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                long uptimeMillis = SystemClock.uptimeMillis();
                if (this.mLastBinderHeavyHitterAutoSamplerStart + 3600000 > uptimeMillis) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                int i = ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_BATCHSIZE;
                float f = ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_THRESHOLD;
                resetPriorityAfterProcLockedSection();
                this.mLastBinderHeavyHitterAutoSamplerStart = uptimeMillis;
                Binder.setHeavyHitterWatcherConfig(true, i, f, new BinderCallHeavyHitterWatcher.BinderCallHeavyHitterListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda9
                    public final void onHeavyHit(List list, int i2, float f2, long j) {
                        ActivityManagerService.this.lambda$scheduleBinderHeavyHitterAutoSampler$36(list, i2, f2, j);
                    }
                });
                MainHandler mainHandler = this.mHandler;
                mainHandler.sendMessageDelayed(mainHandler.obtainMessage(72), 300000L);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scheduleBinderHeavyHitterAutoSampler$36(final List list, final int i, final float f, final long j) {
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda33
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.lambda$scheduleBinderHeavyHitterAutoSampler$35(list, i, f, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void handleBinderHeavyHitterAutoSamplerTimeOut() {
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                if (ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_ENABLED) {
                    resetPriorityAfterProcLockedSection();
                } else {
                    resetPriorityAfterProcLockedSection();
                    Binder.setHeavyHitterWatcherConfig(false, 0, 0.0f, null);
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: handleBinderHeavyHitters, reason: merged with bridge method [inline-methods] and merged with bridge method [inline-methods] and merged with bridge method [inline-methods] */
    public void lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$32(List<BinderCallHeavyHitterWatcher.HeavyHitterContainer> list, int i, float f, long j) {
        int size = list.size();
        if (size == 0) {
            return;
        }
        BinderTransactionNameResolver binderTransactionNameResolver = new BinderTransactionNameResolver();
        StringBuilder sb = new StringBuilder("Excessive incoming binder calls(>");
        sb.append(String.format("%.1f%%", Float.valueOf(f * 100.0f)));
        sb.append(',');
        sb.append(i);
        sb.append(',');
        sb.append(j);
        sb.append("ms): ");
        for (int i2 = 0; i2 < size; i2++) {
            if (i2 > 0) {
                sb.append(", ");
            }
            BinderCallHeavyHitterWatcher.HeavyHitterContainer heavyHitterContainer = list.get(i2);
            sb.append('[');
            sb.append(heavyHitterContainer.mUid);
            sb.append(',');
            sb.append(heavyHitterContainer.mClass.getName());
            sb.append(',');
            sb.append(binderTransactionNameResolver.getMethodName(heavyHitterContainer.mClass, heavyHitterContainer.mCode));
            sb.append(',');
            sb.append(heavyHitterContainer.mCode);
            sb.append(',');
            sb.append(String.format("%.1f%%", Float.valueOf(heavyHitterContainer.mFrequency * 100.0f)));
            sb.append(']');
        }
        Slog.w("ActivityManager", sb.toString());
    }

    public void attachAgent(String str, String str2) {
        IApplicationThread thread;
        try {
            ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    ProcessRecord findProcessLOSP = findProcessLOSP(str, 0, "attachAgent");
                    if (findProcessLOSP == null || (thread = findProcessLOSP.getThread()) == null) {
                        throw new IllegalArgumentException("Unknown process: " + str);
                    }
                    enforceDebuggable(findProcessLOSP);
                    thread.attachAgent(str2);
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
        } catch (RemoteException unused) {
            throw new IllegalStateException("Process disappeared");
        }
    }

    public void prepareForPossibleShutdown() {
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.prepareForPossibleShutdown();
        }
    }

    @VisibleForTesting
    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    public static class Injector {
        private final Context mContext;
        private NetworkManagementInternal mNmi;
        private UserController mUserController;

        public Injector(Context context) {
            this.mContext = context;
        }

        public Context getContext() {
            return this.mContext;
        }

        public AppOpsService getAppOpsService(File file, File file2, Handler handler) {
            return new AppOpsService(file, file2, handler, getContext());
        }

        public Handler getUiHandler(ActivityManagerService activityManagerService) {
            Objects.requireNonNull(activityManagerService);
            return new UiHandler();
        }

        public boolean isNetworkRestrictedForUid(int i) {
            if (ensureHasNetworkManagementInternal()) {
                return this.mNmi.isNetworkRestrictedForUid(i);
            }
            return false;
        }

        public int[] getDisplayIdsForStartingVisibleBackgroundUsers() {
            boolean z;
            if (!UserManager.isVisibleBackgroundUsersEnabled()) {
                Slogf.w("ActivityManager", "getDisplayIdsForStartingVisibleBackgroundUsers(): not supported");
                return null;
            }
            DisplayManager displayManager = (DisplayManager) this.mContext.getSystemService(DisplayManager.class);
            Display[] displays = displayManager.getDisplays();
            if (displays == null || displays.length == 0) {
                Slogf.wtf("ActivityManager", "displayManager (%s) returned no displays", new Object[]{displayManager});
                return null;
            }
            int length = displays.length;
            int i = 0;
            while (true) {
                if (i >= length) {
                    z = false;
                    break;
                }
                if (displays[i].getDisplayId() == 0) {
                    z = true;
                    break;
                }
                i++;
            }
            if (!z) {
                Slogf.wtf("ActivityManager", "displayManager (%s) has %d displays (%s), but none has id DEFAULT_DISPLAY (%d)", new Object[]{displayManager, Integer.valueOf(displays.length), Arrays.toString(displays), 0});
                return null;
            }
            boolean isVisibleBackgroundUsersOnDefaultDisplayEnabled = UserManager.isVisibleBackgroundUsersOnDefaultDisplayEnabled();
            int length2 = displays.length;
            if (!isVisibleBackgroundUsersOnDefaultDisplayEnabled) {
                length2--;
            }
            int[] iArr = new int[length2];
            int i2 = 0;
            for (Display display : displays) {
                int displayId = display.getDisplayId();
                if (display.isValid() && (isVisibleBackgroundUsersOnDefaultDisplayEnabled || displayId != 0)) {
                    iArr[i2] = displayId;
                    i2++;
                }
            }
            if (i2 == 0) {
                int i3 = SystemProperties.getInt("fw.display_ids_for_starting_users_for_testing_purposes", 0);
                if ((isVisibleBackgroundUsersOnDefaultDisplayEnabled && i3 == 0) || i3 > 0) {
                    Slogf.w("ActivityManager", "getDisplayIdsForStartingVisibleBackgroundUsers(): no valid display found, but returning %d as set by property %s", new Object[]{Integer.valueOf(i3), "fw.display_ids_for_starting_users_for_testing_purposes"});
                    return new int[]{i3};
                }
                Slogf.e("ActivityManager", "getDisplayIdsForStartingVisibleBackgroundUsers(): no valid display on %s", new Object[]{Arrays.toString(displays)});
                return null;
            }
            if (i2 != length2) {
                int[] iArr2 = new int[i2];
                System.arraycopy(iArr, 0, iArr2, 0, i2);
                if (ActivityManagerDebugConfig.DEBUG_MU) {
                    Slogf.d("ActivityManager", "getDisplayIdsForStartingVisibleBackgroundUsers(): returning only valid displays (%d instead of %d): %s", new Object[]{Integer.valueOf(i2), Integer.valueOf(length2), Arrays.toString(iArr2)});
                }
                return iArr2;
            }
            if (ActivityManagerDebugConfig.DEBUG_MU) {
                Slogf.d("ActivityManager", "getDisplayIdsForStartingVisibleBackgroundUsers(): returning all (but DEFAULT_DISPLAY) displays : %s", new Object[]{Arrays.toString(iArr)});
            }
            return iArr;
        }

        public boolean startUserInBackgroundVisibleOnDisplay(int i, int i2, IProgressListener iProgressListener) {
            return this.mUserController.startUserVisibleOnDisplay(i, i2, iProgressListener);
        }

        public ProcessList getProcessList(ActivityManagerService activityManagerService) {
            return new ProcessList();
        }

        public BatteryStatsService getBatteryStatsService() {
            Context context = this.mContext;
            File ensureSystemDir = SystemServiceManager.ensureSystemDir();
            BackgroundThread.get();
            return new BatteryStatsService(context, ensureSystemDir, BackgroundThread.getHandler());
        }

        public ActiveServices getActiveServices(ActivityManagerService activityManagerService) {
            return new ActiveServices(activityManagerService);
        }

        private boolean ensureHasNetworkManagementInternal() {
            if (this.mNmi == null) {
                this.mNmi = (NetworkManagementInternal) LocalServices.getService(NetworkManagementInternal.class);
            }
            return this.mNmi != null;
        }
    }

    public void startDelegateShellPermissionIdentity(int i, String[] strArr) {
        if (UserHandle.getCallingAppId() != 2000 && UserHandle.getCallingAppId() != 0) {
            throw new SecurityException("Only the shell can delegate its permissions");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                if (this.mAppOpsService.getAppOpsServiceDelegate() != null) {
                    if (!(this.mAppOpsService.getAppOpsServiceDelegate() instanceof ShellDelegate)) {
                        throw new IllegalStateException("Bad shell delegate state");
                    }
                    if (((ShellDelegate) this.mAppOpsService.getAppOpsServiceDelegate()).getDelegateUid() != i) {
                        throw new SecurityException("Shell can delegate permissions only to one instrumentation at a time");
                    }
                }
                int size = this.mActiveInstrumentation.size();
                for (int i2 = 0; i2 < size; i2++) {
                    ActiveInstrumentation activeInstrumentation = this.mActiveInstrumentation.get(i2);
                    if (activeInstrumentation.mTargetInfo.uid == i) {
                        if (activeInstrumentation.mUiAutomationConnection == null) {
                            throw new SecurityException("Shell can delegate its permissions only to an instrumentation started from the shell");
                        }
                        this.mAppOpsService.setAppOpsServiceDelegate(new ShellDelegate(i, strArr));
                        getPermissionManagerInternal().startShellPermissionIdentityDelegation(i, activeInstrumentation.mTargetInfo.packageName, strArr != null ? Arrays.asList(strArr) : null);
                        resetPriorityAfterProcLockedSection();
                        return;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public void stopDelegateShellPermissionIdentity() {
        if (UserHandle.getCallingAppId() != 2000 && UserHandle.getCallingAppId() != 0) {
            throw new SecurityException("Only the shell can delegate its permissions");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mAppOpsService.setAppOpsServiceDelegate(null);
                getPermissionManagerInternal().stopShellPermissionIdentityDelegation();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public List<String> getDelegatedShellPermissions() {
        List<String> delegatedShellPermissions;
        if (UserHandle.getCallingAppId() != 2000 && UserHandle.getCallingAppId() != 0) {
            throw new SecurityException("Only the shell can get delegated permissions");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                delegatedShellPermissions = getPermissionManagerInternal().getDelegatedShellPermissions();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return delegatedShellPermissions;
    }

    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    private class ShellDelegate implements AppOpsManagerInternal.CheckOpsDelegate {
        private final String[] mPermissions;
        private final int mTargetUid;

        ShellDelegate(int i, String[] strArr) {
            this.mTargetUid = i;
            this.mPermissions = strArr;
        }

        int getDelegateUid() {
            return this.mTargetUid;
        }

        public int checkOperation(int i, int i2, String str, String str2, boolean z, QuintFunction<Integer, Integer, String, String, Boolean, Integer> quintFunction) {
            if (i2 == this.mTargetUid && isTargetOp(i)) {
                int uid = UserHandle.getUid(UserHandle.getUserId(i2), 2000);
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    return ((Integer) quintFunction.apply(Integer.valueOf(i), Integer.valueOf(uid), ActivityManagerService.SHELL_APP_PACKAGE, (Object) null, Boolean.valueOf(z))).intValue();
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            return ((Integer) quintFunction.apply(Integer.valueOf(i), Integer.valueOf(i2), str, str2, Boolean.valueOf(z))).intValue();
        }

        public int checkAudioOperation(int i, int i2, int i3, String str, QuadFunction<Integer, Integer, Integer, String, Integer> quadFunction) {
            if (i3 == this.mTargetUid && isTargetOp(i)) {
                int uid = UserHandle.getUid(UserHandle.getUserId(i3), 2000);
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    return ((Integer) quadFunction.apply(Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(uid), ActivityManagerService.SHELL_APP_PACKAGE)).intValue();
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            return ((Integer) quadFunction.apply(Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i3), str)).intValue();
        }

        public SyncNotedAppOp noteOperation(int i, int i2, String str, String str2, boolean z, String str3, boolean z2, HeptFunction<Integer, Integer, String, String, Boolean, String, Boolean, SyncNotedAppOp> heptFunction) {
            if (i2 == this.mTargetUid && isTargetOp(i)) {
                int uid = UserHandle.getUid(UserHandle.getUserId(i2), 2000);
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    return (SyncNotedAppOp) heptFunction.apply(Integer.valueOf(i), Integer.valueOf(uid), ActivityManagerService.SHELL_APP_PACKAGE, str2, Boolean.valueOf(z), str3, Boolean.valueOf(z2));
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            return (SyncNotedAppOp) heptFunction.apply(Integer.valueOf(i), Integer.valueOf(i2), str, str2, Boolean.valueOf(z), str3, Boolean.valueOf(z2));
        }

        public SyncNotedAppOp noteProxyOperation(int i, AttributionSource attributionSource, boolean z, String str, boolean z2, boolean z3, HexFunction<Integer, AttributionSource, Boolean, String, Boolean, Boolean, SyncNotedAppOp> hexFunction) {
            if (attributionSource.getUid() == this.mTargetUid && isTargetOp(i)) {
                int uid = UserHandle.getUid(UserHandle.getUserId(attributionSource.getUid()), 2000);
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    return (SyncNotedAppOp) hexFunction.apply(Integer.valueOf(i), new AttributionSource(uid, -1, ActivityManagerService.SHELL_APP_PACKAGE, attributionSource.getAttributionTag(), attributionSource.getToken(), null, attributionSource.getNext()), Boolean.valueOf(z), str, Boolean.valueOf(z2), Boolean.valueOf(z3));
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            return (SyncNotedAppOp) hexFunction.apply(Integer.valueOf(i), attributionSource, Boolean.valueOf(z), str, Boolean.valueOf(z2), Boolean.valueOf(z3));
        }

        public SyncNotedAppOp startOperation(IBinder iBinder, int i, int i2, String str, String str2, boolean z, boolean z2, String str3, boolean z3, int i3, int i4, UndecFunction<IBinder, Integer, Integer, String, String, Boolean, Boolean, String, Boolean, Integer, Integer, SyncNotedAppOp> undecFunction) {
            if (i2 == this.mTargetUid && isTargetOp(i)) {
                int uid = UserHandle.getUid(UserHandle.getUserId(i2), 2000);
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    return (SyncNotedAppOp) undecFunction.apply(iBinder, Integer.valueOf(i), Integer.valueOf(uid), ActivityManagerService.SHELL_APP_PACKAGE, str2, Boolean.valueOf(z), Boolean.valueOf(z2), str3, Boolean.valueOf(z3), Integer.valueOf(i3), Integer.valueOf(i4));
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            return (SyncNotedAppOp) undecFunction.apply(iBinder, Integer.valueOf(i), Integer.valueOf(i2), str, str2, Boolean.valueOf(z), Boolean.valueOf(z2), str3, Boolean.valueOf(z3), Integer.valueOf(i3), Integer.valueOf(i4));
        }

        public SyncNotedAppOp startProxyOperation(IBinder iBinder, int i, AttributionSource attributionSource, boolean z, boolean z2, String str, boolean z3, boolean z4, int i2, int i3, int i4, UndecFunction<IBinder, Integer, AttributionSource, Boolean, Boolean, String, Boolean, Boolean, Integer, Integer, Integer, SyncNotedAppOp> undecFunction) {
            if (attributionSource.getUid() == this.mTargetUid && isTargetOp(i)) {
                int uid = UserHandle.getUid(UserHandle.getUserId(attributionSource.getUid()), 2000);
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    return (SyncNotedAppOp) undecFunction.apply(iBinder, Integer.valueOf(i), new AttributionSource(uid, -1, ActivityManagerService.SHELL_APP_PACKAGE, attributionSource.getAttributionTag(), attributionSource.getToken(), null, attributionSource.getNext()), Boolean.valueOf(z), Boolean.valueOf(z2), str, Boolean.valueOf(z3), Boolean.valueOf(z4), Integer.valueOf(i2), Integer.valueOf(i3), Integer.valueOf(i4));
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            return (SyncNotedAppOp) undecFunction.apply(iBinder, Integer.valueOf(i), attributionSource, Boolean.valueOf(z), Boolean.valueOf(z2), str, Boolean.valueOf(z3), Boolean.valueOf(z4), Integer.valueOf(i2), Integer.valueOf(i3), Integer.valueOf(i4));
        }

        public void finishProxyOperation(IBinder iBinder, int i, AttributionSource attributionSource, boolean z, QuadFunction<IBinder, Integer, AttributionSource, Boolean, Void> quadFunction) {
            if (attributionSource.getUid() == this.mTargetUid && isTargetOp(i)) {
                int uid = UserHandle.getUid(UserHandle.getUserId(attributionSource.getUid()), 2000);
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    quadFunction.apply(iBinder, Integer.valueOf(i), new AttributionSource(uid, -1, ActivityManagerService.SHELL_APP_PACKAGE, attributionSource.getAttributionTag(), attributionSource.getToken(), null, attributionSource.getNext()), Boolean.valueOf(z));
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            quadFunction.apply(iBinder, Integer.valueOf(i), attributionSource, Boolean.valueOf(z));
        }

        private boolean isTargetOp(int i) {
            String opToPermission;
            if (this.mPermissions == null || (opToPermission = AppOpsManager.opToPermission(i)) == null) {
                return true;
            }
            return isTargetPermission(opToPermission);
        }

        private boolean isTargetPermission(String str) {
            String[] strArr = this.mPermissions;
            return strArr == null || ArrayUtils.contains(strArr, str);
        }
    }

    private boolean isOnBgOffloadQueue(int i) {
        return this.mEnableOffloadQueue && (Integer.MIN_VALUE & i) != 0;
    }

    public ParcelFileDescriptor getLifeMonitor() {
        ParcelFileDescriptor dup;
        if (!isCallerShell()) {
            throw new SecurityException("Only shell can call it");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                try {
                    if (this.mLifeMonitorFds == null) {
                        this.mLifeMonitorFds = ParcelFileDescriptor.createPipe();
                    }
                    dup = this.mLifeMonitorFds[0].dup();
                } catch (IOException e) {
                    Slog.w("ActivityManager", "Unable to create pipe", e);
                    resetPriorityAfterProcLockedSection();
                    return null;
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return dup;
    }

    public void setActivityLocusContext(ComponentName componentName, LocusId locusId, IBinder iBinder) {
        int callingUid = Binder.getCallingUid();
        int callingUserId = UserHandle.getCallingUserId();
        if (getPackageManagerInternal().getPackageUid(componentName.getPackageName(), 0L, callingUserId) != callingUid) {
            throw new SecurityException("Calling uid " + callingUid + " cannot set locusIdfor package " + componentName.getPackageName());
        }
        this.mActivityTaskManager.setLocusId(locusId, iBinder);
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.reportLocusUpdate(componentName, callingUserId, locusId, iBinder);
        }
    }

    public boolean isAppFreezerSupported() {
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            CachedAppOptimizer cachedAppOptimizer = this.mOomAdjuster.mCachedAppOptimizer;
            return CachedAppOptimizer.isFreezerSupported();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public boolean isAppFreezerEnabled() {
        return this.mOomAdjuster.mCachedAppOptimizer.useFreezer();
    }

    public boolean isAppFreezerExemptInstPkg() {
        return this.mOomAdjuster.mCachedAppOptimizer.freezerExemptInstPkg();
    }

    public void onBackPressedOnTheiaMonitor(long j) throws RemoteException {
        if (Binder.getCallingPid() != Process.myPid()) {
            Slog.w("ActivityManager", "onBackPressedOnTheiaMonitor() from pid=" + Binder.getCallingPid() + ", not system server. ignore!");
            return;
        }
        this.mActivityManagerServiceExt.onBackPressedOnTheiaMonitor(j);
    }

    public void sendTheiaEvent(long j, Intent intent) throws RemoteException {
        this.mActivityManagerServiceExt.sendTheiaEvent(j, intent);
    }

    public void resetAppErrors() {
        enforceCallingPermission("android.permission.RESET_APP_ERRORS", "resetAppErrors");
        this.mAppErrors.resetState();
    }

    public boolean enableAppFreezer(boolean z) {
        int callingUid = Binder.getCallingUid();
        if (callingUid == 1000 || Build.IS_DEBUGGABLE) {
            return this.mOomAdjuster.mCachedAppOptimizer.enableFreezer(z);
        }
        throw new SecurityException("Caller uid " + callingUid + " cannot set freezer state ");
    }

    public boolean enableFgsNotificationRateLimit(boolean z) {
        boolean enableFgsNotificationRateLimitLocked;
        enforceCallingPermission("android.permission.WRITE_DEVICE_CONFIG", "enableFgsNotificationRateLimit");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                enableFgsNotificationRateLimitLocked = this.mServices.enableFgsNotificationRateLimitLocked(z);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return enableFgsNotificationRateLimitLocked;
    }

    public void holdLock(IBinder iBinder, int i) {
        getTestUtilityServiceLocked().verifyHoldLockToken(iBinder);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                SystemClock.sleep(i);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static void traceBegin(long j, String str, String str2) {
        if (Trace.isTagEnabled(j)) {
            Trace.traceBegin(j, str + str2);
        }
    }

    private static int getIntArg(PrintWriter printWriter, String[] strArr, int i, int i2) {
        if (i > strArr.length) {
            printWriter.println("Missing argument");
            return i2;
        }
        String str = strArr[i];
        try {
            return Integer.parseInt(str);
        } catch (Exception unused) {
            printWriter.printf("Non-numeric argument at index %d: %s\n", Integer.valueOf(i), str);
            return i2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void notifyMediaProjectionEvent(int i, IBinder iBinder, int i2) {
        ArraySet<IBinder> valueAt;
        synchronized (this.mMediaProjectionTokenMap) {
            int indexOfKey = this.mMediaProjectionTokenMap.indexOfKey(i);
            if (i2 == 0) {
                if (indexOfKey < 0) {
                    valueAt = new ArraySet<>();
                    this.mMediaProjectionTokenMap.put(i, valueAt);
                } else {
                    valueAt = this.mMediaProjectionTokenMap.valueAt(indexOfKey);
                }
                valueAt.add(iBinder);
            } else if (i2 == 1 && indexOfKey >= 0) {
                ArraySet<IBinder> valueAt2 = this.mMediaProjectionTokenMap.valueAt(indexOfKey);
                valueAt2.remove(iBinder);
                if (valueAt2.isEmpty()) {
                    this.mMediaProjectionTokenMap.removeAt(indexOfKey);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean isAllowedMediaProjectionNoOpCheck(int i) {
        boolean z;
        synchronized (this.mMediaProjectionTokenMap) {
            int indexOfKey = this.mMediaProjectionTokenMap.indexOfKey(i);
            z = indexOfKey >= 0 && !this.mMediaProjectionTokenMap.valueAt(indexOfKey).isEmpty();
        }
        return z;
    }

    public IActivityManagerServiceWrapper getWrapper() {
        return this.mAmsWrapper;
    }

    /* loaded from: C:\Users\HuangYW\Desktop\Realme反编译\services\classes.dex */
    private class ActivityManagerServiceWrapper implements IActivityManagerServiceWrapper {
        private ActivityManagerServiceWrapper() {
        }

        private IActivityManagerServiceExt getExtImpl() {
            return ActivityManagerService.this.mActivityManagerServiceExt;
        }

        private IActivityManagerServiceSocExt getSocExtImpl() {
            return ActivityManagerService.this.mSocExt;
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public void addServiceToMap(ArrayMap<String, IBinder> arrayMap, String str) {
            ActivityManagerService.addServiceToMap(arrayMap, str);
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public List<ResolveInfo> collectReceiverComponents(Intent intent, String str, int i, int[] iArr, int[] iArr2) {
            return ActivityManagerService.this.collectReceiverComponents(intent, str, i, iArr, iArr2);
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public void cleanupDisabledPackageComponentsLocked(String str, int i, String[] strArr) {
            ActivityManagerService.this.cleanupDisabledPackageComponentsLocked(str, i, strArr);
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public void trimApplications(boolean z, int i) {
            ActivityManagerService.this.trimApplications(z, i);
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public boolean startUser(int i, int i2, IProgressListener iProgressListener) {
            return ActivityManagerService.this.mUserController.startUser(i, i2, iProgressListener);
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public int getCurrentUserIdLU() {
            return ActivityManagerService.this.mUserController.getCurrentUserIdLU();
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public void removeUriPermissionsForPackage(String str, int i, boolean z, boolean z2) {
            ActivityManagerService.this.mUgmInternal.removeUriPermissionsForPackage(str, i, z, z2);
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public void removeRecentTasksByPackageName(String str, int i) {
            ActivityManagerService.this.mAtmInternal.removeRecentTasksByPackageName(str, i);
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public void killPackageProcessesLocked(String str, int i, int i2, int i3, int i4, int i5, String str2) {
            ActivityManagerService.this.mProcessList.killPackageProcessesLSP(str, i, i2, i3, i4, i5, str2);
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public boolean forceStopPackageLocked(String str, int i, boolean z, boolean z2, boolean z3, boolean z4, boolean z5, int i2, String str2) {
            return ActivityManagerService.this.forceStopPackageLocked(str, i, z, z2, z3, z4, z5, i2, str2);
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public void forceStopPackageLocked(String str, int i) {
            ActivityManagerService.this.mServices.forceStopPackageLocked(str, i);
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public void removeDyingProviderLocked(ProcessRecord processRecord, ContentProviderRecord contentProviderRecord, boolean z) {
            ActivityManagerService.this.mCpHelper.removeDyingProviderLocked(processRecord, contentProviderRecord, z);
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public ProcessRecord getTopAppLockedForBroadcast() {
            ActivityTaskManagerInternal activityTaskManagerInternal = ActivityManagerService.this.mAtmInternal;
            WindowProcessController topApp = activityTaskManagerInternal != null ? activityTaskManagerInternal.getTopApp() : null;
            if (topApp != null) {
                return (ProcessRecord) topApp.mOwner;
            }
            return null;
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public void dynamicalConfigLog(String str, IApplicationThread iApplicationThread, boolean z) {
            if (str == null || str.isEmpty()) {
                return;
            }
            if ("ActiveServices".equals(str)) {
                ActivityManagerService.this.mServices.getWrapper().getExtImpl().setActiveServicesDynamicalLogEnable(z);
            } else {
                if (!"ActivityThread".equals(str) || iApplicationThread == null) {
                    return;
                }
                try {
                    iApplicationThread.setDynamicalLogEnable(z);
                } catch (RemoteException unused) {
                    Slog.w("ActivityManager", "Got a RemoteException while open the activity log ");
                }
            }
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public boolean isInRestartingServicesList(String str, int i) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                for (int i2 = 0; i2 < ActivityManagerService.this.mServices.mRestartingServices.size(); i2++) {
                    try {
                        ApplicationInfo applicationInfo = ActivityManagerService.this.mServices.mRestartingServices.get(i2).appInfo;
                        if (applicationInfo.uid == i && applicationInfo.packageName.equals(str)) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            return true;
                        }
                    } catch (Throwable th) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
                return false;
            }
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public Object getAnrManager() {
            return ActivityManagerService.this.mSocExt.getAnrManager();
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public Object getAmsExt() {
            return ActivityManagerService.this.mSocExt.getAmsExt();
        }

        @Override // com.android.server.am.IActivityManagerServiceWrapper
        public boolean isCameraActiveForUid(int i) {
            return ActivityManagerService.this.isCameraActiveForUid(i);
        }
    }
}
